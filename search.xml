<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【JavaScript】MVC知识概括</title>
    <url>/uncategorized/%E3%80%90JavaScript%E3%80%91MVC%E7%9F%A5%E8%AF%86%E6%A6%82%E6%8B%AC/</url>
    <content><![CDATA[<p>CRM-使用别人的东西</p>
<ul>
<li>Copy 抄代码</li>
<li>Run  运行代码</li>
<li>Modify  修改代码</li>
</ul>
<h2 id="一、MAC的前提：模块化"><a href="#一、MAC的前提：模块化" class="headerlink" title="一、MAC的前提：模块化"></a>一、MAC的前提：模块化</h2><h3 id="1-1-什么是MVC"><a href="#1-1-什么是MVC" class="headerlink" title="1.1 什么是MVC"></a>1.1 什么是MVC</h3><ul>
<li>M:Model 模式</li>
<li>v:View  视图</li>
<li>C:Controller 控制器</li>
</ul>
<h3 id="1-2-问题：怎么解决代码一写就忘记？"><a href="#1-2-问题：怎么解决代码一写就忘记？" class="headerlink" title="1.2 问题：怎么解决代码一写就忘记？"></a>1.2 问题：怎么解决代码一写就忘记？</h3><ul>
<li>模块化编程：一块代码，只操作一种功能<ul>
<li>例如：将混乱的一个js文件，按功能分为不同的js文件</li>
</ul>
</li>
<li>MVC的前提就是代码要有模块化</li>
</ul>
<h2 id="二、立即执行函数的使用"><a href="#二、立即执行函数的使用" class="headerlink" title="二、立即执行函数的使用"></a>二、立即执行函数的使用</h2><ul>
<li>判断代码乱不乱—代码多就乱、代码少就不乱</li>
<li>怎么减少代码又兼顾功能——引入MVC思想</li>
</ul>
<h3 id="2-1-问题：一个变量用var声明会自动变成全局变量，如何解决这个问题？"><a href="#2-1-问题：一个变量用var声明会自动变成全局变量，如何解决这个问题？" class="headerlink" title="2.1 问题：一个变量用var声明会自动变成全局变量，如何解决这个问题？"></a>2.1 问题：一个变量用var声明会自动变成全局变量，如何解决这个问题？</h3><ul>
<li>全局变量可以互相影响</li>
<li>解决方法：不要使用全局变量，使用局部变量</li>
</ul>
<h4 id="2-1-在ES5，使用局部变量方法"><a href="#2-1-在ES5，使用局部变量方法" class="headerlink" title="2.1 在ES5，使用局部变量方法"></a>2.1 在ES5，使用局部变量方法</h4><p> 只要函数里面才有局部变量，于是声明一个<code>function xxx</code>，然后<code>xxx.call()</code>，这个时候<code>xxx</code>是全局变量（全局函数），所以不能给这个函数名字，所以<code>function().call()</code>,但是chrome会报错，语法错误</p>
<h5 id="2-1-1-两个方法不报错-加个！和加个-包裹函数"><a href="#2-1-1-两个方法不报错-加个！和加个-包裹函数" class="headerlink" title="2.1.1 两个方法不报错  加个！和加个()包裹函数"></a>2.1.1 两个方法不报错  加个<code>！</code>和加个<code>()</code>包裹函数</h5><ul>
<li><code>！function().call()</code></li>
<li>虽然<code>！</code>会改变匿名函数的返回值，但是这里我们不关心函数的返回值，所以没关系</li>
<li><code>(function().call())</code></li>
<li>但是有个bug 函数前面加个数字就会 被迫调用  不推荐使用</li>
</ul>
<h4 id="2-2-es5使用局部变量方法"><a href="#2-2-es5使用局部变量方法" class="headerlink" title="2.2 es5使用局部变量方法"></a>2.2 es5使用局部变量方法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//错误如下</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//单用一个&#123;&#125;是不能使用到局部变量，因为var会变量提升</span></span><br><span class="line">    <span class="comment">//var会变量提升到当前函数或者是全局作用域最顶端上</span></span><br><span class="line">    <span class="comment">//虽然java和C++可以，但是JavaScript就是不能</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"> <span class="comment">//成功如下 方法一 </span></span><br><span class="line"> ！<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//用一个函数函数包裹，然后call调用</span></span><br><span class="line"> &#125;.call()</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//成功如下 方法二 </span></span><br><span class="line"> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123; </span><br><span class="line">  <span class="comment">//用一个函数函数包裹，然后call调用 ,有bug不推荐使用</span></span><br><span class="line"> &#125;.call())</span><br></pre></td></tr></table></figure>



<h2 id="三、闭包的使用"><a href="#三、闭包的使用" class="headerlink" title="三、闭包的使用"></a>三、闭包的使用</h2><h3 id="3-1-前置问题：如果采用了上面的局部变量方法，若是确实要两个模块要交互的话，怎么解决？"><a href="#3-1-前置问题：如果采用了上面的局部变量方法，若是确实要两个模块要交互的话，怎么解决？" class="headerlink" title="3.1 前置问题：如果采用了上面的局部变量方法，若是确实要两个模块要交互的话，怎么解决？"></a>3.1 前置问题：如果采用了上面的局部变量方法，若是确实要两个模块要交互的话，怎么解决？</h3><h3 id="3-2-一个例子"><a href="#3-2-一个例子" class="headerlink" title="3.2 一个例子"></a>3.2 一个例子</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> accessor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//变量</span></span><br><span class="line">    <span class="keyword">var</span> person =  &#123;</span><br><span class="line">        name: <span class="string">'tony'</span>,</span><br><span class="line">        age: <span class="number">17</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="comment">//匿名函数，用了外面的变量,这person和这个匿名函数就是闭包</span></span><br><span class="line">        person.age += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> person.age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//这是一个返回了匿名函数的函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> growUp = accessor.call()</span><br><span class="line"></span><br><span class="line">growUp()</span><br></pre></td></tr></table></figure>


<h3 id="3-3-闭包是什么"><a href="#3-3-闭包是什么" class="headerlink" title="3.3 闭包是什么"></a>3.3 闭包是什么</h3><p>  一个函数，访问了外面的变量,这变量和这个函数就是闭包。</p>
<p>  闭包有与立即执行函数一起使用，没有立即执行函数就没有闭包。</p>
<h3 id="3-4-闭包的作用"><a href="#3-4-闭包的作用" class="headerlink" title="3.4 闭包的作用"></a>3.4 闭包的作用</h3><ol>
<li>闭包用来对数据进行隐藏细节</li>
<li>进行访问控制</li>
</ol>
<h3 id="3-5-问题：如果没有立即执行函数，上面例子会出现什么？"><a href="#3-5-问题：如果没有立即执行函数，上面例子会出现什么？" class="headerlink" title="3.5 问题：如果没有立即执行函数，上面例子会出现什么？"></a>3.5 问题：如果没有立即执行函数，上面例子会出现什么？</h3><p>  立即执行函数是隔离作用域的，如果没有立即执行函数，这个闭包毫无意义。因为var的person变量就是全局变量，没有必要封装它。<br>量</p>
<ul>
<li>立即执行函数使得person无法被外部访问</li>
<li>闭包使得匿名函数可以操作person</li>
<li>window.tonyGrowUp 保存了匿名函数的肚子鼓</li>
<li>任何地方都可以使用window.tonyGrowUp</li>
</ul>
<p>上面四点可以推论出:</p>
<ul>
<li>任何地方都可以使用window.tonyGrowUp操作person，但是不能直接访问person</li>
</ul>
<h2 id="四、MVC的V和C"><a href="#四、MVC的V和C" class="headerlink" title="四、MVC的V和C"></a>四、MVC的V和C</h2><h3 id="4-1-view的作用"><a href="#4-1-view的作用" class="headerlink" title="4.1 view的作用"></a>4.1 view的作用</h3><p>view作用是告诉js，页面中的哪些代码块是我这个模块对应的东西</p>
<h3 id="4-2-Controller"><a href="#4-2-Controller" class="headerlink" title="4.2 Controller"></a>4.2 Controller</h3><p>Controller作用是控制视图(view)</p>
<p>一个Controller事件只操作一个事件。</p>
<h3 id="4-3-MVC的作用"><a href="#4-3-MVC的作用" class="headerlink" title="4.3 MVC的作用"></a>4.3 MVC的作用</h3><p>以前每有一个情况写一个东西，导致结构都不相同，而现在有了MVC之后，结构一致。都有一个view、controller。</p>
<p>controller去操作view</p>
<p>所有的代码都一样</p>
<h3 id="4-4-this"><a href="#4-4-this" class="headerlink" title="4.4 this"></a>4.4 this</h3><p>this只有转变成call，才能确定</p>
<p>箭头函数没有this</p>
<p>箭头函数内外，this不变</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//chrome console控制操作</span></span><br><span class="line"><span class="keyword">this</span> <span class="comment">//返回window对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">//返回undefined</span></span><br><span class="line"></span><br><span class="line">f.call(&#123;<span class="attr">name</span>:<span class="string">'tony'</span>&#125;) <span class="comment">//返回还是window对象</span></span><br><span class="line"><span class="comment">//箭头函数不存在this</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/03/05/5AKV8zYHuSM9PIv.png" alt="mvc-this01.png"></p>
<h2 id="五、MVC的Model"><a href="#五、MVC的Model" class="headerlink" title="五、MVC的Model"></a>五、MVC的Model</h2><p>v 只负责看见的东西<br>c 负责将二者组合<br>m 跟数据相关的操作（请求，存数据）</p>
<h2 id="六、MVC总结"><a href="#六、MVC总结" class="headerlink" title="六、MVC总结"></a>六、MVC总结</h2><p>MVC就是把代码分成三块</p>
<ul>
<li>第一块 V(view)告诉程序，你的代码长什么样子，或者你的代码在页面的哪一块</li>
<li>第二块 M(Model)你的数据有哪些操作，操作(初始化，获取，保存)</li>
<li>第三 C(Controll)负责其他所有的事情，Controll比较复杂点</li>
<li>这就是MVC</li>
</ul>
<p>总的来说，V就是视图，M是数据，所有相关数据的操作都应该放在model里面，Controll是控制器，它来控制其他所有的代码。</p>
<p>MVC是一种代码组织形式。它不是任何一种框架，也不是任何一种技术。<br>它就是一种组织代码的思想。</p>
<p><img src="https://i.loli.net/2020/03/10/sk4p5SmLcMiRahP.png" alt="mvc01-min.png"></p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>【JavaScript】Promise的出现背景及使用与格式</title>
    <url>/uncategorized/%E3%80%90JavaScript%E3%80%91Promise%E7%9A%84%E5%87%BA%E7%8E%B0%E8%83%8C%E6%99%AF%E5%8F%8A%E4%BD%BF%E7%94%A8%E4%B8%8E%E6%A0%BC%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="一、前置问题：用函数有什么问题？—回调问题"><a href="#一、前置问题：用函数有什么问题？—回调问题" class="headerlink" title="一、前置问题：用函数有什么问题？—回调问题"></a>一、前置问题：用函数有什么问题？—回调问题</h2><p>如果不查阅文档，不知道回调的是什么，成功传到哪里，失败传到哪里。</p>
<p>因为每一个人封装函数的风格，不一致，导致要查看多个文档才能更好调有其他人的库。<br>没有规范，那么在JavaScript中有没有一个规范来定义形式咧？</p>
<p>有，这个规范就是Promise</p>
<p>Promise只是一个确定形式的规范。</p>
<h2 id="二、Promise的使用"><a href="#二、Promise的使用" class="headerlink" title="二、Promise的使用"></a>二、Promise的使用</h2><h3 id="以jQuery为例"><a href="#以jQuery为例" class="headerlink" title="以jQuery为例"></a>以jQuery为例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//提前引入jQuery文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第一个方法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">responseText</span>)</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">response</span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> myButton.addEventListener(<span class="string">'click'</span>,(e)=&gt;&#123;</span><br><span class="line">  <span class="built_in">window</span>.jQuery.ajax(&#123;</span><br><span class="line">    url:<span class="string">'/frank'</span>,</span><br><span class="line">    method:<span class="string">'get'</span>,</span><br><span class="line">    success:<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">      f1.call(<span class="literal">undefined</span>,x)</span><br><span class="line">      f2.call(<span class="literal">undefined</span>,y)</span><br><span class="line">    &#125;,</span><br><span class="line">    error:<span class="function">(<span class="params">x</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(x)</span><br><span class="line">      <span class="built_in">console</span>.log(x.status)</span><br><span class="line">      <span class="built_in">console</span>.log(x.responseText)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二个方法(Promise方法)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">then</span>(<span class="params">responseText</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(responseText)</span><br><span class="line"> &#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fail</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(response)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> myButton.addEventListener(<span class="string">'click'</span>,(e)=&gt;&#123;</span><br><span class="line">  $ajax(&#123;</span><br><span class="line">    url:<span class="string">'/frank'</span>,</span><br><span class="line">    method:<span class="string">'get'</span>,</span><br><span class="line">  &#125;).then(success,fail)</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//这是一种新的API形式，虽然要传函数，但可以没有名字。</span></span><br><span class="line"><span class="comment">//不用再查找文档，只要记得成功放在第一个参数，失败放在第二个参数。</span></span><br><span class="line"><span class="comment">//代码得以继续优化</span></span><br><span class="line"></span><br><span class="line"> myButton.addEventListener(<span class="string">'click'</span>,(e)=&gt;&#123;</span><br><span class="line">  $ajax(&#123;</span><br><span class="line">    url:<span class="string">'/xxx'</span>,</span><br><span class="line">    method:<span class="string">'get'</span>,</span><br><span class="line">  &#125;).then(</span><br><span class="line">    (responseText) =&gt; &#123;<span class="built_in">console</span>.log(responseText)&#125;,</span><br><span class="line">    (response) =&gt; &#123;<span class="built_in">console</span>.log(<span class="string">'error'</span>)&#125;</span><br><span class="line">  )</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>

<h2 id="三、Promise的意义"><a href="#三、Promise的意义" class="headerlink" title="三、Promise的意义"></a>三、Promise的意义</h2><ul>
<li>第一个意义：完全不用考虑传入的是success还是成功，是error还是fail，直接then一下就可以使用</li>
<li>第二个意义：标准化操作</li>
</ul>
<h2 id="四、问题：如果同时有两个函数要操作，Promise是如何操作？"><a href="#四、问题：如果同时有两个函数要操作，Promise是如何操作？" class="headerlink" title="四、问题：如果同时有两个函数要操作，Promise是如何操作？"></a>四、问题：如果同时有两个函数要操作，Promise是如何操作？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">myButton.addEventListener(<span class="string">'click'</span>,(e)=&gt;&#123;</span><br><span class="line"> $ajax(&#123;</span><br><span class="line">   url:<span class="string">'/xxx'</span>,</span><br><span class="line">   method:<span class="string">'get'</span>,</span><br><span class="line"> &#125;).then( <span class="comment">//then的中文含义：然后</span></span><br><span class="line">   (responseText) =&gt; &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(responseText);</span><br><span class="line">   <span class="keyword">return</span> responseText</span><br><span class="line">   (response) =&gt; &#123;<span class="built_in">console</span>.log(<span class="string">'error1'</span>);<span class="keyword">return</span> <span class="string">'已经处理'</span></span><br><span class="line"> ).then(</span><br><span class="line">   (上一次的处理结果) =&gt; &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(上一次的处理结果)</span><br><span class="line">   &#125;,</span><br><span class="line">   (response) =&gt; &#123;<span class="built_in">console</span>.log(<span class="string">'error2'</span>);</span><br><span class="line"> )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//这样就把回调规范起来了</span></span><br></pre></td></tr></table></figure>

<p>浏览器结果如下<br><img src="https://i.loli.net/2020/03/04/iCoAa7d1zlGt2kc.png" alt="Promise01.png"></p>
<h2 id="五、自己如何封装Promise"><a href="#五、自己如何封装Promise" class="headerlink" title="五、自己如何封装Promise"></a>五、自己如何封装Promise</h2><p>全局window下的promise，promise接受一个函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQeuery.ajax=<span class="function"><span class="keyword">function</span>(<span class="params">&#123;url,method,body,successFn,failFn,headers&#125;</span>)</span>&#123;</span><br><span class="line"><span class="comment">//请问ajax的返回值是什么？</span></span><br><span class="line"><span class="comment">//答案：Promise new出来的对象(Promise对象，接受一个函数)</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> request = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  request.open(method,url)</span><br><span class="line">  request.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(request.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &gt; <span class="number">300</span> )&#123;</span><br><span class="line">      successFn.call(<span class="literal">undefined</span>,request.responseText)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.status &gt;= <span class="number">400</span> )&#123;</span><br><span class="line">      failFn.call(<span class="literal">undefined</span>，request)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  request.send(body)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>背诵<code>return new Promise(function(resolve,reject){}</code>这是Promise的格式，固定套路</p>
<h3 id="5-1-将resolve-reject套入代码中"><a href="#5-1-将resolve-reject套入代码中" class="headerlink" title="5.1  将resolve,reject套入代码中"></a>5.1  将resolve,reject套入代码中</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQeuery.ajax=<span class="function"><span class="keyword">function</span>(<span class="params">&#123;url,method,body,headers&#125;</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> request = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  request.open(method,url)</span><br><span class="line">  request.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(request.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &gt; <span class="number">300</span> )&#123;</span><br><span class="line">      resolve.call(<span class="literal">undefined</span>,request.responseText)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.status &gt;= <span class="number">400</span> )&#123;</span><br><span class="line">      reject.call(<span class="literal">undefined</span>，request)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  request.send(body)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>




<h3 id="5-2-总结"><a href="#5-2-总结" class="headerlink" title="5.2 总结"></a>5.2 总结</h3><ol>
<li>首先是用then代替了successFn，failFn参数</li>
<li>然后把代码都放入在<code>return new Promise(function(resolve,reject){}</code>格式中</li>
<li>如果成功调用resolve，如果失败调用reject</li>
</ol>
<h3 id="5-3-jquery-ajax使用Promise"><a href="#5-3-jquery-ajax使用Promise" class="headerlink" title="5.3 jquery.ajax使用Promise"></a>5.3 jquery.ajax使用Promise</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">myButton.addEventListener(<span class="string">'click'</span>, (e) =&gt;&#123;</span><br><span class="line">  <span class="built_in">window</span>.jQuery.ajax(&#123;</span><br><span class="line">    <span class="comment">//url:'tony', 这是失败</span></span><br><span class="line">    url:<span class="string">'/xxx'</span>, <span class="comment">//这是成功</span></span><br><span class="line">    method:<span class="string">'get'</span>,</span><br><span class="line">    headers:&#123;</span><br><span class="line">      <span class="string">'content-type'</span>:<span class="string">'application/x-www-form-urlencoded'</span>,</span><br><span class="line">      <span class="string">'tony'</span>:<span class="string">'18'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).then(</span><br><span class="line">  (text)=&gt;&#123;<span class="built_in">console</span>.log(text)&#125;,</span><br><span class="line">  (request)=&gt;&#123;<span class="built_in">console</span>.log(request)  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<p><img src="https://i.loli.net/2020/03/04/xEoJRYHGesrd43p.png" alt="promise.png"><br><img src="https://i.loli.net/2020/03/04/2opqCrs3EmPdJ7i.png" alt="promise02.png"></p>
<h2 id="六、Promise的实现形式"><a href="#六、Promise的实现形式" class="headerlink" title="六、Promise的实现形式"></a>六、Promise的实现形式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.Promise = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//省略中间代码</span></span><br><span class="line">  <span class="keyword">return</span>&#123;</span><br><span class="line">    then:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前面代码格式化上面形式如下</span></span><br><span class="line">myButton.addEventListener(<span class="string">'click'</span>, (e) =&gt;&#123;</span><br><span class="line">  <span class="keyword">let</span> promise = <span class="built_in">window</span>.jQuery.ajax(&#123;</span><br><span class="line">    <span class="comment">//url:'tony', 这是失败</span></span><br><span class="line">    url:<span class="string">'/xxx'</span>, <span class="comment">//这是成功</span></span><br><span class="line">    method:<span class="string">'get'</span>,</span><br><span class="line">    headers:&#123;</span><br><span class="line">      <span class="string">'content-type'</span>:<span class="string">'application/x-www-form-urlencoded'</span>,</span><br><span class="line">      <span class="string">'tony'</span>:<span class="string">'18'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">   promise.then(</span><br><span class="line">  (text)=&gt;&#123;<span class="built_in">console</span>.log(text)&#125;,</span><br><span class="line">  (request)=&gt;&#123;<span class="built_in">console</span>.log(request)  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h2><p> 背诵<code>return new Promise(function(resolve,reject){}</code>这是Promise的格式，固定套路</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>【JavaScript】自己封装AJXA</title>
    <url>/uncategorized/%E3%80%90JavaScript%E3%80%91%E8%87%AA%E5%B7%B1%E5%B0%81%E8%A3%85AJXA/</url>
    <content><![CDATA[<p>ajax能获取响应头，node.js能设置响应头</p>
<h2 id="一、前置-TCP知识"><a href="#一、前置-TCP知识" class="headerlink" title="一、前置-TCP知识"></a>一、前置-TCP知识</h2><ul>
<li>HTML/CSS/JavaScript/JSON是基于HTTP传输</li>
<li>HTTP是基于TCP/IP协议传输</li>
<li>一次请求不是一下子全部给客户端的，要经过“三次握手”，“三次握手”要确定客户服务双方都能请求（request）与响应（response）</li>
<li>先获取响应头，在获取响应头</li>
<li>浏览器是一开始就判断响应的状态（200，404wait），然后下载完全部响应内容。</li>
</ul>
<h2 id="二、自己封装jQuery-ajax"><a href="#二、自己封装jQuery-ajax" class="headerlink" title="二、自己封装jQuery.ajax"></a>二、自己封装jQuery.ajax</h2><h3 id="2-1-window-jQuery-ajax的结构"><a href="#2-1-window-jQuery-ajax的结构" class="headerlink" title="2.1 window.jQuery.ajax的结构"></a>2.1 window.jQuery.ajax的结构</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQuery.ajax = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line"><span class="comment">//代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-ajax功能"><a href="#2-2-ajax功能" class="headerlink" title="2.2 ajax功能"></a>2.2 ajax功能</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">request.open()</span><br><span class="line">request.setRequestHeader()</span><br><span class="line">request.send()</span><br><span class="line">reuqest.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ajax功能是将xmlHttprequest的上面四行代码变成一行代码</span></span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">###  2.3 封装window.jQuery </span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> javascript</span><br><span class="line"><span class="built_in">window</span>.jQuery = <span class="function"><span class="keyword">function</span>(<span class="params">nodeOrSelector</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> nondes = &#123;&#125;</span><br><span class="line">  nodes.addClass = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  nodes.html = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> nodes</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">###  2.4 封装window.jQuery.ajax </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> javascript</span><br><span class="line"><span class="built_in">window</span>.jQuery.ajax = <span class="function"><span class="keyword">function</span>(<span class="params">url,method,body,successFn,failFn</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> request = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  request.open(method,url)</span><br><span class="line">  request.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(request.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &gt; <span class="number">300</span> )&#123;</span><br><span class="line">      successFn.call(<span class="literal">undefined</span>,request.responseText)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.status &gt;= <span class="number">400</span> )&#123;</span><br><span class="line">      failFn.call(<span class="literal">undefined</span>，request)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  request.send(body)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.$ = <span class="built_in">window</span>.jQuery</span><br></pre></td></tr></table></figure>

<h3 id="2-5-运用window-jQuery-ajax函数"><a href="#2-5-运用window-jQuery-ajax函数" class="headerlink" title="2.5 运用window.jQuery.ajax函数"></a>2.5 运用window.jQuery.ajax函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">myButtons.addEventListener(<span class="string">'click'</span>,(e)=&gt;&#123;</span><br><span class="line">  <span class="built_in">window</span>.jQuery.ajax(</span><br><span class="line">  <span class="string">'/xxx'</span>,  <span class="comment">//路径</span></span><br><span class="line">  <span class="string">'post'</span>,  <span class="comment">//方法体</span></span><br><span class="line">  <span class="string">'a=1&amp;b=2'</span>,  <span class="comment">//请求体</span></span><br><span class="line">  (responseText)=&gt;&#123;<span class="built_in">console</span>.log(<span class="number">1</span>)&#125;, <span class="comment">//成功函数</span></span><br><span class="line">  (response)=&gt;&#123;<span class="built_in">console</span>.log(<span class="number">2</span>)&#125;  <span class="comment">//失败函数</span></span><br><span class="line">  )&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="2-6-window-jQuery-ajax函数优化-给参数命名"><a href="#2-6-window-jQuery-ajax函数优化-给参数命名" class="headerlink" title="2.6 window.jQuery.ajax函数优化-给参数命名"></a>2.6 window.jQuery.ajax函数优化-给参数命名</h3><p>上面函数容易不确定其中参数的意思，所以解决这个问题，有个技巧，传一个有结构的参数，即对象，例子如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">myButtons.addEventListener(<span class="string">'click'</span>,(e)=&gt;&#123;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;</span><br><span class="line">    url:<span class="string">'/xxx'</span>,</span><br><span class="line">    method:<span class="string">'get'</span>,</span><br><span class="line">    successFn:()=&#123;&#125;,</span><br><span class="line">    fail:()=&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">window</span>.jQuery.ajax(obj)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为采用了对象，所以window.jQuery.ajax也要修改，修改如下</span></span><br><span class="line"><span class="built_in">window</span>.jQuery.ajxa = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> url = options.url</span><br><span class="line">  <span class="keyword">let</span> method = options.method</span><br><span class="line">  <span class="keyword">let</span> body = options.body</span><br><span class="line">  <span class="keyword">let</span> successFn = options.successFn</span><br><span class="line">  <span class="keyword">let</span> fail = options.failFn</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> request = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  request.open(method,url)</span><br><span class="line">  request.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(request.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &gt; <span class="number">300</span> )&#123;</span><br><span class="line">      successFn.call(<span class="literal">undefined</span>,request.responseText)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.status &gt;= <span class="number">400</span> )&#123;</span><br><span class="line">      failFn.call(<span class="literal">undefined</span>，request)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  request.send(body)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-7-window-jQuery-ajax函数优化-不要中间的obj"><a href="#2-7-window-jQuery-ajax函数优化-不要中间的obj" class="headerlink" title="2.7 window.jQuery.ajax函数优化-不要中间的obj"></a>2.7 window.jQuery.ajax函数优化-不要中间的obj</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">myButtons.addEventListener(<span class="string">'click'</span>,(e)=&gt;&#123;</span><br><span class="line"><span class="built_in">window</span>.jQuery.ajax(&#123;</span><br><span class="line">    url:<span class="string">'/xxx'</span>,</span><br><span class="line">    method:<span class="string">'get'</span>,</span><br><span class="line">    successFn:()=&#123;&#125;,</span><br><span class="line">    fail:()=&#123;&#125;</span><br><span class="line">  &#125;) </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h2 id="三、什么是回调（callback）"><a href="#三、什么是回调（callback）" class="headerlink" title="三、什么是回调（callback）"></a>三、什么是回调（callback）</h2><p>例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下面代码称为使用方代码</span></span><br><span class="line">myButtons.addEventListener(<span class="string">'click'</span>,(e)=&gt;&#123;</span><br><span class="line"><span class="built_in">window</span>.jQuery.ajax(&#123;</span><br><span class="line">    url:<span class="string">'/xxx'</span>,</span><br><span class="line">    method:<span class="string">'get'</span>,</span><br><span class="line">    successFn:(x)=&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(x)<span class="comment">//请问x代表是什么？</span></span><br><span class="line">      <span class="comment">//x代表的是request.responseText   </span></span><br><span class="line">    &#125;,</span><br><span class="line">    fail:()=&#123;&#125;</span><br><span class="line">  &#125;) </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>回调：向反方向call，自己主动调叫call，要其他函数调叫callback，call就是一个函数，上面的<code>(x)={console.log(x)}</code>就是一个回调函数</p>
</li>
<li><p>技巧 callback === function</p>
</li>
</ul>
<h3 id="3-1-如果请求失败，有没有可能存在响应第四部分（response-body）"><a href="#3-1-如果请求失败，有没有可能存在响应第四部分（response-body）" class="headerlink" title="3.1 如果请求失败，有没有可能存在响应第四部分（response.body）?"></a>3.1 如果请求失败，有没有可能存在响应第四部分（response.body）?</h3><p>有，第四部分与状态码无关，与第二部分有关</p>
<p>例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//服务器</span></span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    response.statusCode = <span class="number">404</span></span><br><span class="line">    response.setHeader(<span class="string">'content-Type'</span>,<span class="string">'text/html;charset=utf-8'</span>)</span><br><span class="line">    response.write(<span class="string">`</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        "error":"not found "</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    `</span>) <span class="comment">//书写错误提示</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端</span></span><br><span class="line">fail:<span class="function">(<span class="params">x</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x)</span><br><span class="line">  <span class="built_in">console</span>.log(x.status)</span><br><span class="line">  <span class="built_in">console</span>.log(x.responseText) <span class="comment">//打印响应文本</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>chrome控制台结果如下</p>
<p> <img src="https://i.loli.net/2020/03/03/8pHLCMbGqKahzV6.png" alt="xresponsetext01.png"></p>
<h3 id="3-2-需求一：请求成功之后，执行两个f1与f2函数怎么办-请问怎么传参？"><a href="#3-2-需求一：请求成功之后，执行两个f1与f2函数怎么办-请问怎么传参？" class="headerlink" title="3.2 需求一：请求成功之后，执行两个f1与f2函数怎么办,请问怎么传参？"></a>3.2 需求一：请求成功之后，执行两个f1与f2函数怎么办,请问怎么传参？</h3><p>问题与代码如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">responseText</span>)</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">responseText</span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">myButtons.addEventListener(<span class="string">'click'</span>,(e)=&gt;&#123;</span><br><span class="line"><span class="built_in">window</span>.jQuery.ajax(&#123;</span><br><span class="line">    url:<span class="string">'/xxx'</span>,</span><br><span class="line">    method:<span class="string">'get'</span>,</span><br><span class="line">    successFn:(x)=&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(x)   </span><br><span class="line">    &#125;,</span><br><span class="line">    fail:<span class="function">(<span class="params">x</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(x)</span><br><span class="line">      <span class="built_in">console</span>.log(x.status)</span><br><span class="line">      <span class="built_in">console</span>.log(x.responseText) </span><br><span class="line">  &#125;</span><br><span class="line">  &#125;) </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//外面一个大函数，把函数作为参数传进去，一次调用</span></span><br><span class="line"><span class="comment">//答案如下</span></span><br><span class="line">myButtons.addEventListener(<span class="string">'click'</span>,(e)=&gt;&#123;</span><br><span class="line"><span class="built_in">window</span>.jQuery.ajax(&#123;</span><br><span class="line">    url:<span class="string">'/xxx'</span>,</span><br><span class="line">    method:<span class="string">'get'</span>,</span><br><span class="line">    successFn:(x)=&#123;</span><br><span class="line">      f1.call(<span class="literal">undefined</span>.x)</span><br><span class="line">      f2.call(<span class="literal">undefined</span>.x)</span><br><span class="line">    &#125;,</span><br><span class="line">    fail:<span class="function">(<span class="params">x</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(x)</span><br><span class="line">      <span class="built_in">console</span>.log(x.status)</span><br><span class="line">      <span class="built_in">console</span>.log(x.responseText) </span><br><span class="line">  &#125;&#125;</span><br><span class="line">  &#125;) </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h3 id="3-2-需求二：如果要设置headers，怎么操作？"><a href="#3-2-需求二：如果要设置headers，怎么操作？" class="headerlink" title="3.2 需求二：如果要设置headers，怎么操作？"></a>3.2 需求二：如果要设置headers，怎么操作？</h3><p>答：把要设置的header，添加到window.jQuery.ajax中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//答案如下</span></span><br><span class="line"><span class="comment">//首先在window.jQuery.ajxa中新增变量headers与关于header的for循环</span></span><br><span class="line"><span class="built_in">window</span>.jQuery.ajxa = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> headers = options.headers </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> headers)&#123;</span><br><span class="line">  <span class="keyword">let</span> value = headers[key]</span><br><span class="line">  request.setRequestsetHeader(key,value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">myButtons.addEventListener(<span class="string">'click'</span>,(e)=&gt;&#123;</span><br><span class="line"><span class="built_in">window</span>.jQuery.ajax(&#123;</span><br><span class="line">    url:<span class="string">'/xxx'</span>,</span><br><span class="line">    method:<span class="string">'get'</span>,</span><br><span class="line">    headers:&#123;</span><br><span class="line">      <span class="string">'content-type'</span>:<span class="string">'application/x-www-form-urlencode'</span>,</span><br><span class="line">      <span class="string">'frank'</span>:<span class="string">'18'</span> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加到请求的window.jQuery.ajax中.分别调用headers就可以</span></span><br><span class="line">    successFn:(x)=&#123;</span><br><span class="line">      f1.call(<span class="literal">undefined</span>.x)</span><br><span class="line">      f2.call(<span class="literal">undefined</span>.x)</span><br><span class="line">    &#125;,</span><br><span class="line">    fail:<span class="function">(<span class="params">x</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(x)</span><br><span class="line">      <span class="built_in">console</span>.log(x.status)</span><br><span class="line">      <span class="built_in">console</span>.log(x.responseText) </span><br><span class="line">  &#125;&#125;</span><br><span class="line">  &#125;) </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>chrome控制台结果如下<br><img src="https://i.loli.net/2020/03/03/TJx9wcGZPtWQpCF.png" alt="setheaders01.png"></p>
<h2 id="四、jQuery文档中ajax与自己封装的ajax的区别"><a href="#四、jQuery文档中ajax与自己封装的ajax的区别" class="headerlink" title="四、jQuery文档中ajax与自己封装的ajax的区别"></a>四、jQuery文档中ajax与自己封装的ajax的区别</h2><p><a href="https://api.jquery.com/jQuery.ajax/" target="_blank" rel="noopener">jQuery.ajax()英文文档地址</a></p>
<p><a href="https://www.jquery123.com/jQuery.ajax/" target="_blank" rel="noopener">jQuery.ajax()中文文档地址</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//jquery 文档的ajax例子：发送id作为数据发送到服务器， 保存一些数据到服务器上， 并通一旦它的完成知用户。  如果请求失败，则提醒用户。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> menuId = $(<span class="string">"ul.nav"</span>).first().attr(<span class="string">"id"</span>);</span><br><span class="line"><span class="keyword">var</span> request = $.ajax(&#123;</span><br><span class="line">  url: <span class="string">"script.php"</span>,</span><br><span class="line">  type: <span class="string">"POST"</span>,<span class="comment">//type就是我们设置的methods</span></span><br><span class="line">  data: &#123;<span class="attr">id</span> : menuId&#125;,<span class="comment">//data就是我们设置的body</span></span><br><span class="line">  dataType: <span class="string">"html"</span> <span class="comment">//dataType就是我们设置的Content-type</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">request.done(<span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">  $(<span class="string">"#log"</span>).html( msg );</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">request.fail(<span class="function"><span class="keyword">function</span>(<span class="params">jqXHR, textStatus</span>) </span>&#123;</span><br><span class="line">  alert( <span class="string">"Request failed: "</span> + textStatus );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<h3 id="4-1-继续优化自己的window-jquery-ajax-像jquery一样接受两种形式的参数"><a href="#4-1-继续优化自己的window-jquery-ajax-像jquery一样接受两种形式的参数" class="headerlink" title="4.1 继续优化自己的window.jquery.ajax-像jquery一样接受两种形式的参数"></a>4.1 继续优化自己的window.jquery.ajax-像jquery一样接受两种形式的参数</h3><p><img src="https://i.loli.net/2020/03/03/baoPF2UB7vSKrpR.png" alt="jqueryajax03.png"></p>
<p>代码如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQuery.ajxa = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//下面代码意思是：接受两种形式的参数</span></span><br><span class="line">  <span class="keyword">let</span> url</span><br><span class="line">  <span class="keyword">if</span>(argument.length === <span class="number">1</span>)&#123;</span><br><span class="line">     url = options.url</span><br><span class="line">    </span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">arguments</span>.length === <span class="number">2</span> )&#123;</span><br><span class="line">     url = argunments[<span class="number">0</span>]</span><br><span class="line">     options = <span class="built_in">arguments</span>[<span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//上面代码意思是：接受两种形式的参数</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> method = options.method</span><br><span class="line">  <span class="keyword">let</span> body = options.body</span><br><span class="line">  <span class="keyword">let</span> successFn = options.successFn</span><br><span class="line">  <span class="keyword">let</span> fail = options.failFn</span><br><span class="line">  <span class="keyword">let</span> header = otions.headers</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> request = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  request.open(method,url)</span><br><span class="line">  request.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(request.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &gt; <span class="number">300</span> )&#123;</span><br><span class="line">      successFn.call(<span class="literal">undefined</span>,request.responseText)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.status &gt;= <span class="number">400</span> )&#123;</span><br><span class="line">      failFn.call(<span class="literal">undefined</span>，request)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  request.send(body)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="五、结构化编程"><a href="#五、结构化编程" class="headerlink" title="五、结构化编程"></a>五、结构化编程</h2><ol>
<li>顺序执行</li>
<li>if…else</li>
<li>while/for</li>
</ol>
<p>只要一个编程，有上面的三点就是完备的编程，其他是多余的。</p>
<p><a href="https://zh.wikipedia.org/wiki/%E7%BB%93%E6%9E%84%E5%8C%96%E7%BC%96%E7%A8%8B" target="_blank" rel="noopener">结构化编程</a></p>
<h3 id="维基百科解释"><a href="#维基百科解释" class="headerlink" title="维基百科解释"></a>维基百科解释</h3><p>结构化程序设计（英语：Structured programming），一种编程典范。它采用子程序、代码区块、for循环以及while循环等结构，来取代传统的 goto。希望借此来改善计算机程序的明晰性、质量以及开发时间，并且避免写出面条式代码。</p>
<h2 id="六、用ES6-解构赋值-优化window-jQuery-ajax"><a href="#六、用ES6-解构赋值-优化window-jQuery-ajax" class="headerlink" title="六、用ES6-解构赋值-优化window.jQuery.ajax"></a>六、用ES6-解构赋值-优化window.jQuery.ajax</h2><h3 id="6-1-第一次优化"><a href="#6-1-第一次优化" class="headerlink" title="6.1 第一次优化"></a>6.1 第一次优化</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQuery.ajxa = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">   <span class="comment">//ES5 </span></span><br><span class="line">  <span class="keyword">let</span> url = options.url</span><br><span class="line">  <span class="keyword">let</span> method = options.method</span><br><span class="line">  <span class="keyword">let</span> body = options.body</span><br><span class="line">  <span class="keyword">let</span> successFn = options.successFn</span><br><span class="line">  <span class="keyword">let</span> fail = options.failFn</span><br><span class="line">  <span class="keyword">let</span> headers = optionss.headers</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//ES6 解构赋值</span></span><br><span class="line">  <span class="keyword">let</span> &#123;url,method,body,successFn,failFn,headers&#125; = options <span class="comment">//等价于上面6行</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> request = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  request.open(method,url)</span><br><span class="line">  request.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(request.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &gt; <span class="number">300</span> )&#123;</span><br><span class="line">      successFn.call(<span class="literal">undefined</span>,request.responseText)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.status &gt;= <span class="number">400</span> )&#123;</span><br><span class="line">      failFn.call(<span class="literal">undefined</span>，request)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  request.send(body)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-2-解构赋值"><a href="#6-2-解构赋值" class="headerlink" title="6.2 解构赋值"></a>6.2 解构赋值</h3><p>解构赋值语法是一种 Javascript 表达式。通过解构赋值, 可以将属性/值从对象/数组中取出,赋值给其他变量。<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" target="_blank" rel="noopener">MDN-解构赋值</a></p>
<p>例子代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a, b, rest;</span><br><span class="line">[a, b] = [<span class="number">10</span>, <span class="number">20</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line">[a, b, ...rest] = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 20</span></span><br><span class="line"><span class="built_in">console</span>.log(rest); <span class="comment">// [30, 40, 50]</span></span><br><span class="line"></span><br><span class="line">(&#123; a, b &#125; = &#123; <span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: <span class="number">20</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Stage 4（已完成）提案中的特性</span></span><br><span class="line">(&#123;a, b, ...rest&#125; = &#123;<span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: <span class="number">20</span>, <span class="attr">c</span>: <span class="number">30</span>, <span class="attr">d</span>: <span class="number">40</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 20</span></span><br><span class="line"><span class="built_in">console</span>.log(rest); <span class="comment">// &#123;c: 30, d: 40&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="6-2-1-问题-如何交换两个变量的值"><a href="#6-2-1-问题-如何交换两个变量的值" class="headerlink" title="6.2.1 问题 如何交换两个变量的值"></a>6.2.1 问题 如何交换两个变量的值</h4><h5 id="用es5方法"><a href="#用es5方法" class="headerlink" title="用es5方法"></a>用es5方法</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'a'</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">'b'</span></span><br><span class="line">temp = a </span><br><span class="line">a = b</span><br><span class="line">b = temp</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">//b</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">//a</span></span><br></pre></td></tr></table></figure>
<h5 id="用ES6解构语法"><a href="#用ES6解构语法" class="headerlink" title="用ES6解构语法"></a>用ES6解构语法</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'a'</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">'b'</span></span><br><span class="line">[a,b] = [b,a]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">//b</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">//a</span></span><br></pre></td></tr></table></figure>


<h4 id="6-2-2-ES5与ES6对比"><a href="#6-2-2-ES5与ES6对比" class="headerlink" title="6.2.2 ES5与ES6对比"></a>6.2.2 ES5与ES6对比</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">let</span> a <span class="comment">// ES6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125; <span class="comment">// ES5</span></span><br><span class="line"></span><br><span class="line">f2 = <span class="function">(<span class="params">a</span>) =&gt;</span> &#123;<span class="built_in">console</span>.log()&#125; <span class="comment">// ES6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">'???'</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;</span><br><span class="line">o[x] = <span class="literal">true</span> <span class="comment">// '???' as key </span></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">'???'</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  [x]:<span class="literal">true</span></span><br><span class="line">&#125;<span class="comment">// ES6</span></span><br></pre></td></tr></table></figure>

<h3 id="6-3-第二次优化"><a href="#6-3-第二次优化" class="headerlink" title="6.3 第二次优化"></a>6.3 第二次优化</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//直接从第一个参数拿到这六个变量，同时声明这六个变量</span></span><br><span class="line"><span class="built_in">window</span>.jQeuery.ajax=<span class="function"><span class="keyword">function</span>(<span class="params">&#123;url,method,body,successFn,failFn,headers&#125;</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> request = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  request.open(method,url)</span><br><span class="line">  request.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(request.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &gt; <span class="number">300</span> )&#123;</span><br><span class="line">      successFn.call(<span class="literal">undefined</span>,request.responseText)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.status &gt;= <span class="number">400</span> )&#123;</span><br><span class="line">      failFn.call(<span class="literal">undefined</span>，request)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  request.send(body)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>【前端项目】简历项目添加LeanCloud留言功能</title>
    <url>/uncategorized/%E3%80%90%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E3%80%91%E7%AE%80%E5%8E%86%E9%A1%B9%E7%9B%AE%E6%B7%BB%E5%8A%A0LeanCloud%E7%95%99%E8%A8%80%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h2 id="一、什么是LeanCLoud"><a href="#一、什么是LeanCLoud" class="headerlink" title="一、什么是LeanCLoud"></a>一、什么是LeanCLoud</h2><h3 id="1-1-问题：前端要存储一个数据要怎么操作？"><a href="#1-1-问题：前端要存储一个数据要怎么操作？" class="headerlink" title="1.1 问题：前端要存储一个数据要怎么操作？"></a>1.1 问题：前端要存储一个数据要怎么操作？</h3><p>没有方法存储，用户刷新或者换一台设备，数据就会没有。<br>存数据只能存储在服务器（server）上，这样才能做到，跨设备数据保存。</p>
<h2 id="1-2-LeanCLoud是什么"><a href="#1-2-LeanCLoud是什么" class="headerlink" title="1.2 LeanCLoud是什么"></a>1.2 LeanCLoud是什么</h2><p>在请求量低，LeanCloud提供免费数据库API</p>
<blockquote>
<p>leancloud 领先的 BaaS 提供商,提供数据存储、文件存储、云引擎、容器、即时通讯、消息推送、短信、游戏云等多项服务,为移动开发提供强有力的后端支持</p>
</blockquote>
<p><a href="https://www.leancloud.cn/" target="_blank" rel="noopener">LeanCloud官网</a></p>
<ul>
<li>一个自带数据库和增删改查（CRUD）功能的后台系统<ul>
<li>登录注册、手机验证码功能（收费）</li>
<li>存储任意信息</li>
<li>读取任意信息</li>
<li>搜索任意信息</li>
<li>删除任意信息</li>
<li>更新任意信息</li>
<li>等等功能</li>
</ul>
</li>
</ul>
<h2 id="二、前期准备"><a href="#二、前期准备" class="headerlink" title="二、前期准备"></a>二、前期准备</h2><h3 id="1-1-注册一个leadcloud"><a href="#1-1-注册一个leadcloud" class="headerlink" title="1.1 注册一个leadcloud"></a>1.1 注册一个leadcloud</h3><h3 id="1-2-选择节点"><a href="#1-2-选择节点" class="headerlink" title="1.2 选择节点"></a>1.2 选择节点</h3><p>  如果域名在国内备案了，选择华北或者华东节点，反之选国际版</p>
<p><img src="https://i.loli.net/2020/03/09/zOdSJq6pacNbsBR.png" alt="leadcloud01-min.png"></p>
<h3 id="1-3-创建一个应用"><a href="#1-3-创建一个应用" class="headerlink" title="1.3 创建一个应用"></a>1.3 创建一个应用</h3><p><img src="https://i.loli.net/2020/03/09/HT4u1AfzwyvIp9W.png" alt="leadcloud02-min.png"></p>
<h2 id="三、初始化LeadCloud"><a href="#三、初始化LeadCloud" class="headerlink" title="三、初始化LeadCloud"></a>三、初始化LeadCloud</h2><h3 id="3-1-创建一个CLass"><a href="#3-1-创建一个CLass" class="headerlink" title="3.1 创建一个CLass"></a>3.1 创建一个CLass</h3><p><img src="https://i.loli.net/2020/03/09/9Dj6MExuNWwBokH.png" alt="leadCloud03-min.png"></p>
<h3 id="3-2-绑定自定义域名"><a href="#3-2-绑定自定义域名" class="headerlink" title="3.2 绑定自定义域名"></a>3.2 绑定自定义域名</h3><p><img src="https://i.loli.net/2020/03/09/uCXmcg7vPp9ODYx.png" alt="uCXmcg7vPp9ODYx.png"></p>
<h3 id="3-3-引入leadcloud数据库"><a href="#3-3-引入leadcloud数据库" class="headerlink" title="3.3 引入leadcloud数据库"></a>3.3 引入leadcloud数据库</h3><p>具体操作<a href="https://tab.leancloud.cn/docs/start.html" target="_blank" rel="noopener">可以查看LeanCloud 文档</a></p>
<h4 id="3-3-1-cdn引入leadcloud"><a href="#3-3-1-cdn引入leadcloud" class="headerlink" title="3.3.1 cdn引入leadcloud"></a>3.3.1 cdn引入leadcloud</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 存储服务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.jsdelivr.net/npm/leancloud-storage@4.2.0/dist/av-min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>引入成功，可以在chrome的控制台打印出<code>AV</code>的全局变量</p>
</blockquote>
<h4 id="3-3-2-添加个人的leadCloud信息到js上"><a href="#3-3-2-添加个人的leadCloud信息到js上" class="headerlink" title="3.3.2 添加个人的leadCloud信息到js上"></a>3.3.2 添加个人的leadCloud信息到js上</h4><p><img src="https://i.loli.net/2020/03/09/dwLfy5OsXMI6Y2t.png" alt="leadCloud05-min.png"></p>
<h2 id="四、测试LeadCloud"><a href="#四、测试LeadCloud" class="headerlink" title="四、测试LeadCloud"></a>四、测试LeadCloud</h2><h3 id="4-1-ping-自己设置的自定义域名-有响应就成功"><a href="#4-1-ping-自己设置的自定义域名-有响应就成功" class="headerlink" title="4.1 ping 自己设置的自定义域名 有响应就成功"></a>4.1 ping 自己设置的自定义域名 有响应就成功</h3><p>具体可以看看leadCloud文档的<code>验证</code>部分</p>
<p><a href="https://tab.leancloud.cn/docs/start.html" target="_blank" rel="noopener">SDK 安装指南 - LeanCloud 文档</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="keyword">var</span> TestObject = AV.Object.extend(<span class="string">'TestObject'</span>);</span><br><span class="line"><span class="keyword">var</span> testObject = <span class="keyword">new</span> TestObject();</span><br><span class="line">testObject.set(<span class="string">'words'</span>, <span class="string">'Hello world!'</span>);</span><br><span class="line">testObject.save().then(<span class="function"><span class="keyword">function</span> (<span class="params">testObject</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'保存成功。'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="4-2-提高数据库安全性"><a href="#4-2-提高数据库安全性" class="headerlink" title="4.2 提高数据库安全性"></a>4.2 提高数据库安全性</h3><ol>
<li>在<code>设置</code>-&gt;<code>风险监测</code>中，把不要的Class能删除就删除，不能删除的就改为更高级别的权限。</li>
<li>在<code>设置</code>-&gt;<code>安全中心</code>-&gt;<code>服务开关</code>,把不需要的服务统统关闭。</li>
<li>在<code>设置</code>-&gt;<code>安全中心</code>-&gt;<code>Web安全域名域名</code>添加自己数据库自定义域名上去</li>
</ol>
<h2 id="五、添加留言表单"><a href="#五、添加留言表单" class="headerlink" title="五、添加留言表单"></a>五、添加留言表单</h2><h3 id="5-1-添加留言表单的HTMl"><a href="#5-1-添加留言表单的HTMl" class="headerlink" title="5.1 添加留言表单的HTMl"></a>5.1 添加留言表单的HTMl</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">id</span>=<span class="string">"postMessageForm"</span> <span class="attr">class</span>=<span class="string">"postMessageForm"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"name"</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"content"</span>&gt;</span>评论内容<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="5-2-添加留言表单的CSS"><a href="#5-2-添加留言表单的CSS" class="headerlink" title="5.2 添加留言表单的CSS"></a>5.2 添加留言表单的CSS</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.postMessageForm</span>&#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">7px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.7</span>); <span class="attribute">box-sizing</span>:border-box; <span class="attribute">border</span>:<span class="number">20px</span> solid white; <span class="attribute">background-color</span>:<span class="number">#fff</span>; &#125;</span><br><span class="line"><span class="selector-class">.postMessageForm</span> &gt; <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span>&#123; <span class="attribute">width</span>:<span class="number">300px</span>; <span class="attribute">height</span>:<span class="number">30px</span>; &#125;</span><br><span class="line"><span class="selector-class">.postMessageForm</span> &gt; <span class="selector-tag">input</span><span class="selector-attr">[name=name]</span>,</span><br><span class="line"><span class="selector-class">.postMessageForm</span> &gt; <span class="selector-tag">input</span><span class="selector-attr">[name=content]</span>&#123; <span class="attribute">margin-right</span>: <span class="number">30px</span>; &#125;</span><br><span class="line"><span class="selector-class">.postMessageForm</span> &gt; <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span><span class="selector-pseudo">:focus</span>&#123; <span class="attribute">outline</span>: none; &#125;</span><br><span class="line"><span class="selector-class">.postMessageForm</span> &gt; <span class="selector-tag">label</span>&#123; <span class="attribute">line-height</span>: <span class="number">30px</span>; <span class="attribute">font-size</span>:<span class="number">18px</span>; &#125;</span><br><span class="line"><span class="selector-class">.postMessageForm</span> &gt; <span class="selector-tag">input</span><span class="selector-attr">[type=submit]</span>&#123; <span class="attribute">background-color</span>:<span class="number">#e4696c</span>; <span class="attribute">opacity</span>: <span class="number">0.6</span>; <span class="attribute">color</span>:<span class="number">#efefef</span>; <span class="attribute">width</span>: <span class="number">100px</span>; <span class="attribute">text-align</span>: center; <span class="attribute">line-height</span>: <span class="number">32px</span>; &#125;</span><br><span class="line"><span class="selector-class">.postMessageForm</span> &gt; <span class="selector-tag">input</span><span class="selector-attr">[type=submit]</span><span class="selector-pseudo">:focus</span>&#123; <span class="attribute">outline</span>: none; &#125;</span><br><span class="line"><span class="selector-class">.postMessageForm</span> &gt; <span class="selector-tag">input</span><span class="selector-attr">[type=submit]</span><span class="selector-pseudo">:hover</span>&#123; <span class="attribute">opacity</span>: <span class="number">1</span>; <span class="attribute">transition</span>: all <span class="number">0.4s</span>; <span class="attribute">cursor</span>: pointer; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-3-添加留言表单的JS"><a href="#5-3-添加留言表单的JS" class="headerlink" title="5.3 添加留言表单的JS"></a>5.3 添加留言表单的JS</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myForm = <span class="built_in">document</span>.querySelector(<span class="string">'#postMessageForm'</span>)</span><br><span class="line">myForm.addEventListener(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.preventDefault()<span class="comment">//阻止默认事件，否则会有默认跳转</span></span><br><span class="line">    <span class="keyword">let</span> content = myForm.querySelector(<span class="string">'input[name=content]'</span>).value</span><br><span class="line">    <span class="keyword">let</span> name = myForm.querySelector(<span class="string">'input[name=name]'</span>).value</span><br><span class="line">    <span class="keyword">var</span> Message = AV.Object.extend(<span class="string">'Message'</span>);</span><br><span class="line">    <span class="keyword">var</span> message = <span class="keyword">new</span> Message();</span><br><span class="line">    message.set(&#123;</span><br><span class="line">        <span class="string">'content'</span>: content,</span><br><span class="line">        <span class="string">'name'</span>: name,</span><br><span class="line">    &#125;)</span><br><span class="line">    message.save().then(<span class="function"><span class="keyword">function</span> (<span class="params">Object</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>)</span><br><span class="line">        li.innerText = <span class="string">`<span class="subst">$&#123;object.attributes.name&#125;</span>: <span class="subst">$&#123;object.attributes.content&#125;</span>`</span></span><br><span class="line">        <span class="keyword">let</span> messageList = <span class="built_in">document</span>.querySelector(<span class="string">'#messageList'</span>)</span><br><span class="line">        messageList.appendChild(li)</span><br><span class="line">        location.reload(<span class="literal">true</span>);<span class="comment">//刷新页面</span></span><br><span class="line">    &#125;)</span><br><span class="line">    alert(<span class="string">'留言成功啦'</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="六、添加留言板代码"><a href="#六、添加留言板代码" class="headerlink" title="六、添加留言板代码"></a>六、添加留言板代码</h2><h3 id="6-1-添加留言板html"><a href="#6-1-添加留言板html" class="headerlink" title="6.1 添加留言板html"></a>6.1 添加留言板html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">id</span>=<span class="string">"messageList"</span> <span class="attr">class</span>=<span class="string">"messageList"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6-2-添加留言板css"><a href="#6-2-添加留言板css" class="headerlink" title="6.2 添加留言板css"></a>6.2 添加留言板css</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.messageList</span> &gt; <span class="selector-tag">li</span>&#123; <span class="attribute">font-size</span>: <span class="number">18px</span>; <span class="attribute">line-height</span>: <span class="number">40px</span>; <span class="attribute">background-color</span>:<span class="number">#eee</span>; <span class="attribute">padding</span>:<span class="number">0px</span> <span class="number">20px</span>; &#125;</span><br><span class="line"><span class="selector-class">.messageList</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span>&#123; <span class="attribute">border-top-left-radius</span>: <span class="number">10px</span>; <span class="attribute">border-top-right-radius</span>: <span class="number">10px</span>; &#125;</span><br><span class="line"><span class="selector-class">.messageList</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span>&#123; <span class="attribute">border-bottom-left-radius</span>: <span class="number">10px</span>; <span class="attribute">border-bottom-right-radius</span>: <span class="number">10px</span>; &#125;</span><br><span class="line"><span class="selector-class">.messageList</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(2n+1)</span>&#123; <span class="attribute">background-color</span>:<span class="number">#fff</span>; &#125; </span><br><span class="line"><span class="selector-class">.messageList</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span>&#123; <span class="attribute">background-color</span>:<span class="number">#e4696c</span>; <span class="attribute">color</span>:<span class="number">#fff</span>; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-3-添加留言板JS"><a href="#6-3-添加留言板JS" class="headerlink" title="6.3 添加留言板JS"></a>6.3 添加留言板JS</h3><p>打开项目就会读取leadCloud上的留言数据，然后存放在ol的li中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> query = <span class="keyword">new</span> AV.Query(<span class="string">'Message'</span>);</span><br><span class="line">query.find()</span><br><span class="line">    .then(</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">messages</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> array = messages.map(<span class="function">(<span class="params">item</span>) =&gt;</span> item.attributes)</span><br><span class="line">            array.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>)</span><br><span class="line">                li.innerText = <span class="string">`<span class="subst">$&#123;item.name&#125;</span>:<span class="subst">$&#123;item.content&#125;</span>`</span></span><br><span class="line">                <span class="keyword">let</span> messageList = <span class="built_in">document</span>.querySelector(<span class="string">'#messageList'</span>)</span><br><span class="line">                messageList.appendChild(li)</span><br><span class="line">                myForm.querySelector(<span class="string">'input[name=content]'</span>).value = <span class="string">''</span></span><br><span class="line">                myForm.querySelector(<span class="string">'input[name=name]'</span>).value = <span class="string">''</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; </span><br><span class="line">    );</span><br></pre></td></tr></table></figure>


<h2 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h2><h3 id="7-1效果如下"><a href="#7-1效果如下" class="headerlink" title="7.1效果如下"></a>7.1效果如下</h3><p><img src="https://i.loli.net/2020/03/09/rFOQxntULyaC6Yc.png" alt="leancloud06.png"></p>
<h3 id="7-2-问：为什么要监听form，而不是button？"><a href="#7-2-问：为什么要监听form，而不是button？" class="headerlink" title="7.2 问：为什么要监听form，而不是button？"></a>7.2 问：为什么要监听form，而不是button？</h3><p>假设用户在文本框输入了文字，但不点提交按钮，直接点回车，怎么办？用户回车要不要提交表单？ 要</p>
<p>所以要监听提按钮也要监听回车</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下面是错误示范</span></span><br><span class="line"><span class="keyword">let</span> button = myForm.querySelector(<span class="string">'input[type=submit]'</span>)</span><br><span class="line">button.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br><span class="line"><span class="keyword">let</span> input = myForm.querySelector(<span class="string">'input[name=content]'</span>)</span><br><span class="line">input.addEventListener(<span class="string">'keypress'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(e.keyCode === <span class="number">13</span>)&#123;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//但是上面代码也可以等于下面,比较简单</span></span><br><span class="line">myForm.addEventListener(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>sumblit 包含提交，在任意的input打回车</strong></p>
]]></content>
      <tags>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>【JavaScript】面向对象编程-全局命名空间&amp;&amp;new是什么</title>
    <url>/uncategorized/%E3%80%90JavaScript%E3%80%91%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B-%E5%85%A8%E5%B1%80%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4&amp;&amp;new%E6%98%AF%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<h1 id="【JavaScript】面向对象编程-全局命名空间-amp-amp-new是什么"><a href="#【JavaScript】面向对象编程-全局命名空间-amp-amp-new是什么" class="headerlink" title="【JavaScript】面向对象编程-全局命名空间&amp;&amp;new是什么"></a>【JavaScript】面向对象编程-全局命名空间&amp;&amp;new是什么</h1><h2 id="一、-什么是面向对象？"><a href="#一、-什么是面向对象？" class="headerlink" title="一、 什么是面向对象？"></a>一、 什么是面向对象？</h2><p>在编程里面，面向的意思以什么什么为主。<br>面向对象编程的意思，代码中主要是对象。<br>面向对象不是一个概念，而是一个经验知识。</p>
<h3 id="1-1-知乎大佬对面向对象概念的解释"><a href="#1-1-知乎大佬对面向对象概念的解释" class="headerlink" title="1.1 知乎大佬对面向对象概念的解释"></a>1.1 知乎大佬对面向对象概念的解释</h3><ul>
<li>把一组数据结构和处理他们的方法组成<code>对象（Object）</code>，</li>
<li>把相同行为的对象归纳为<code>类（class）</code>,</li>
<li>通过类的<code>封装（encapsulation）</code>隐藏内部细节，</li>
<li>通过<code>继承（inheritance）</code>实现类的<code>特化（specialization）/泛化（generalization）</code></li>
<li>通过<code>多态（polymorphism）</code>实现基于对象类型的<code>动态分派（dynamic dispath）</code></li>
</ul>
<h3 id="1-2-面向对象的中英与简称"><a href="#1-2-面向对象的中英与简称" class="headerlink" title="1.2 面向对象的中英与简称"></a>1.2 面向对象的中英与简称</h3><p>introduction_to_Object-Oriented<br>面向对象编程  Object Oriented Programming<br>面向对象设计  object-oriented design<br>面向对象编程 OO编程</p>
<h3 id="1-3-MDN文档对面向对象的解释"><a href="#1-3-MDN文档对面向对象的解释" class="headerlink" title="1.3 MDN文档对面向对象的解释"></a>1.3 MDN文档对面向对象的解释</h3><blockquote>
<p>面向对象编程是用抽象方式创建基于现实世界模型的一种编程模式。它使用先前建立的范例，包括模块化，多态和封装几种技术。今天，许多流行的编程语言（如Java，JavaScript，C＃，C+ +，Python，PHP，Ruby和Objective-C）都支持面向对象编程（OOP）。</p>
<p>相对于「一个程序只是一些函数的集合，或简单的计算机指令列表。」的传统软件设计观念而言，面向对象编程可以看作是使用一系列对象相互协作的软件设计。 <strong>在 OOP 中，每个对象能够接收消息，处理数据和发送消息给其他对象</strong>。每个对象都可以被看作是一个拥有清晰角色或责任的独立小机器。</p>
</blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript" target="_blank" rel="noopener">JavaScript面向对象简介 - JavaScript | MDN</a></p>
<h3 id="1-4-术语"><a href="#1-4-术语" class="headerlink" title="1.4 术语"></a>1.4 术语</h3><h4 id="Namespace-命名空间"><a href="#Namespace-命名空间" class="headerlink" title="Namespace 命名空间"></a>Namespace 命名空间</h4><p>  比如<code>window.jQuery = 函数或者对象</code>；<code>window.jquery.ajax=</code>他们都有一个共同的前缀jQuery，jQuery就是一个命名空间。</p>
<h4 id="Class-类"><a href="#Class-类" class="headerlink" title="Class 类"></a>Class 类</h4><h4 id="Object-对象"><a href="#Object-对象" class="headerlink" title="Object 对象"></a>Object 对象</h4><h4 id="Property-属性"><a href="#Property-属性" class="headerlink" title="Property 属性"></a>Property 属性</h4><p> 属性就是对象里面的key：value的每个key就是属性</p>
<h4 id="Method-方法"><a href="#Method-方法" class="headerlink" title="Method 方法"></a>Method 方法</h4><p>如果一个对象属性是一个函数function()，那么这个function就是method方法。</p>
<h4 id="Constructor-构造函数"><a href="#Constructor-构造函数" class="headerlink" title="Constructor 构造函数"></a>Constructor 构造函数</h4><p>比如：Object()是一个构造函数 Number()是一个构造函数 String()是一个构造函数</p>
<h4 id="inheritance-继承"><a href="#inheritance-继承" class="headerlink" title="inheritance 继承"></a>inheritance 继承</h4><h4 id="Encapsulation-封装"><a href="#Encapsulation-封装" class="headerlink" title="Encapsulation 封装"></a>Encapsulation 封装</h4><h4 id="Abstraction-抽象"><a href="#Abstraction-抽象" class="headerlink" title="Abstraction 抽象"></a>Abstraction 抽象</h4><h4 id="Polymorphism-多态"><a href="#Polymorphism-多态" class="headerlink" title="Polymorphism 多态"></a>Polymorphism 多态</h4><h3 id="1-5-面向对象的核心"><a href="#1-5-面向对象的核心" class="headerlink" title="1.5 面向对象的核心"></a>1.5 面向对象的核心</h3><p>继承、封装、抽象、多态</p>
<h2 id="二、javascript-小技巧"><a href="#二、javascript-小技巧" class="headerlink" title="二、javascript 小技巧"></a>二、javascript 小技巧</h2><h3 id="2-1-一个运算符例子"><a href="#2-1-一个运算符例子" class="headerlink" title="2.1 一个运算符例子"></a>2.1 一个运算符例子</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> || <span class="number">2</span> <span class="comment">//这表达式的值是什么？</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//答案：1</span></span><br></pre></td></tr></table></figure>

<p>JavaScript 或操作符 且操作符<br><code>a||b</code>，<code>c||d</code>的值基本上不可能是true或false。</p>
<p>这是因为五个false值<code>（null、undefined、0、&#39;&#39;、NaN）</code>,而上面的或与且操作符一般不是falsy或者truy值，所以值是从自身a、b；c、d上选一个值</p>
<h3 id="2-2-与运算（-amp-amp-）"><a href="#2-2-与运算（-amp-amp-）" class="headerlink" title="2.2 与运算（&amp;&amp;）"></a>2.2 与运算<code>（&amp;&amp;）</code></h3><p>与是找false值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> &amp;&amp; <span class="number">0</span> <span class="comment">//0</span></span><br><span class="line"><span class="number">1</span> &amp;&amp; <span class="number">0</span> &amp;&amp; <span class="number">2</span> <span class="comment">//0</span></span><br><span class="line"><span class="number">1</span> &amp;&amp; <span class="number">0</span> &amp;&amp; <span class="number">2</span> &amp;&amp; <span class="number">3</span>  &amp;&amp; <span class="number">4</span> &amp;&amp; <span class="number">5</span>  <span class="comment">//0</span></span><br><span class="line"><span class="comment">//规律：浏览器会把一个false的值返回出来，后面的运算不看</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> &amp;&amp; <span class="number">0</span> &amp;&amp; <span class="built_in">console</span>.log(<span class="number">3</span>) <span class="comment">//console.log(3)会执行吗？</span></span><br><span class="line"><span class="comment">//答案：不会，直接返回0 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>)<span class="comment">//值是什么？ //undefined</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>&amp;&amp;<span class="number">2</span>&amp;&amp;<span class="number">33</span> <span class="comment">// 3</span></span><br><span class="line"><span class="comment">//规律2：如果与运算中，没有false值，这返回最后一个值。</span></span><br></pre></td></tr></table></figure>


<h3 id="2-3-或运算"><a href="#2-3-或运算" class="headerlink" title="2.3  或运算||"></a>2.3  或运算<code>||</code></h3><p>或是找真值,只要一个是真就是真，说整个式子是真，则返回第一个真值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> || undefeined || <span class="literal">null</span> || <span class="number">1</span>  <span class="comment">// 1 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = b || &#123;&#125; </span><br><span class="line"><span class="comment">//如果b不是一个false值，是一个真值，那么a = b；</span></span><br><span class="line"><span class="comment">//如果b是一个真值，那么a等于空对象&#123;&#125;</span></span><br><span class="line"><span class="comment">//等于下面形式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(b)&#123;</span><br><span class="line">  a = b</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">  a = &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<p>三、 <code>var MYAPP = MYAPP || {};</code>是什么意思</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局命名空间</span></span><br><span class="line"><span class="keyword">var</span> MYAPP = MYAPP || &#123;&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>因为它要确保程序员不乱写代码</p>
</blockquote>
<h3 id="3-1-理解全局命名空间"><a href="#3-1-理解全局命名空间" class="headerlink" title="3.1 理解全局命名空间"></a>3.1 理解全局命名空间</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = &#123;&#125; </span><br><span class="line"><span class="comment">//这是一个危险代码，因为你不知道app之前等于是什么，就采取覆盖app</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//应该用if来写,a是我的一个初始化对象。</span></span><br><span class="line"><span class="keyword">if</span>(app)&#123;</span><br><span class="line">  app = app <span class="comment">//废话 没有什么作用</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  a= <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//所以上面形式就可以简化成</span></span><br><span class="line"><span class="keyword">var</span> app = app || &#123;&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-2-全局命名空间的作用"><a href="#3-2-全局命名空间的作用" class="headerlink" title="3.2 全局命名空间的作用"></a>3.2 全局命名空间的作用</h3><p>全局命名空间的作用：以后所以的变量都挂着MYAPP上面,MYAPP包含所以的命名，MYAPP就像一个房间装着所以的属性，所以叫命名空间。</p>
<p>例如<br><code>MYAPP.event ={}</code><br><code>MYAPP.commonMethod={}</code> </p>
<h2 id="四、new是什么？"><a href="#四、new是什么？" class="headerlink" title="四、new是什么？"></a>四、new是什么？</h2><h3 id="4-1-一个例子"><a href="#4-1-一个例子" class="headerlink" title="4.1 一个例子"></a>4.1 一个例子</h3><h4 id="4-1-1-士兵属性与怎么使用士兵"><a href="#4-1-1-士兵属性与怎么使用士兵" class="headerlink" title="4.1.1 士兵属性与怎么使用士兵"></a>4.1.1 士兵属性与怎么使用士兵</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">var</span> 士兵 = &#123;</span><br><span class="line">  ID :<span class="number">1</span>,</span><br><span class="line">  兵种 :<span class="string">"美国大兵"</span></span><br><span class="line">  攻击力 : <span class="number">6</span></span><br><span class="line">  生命值: <span class="number">45</span>,</span><br><span class="line">  行走 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  奔跑 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  死亡 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  防御 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="comment">//怎么使用这个士兵？</span></span><br><span class="line">  兵营.制造（士兵）</span><br></pre></td></tr></table></figure>

<h4 id="4-1-2-多个士兵代码"><a href="#4-1-2-多个士兵代码" class="headerlink" title="4.1.2 多个士兵代码"></a>4.1.2 多个士兵代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果要有100个士兵，是不是重新写100？</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> 士兵<span class="number">2</span> = &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> 士兵<span class="number">3</span> = &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> 士兵<span class="number">4</span> = &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">兵营.制造（士兵<span class="number">2</span>）</span><br><span class="line">兵营.制造（士兵<span class="number">3</span>）</span><br><span class="line">兵营.制造（士兵<span class="number">4</span>）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//为此我们可以用一个循环代码来写</span></span><br><span class="line"><span class="keyword">var</span> 士兵们 = []</span><br><span class="line"><span class="keyword">var</span> 士兵 = &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">  ID :<span class="number">1</span>,</span><br><span class="line">  兵种 :<span class="string">"美国大兵"</span></span><br><span class="line">  攻击力 : <span class="number">6</span></span><br><span class="line">  生命值: <span class="number">45</span>,</span><br><span class="line">  行走 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  奔跑 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  死亡 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  防御 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  士兵们.push(士兵)</span><br><span class="line">&#125;</span><br><span class="line">兵营.批量制造(士兵们)</span><br></pre></td></tr></table></figure>


<h4 id="4-1-3-优化公共代码"><a href="#4-1-3-优化公共代码" class="headerlink" title="4.1.3 优化公共代码"></a>4.1.3 优化公共代码</h4><p> 上面循环代码在内存图里面大量重复代码，我们可以声明一个对象包含它们共同的函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 士兵共有属性 = &#123;</span><br><span class="line">  兵种 :<span class="string">"美国大兵"</span></span><br><span class="line">  攻击力 : <span class="number">6</span></span><br><span class="line">  行走 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  奔跑 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  死亡 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  防御 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> 士兵们 = []</span><br><span class="line">  <span class="keyword">var</span> 士兵 = &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">    士兵 = &#123;</span><br><span class="line">      ID：i，<span class="comment">//ID不能重复</span></span><br><span class="line">      生命值：<span class="number">42</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/* 工作不要这样写，因为__proto__不是标准属性*/</span></span><br><span class="line">士兵.__proto__ =  士兵共有属性</span><br><span class="line"></span><br><span class="line">  士兵们.push(士兵)</span><br><span class="line">&#125;</span><br><span class="line">兵营.批量制造(士兵们)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//上面代码还可以优化</span></span><br><span class="line"><span class="keyword">var</span> 士兵共有属性 = &#123;</span><br><span class="line">  兵种 :<span class="string">"美国大兵"</span></span><br><span class="line">  攻击力 : <span class="number">6</span></span><br><span class="line">  行走 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  奔跑 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  死亡 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  防御 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">create</span>士兵(<span class="params">id</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> 士兵 = &#123;</span><br><span class="line">      ID : id:<span class="comment">//ID不能重复</span></span><br><span class="line">      生命值：<span class="number">41</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 工作不要这样写，因为__proto__不是标准属性*/</span></span><br><span class="line">士兵.__proto__ =  士兵共有属性</span><br><span class="line"><span class="keyword">return</span>   士兵</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用如下</span></span><br><span class="line"><span class="keyword">var</span> 士兵们 = []</span><br><span class="line"><span class="keyword">var</span> 士兵</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">  士兵们.push(create士兵(i))</span><br><span class="line">&#125;</span><br><span class="line">兵营.批量制造(士兵们)</span><br><span class="line"></span><br><span class="line"><span class="comment">//这叫模块化</span></span><br></pre></td></tr></table></figure>

<h4 id="4-1-4-解决优化代码的命名问题"><a href="#4-1-4-解决优化代码的命名问题" class="headerlink" title="4.1.4 解决优化代码的命名问题"></a>4.1.4 解决优化代码的命名问题</h4><p>上面代码命名不好<br>没有人知道“士兵共有属性”与“create士兵”有关联<br>如果离开了“士兵共有属性”这个对象，“create士兵”这个函数就失效了,<br>说明这个“create士兵”函数和士兵共有属性”这个对象是有关系的</p>
<p>那怎么处理？<br>把它们放在一起，直接把“士兵共有属性”这个对象作为这个函数“create士兵”的一个属性</p>
<p>但是，没有办法将这个函数“create士兵”作为这个对象“士兵共有属性”的一个属性，这是因为“create士兵”不是共有属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//var temp = &#123;&#125;</span></span><br><span class="line">  <span class="comment">//this = temp</span></span><br><span class="line">  <span class="comment">//this.__proto__ = create士兵.prototype</span></span><br><span class="line">  <span class="keyword">this</span>.ID = id, </span><br><span class="line">  <span class="keyword">this</span>.生命值 = <span class="number">42</span> <span class="comment">//自有属性</span></span><br><span class="line">  <span class="comment">//return this</span></span><br><span class="line">&#125;</span><br><span class="line">create 士兵.士兵共有属性 = &#123;</span><br><span class="line">  兵种:<span class="string">"美国大兵"</span></span><br><span class="line">  攻击力：<span class="number">5</span></span><br><span class="line">  行走 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  奔跑 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  死亡 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  防御 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> 士兵们 = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++)&#123;</span><br><span class="line">  士兵们.push(<span class="keyword">new</span> create士兵(i))</span><br><span class="line">&#125;</span><br><span class="line">兵营.批量制造(士兵们)</span><br></pre></td></tr></table></figure>



<h4 id="4-1-5-最终优化"><a href="#4-1-5-最终优化" class="headerlink" title="4.1.5 最终优化"></a>4.1.5 最终优化</h4><p>由于new后面的函数是用来创造对象的，所以没有必要在函数前面再写create </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 士兵(<span class="params">id</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//var temp = &#123;&#125;</span></span><br><span class="line">  <span class="comment">//this = temp</span></span><br><span class="line">  <span class="comment">//士兵.prototype =&#123;constructor:士兵&#125;</span></span><br><span class="line">  <span class="comment">//this.__proto__ = create士兵.prototype //3</span></span><br><span class="line">  <span class="keyword">this</span>.ID = id, </span><br><span class="line">  <span class="keyword">this</span>.生命值 = <span class="number">42</span> <span class="comment">//自有属性</span></span><br><span class="line">  <span class="comment">//return this</span></span><br><span class="line">&#125;</span><br><span class="line">士兵.prototype.兵种 = <span class="string">"美国大兵"</span></span><br><span class="line">士兵.prototype.攻击力 = <span class="number">5</span></span><br><span class="line">士兵.prototype = &#123;</span><br><span class="line">  <span class="comment">//共有属性</span></span><br><span class="line">  <span class="keyword">constructor</span>:士兵，</span><br><span class="line">  兵种:"美国大兵"</span><br><span class="line">  攻击力：5</span><br><span class="line">  行走 : function()&#123;&#125;</span><br><span class="line">  奔跑 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  死亡 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  防御 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-总结"><a href="#4-2-总结" class="headerlink" title="4.2 总结"></a>4.2 总结</h3><p>  对象要么是属性，要么是有函数</p>
<p>  new 是给你一个去写一个函数，这个函数可以指定两个东西，一个是自由属性，一个是共有属性。</p>
<h3 id="4-3-new的过程"><a href="#4-3-new的过程" class="headerlink" title="4.3 new的过程"></a>4.3 new的过程</h3><p>new的过程就是帮程序员操作了4个步骤</p>
<ol>
<li>创建一个临时对象</li>
<li>这个临时对象指向this或者这个this指向这个临时对象</li>
<li>这个this的prototype指向这个函数的prototype</li>
<li>return this</li>
</ol>
<p>一个new等于4句话</p>
<h3 id="4-4-关于new的约定"><a href="#4-4-关于new的约定" class="headerlink" title="4.4 关于new的约定"></a>4.4 关于new的约定</h3><p>由于new后面的函数是用来创造对象的，所以没有必要在函数前面再写create。</p>
<h3 id="4-5-思考"><a href="#4-5-思考" class="headerlink" title="4.5 思考"></a>4.5 思考</h3><h4 id="4-5-1当写var-object-new-Object-的时候，到底做了什么？"><a href="#4-5-1当写var-object-new-Object-的时候，到底做了什么？" class="headerlink" title="4.5.1当写var object = new Object()的时候，到底做了什么？"></a>4.5.1当写<code>var object = new Object()</code>的时候，到底做了什么？</h4><p>答: 就是new会给object加上一些自有属性，然后让object.<strong>proto</strong>(object原型)指向Object.prototype</p>
<blockquote>
<p><code>object.__proto___ === Object.prototype</code></p>
</blockquote>
<p>比如我们生成一个var array = new Array(a,b,c),这行代码操作了什么？</p>
<ul>
<li>自有属性0:’a’，1:’b’， 2:’c’;</li>
<li>length:2;</li>
<li>array.<strong>proto</strong> === Array.prototype(指向它构造函数的prototype)，而Array里面又有push、pop等等方法。</li>
<li>Array.prototype.<strong>proto</strong> ==== Object.prototype</li>
</ul>
<p>var fn = new Funciton(‘x’,’y’,’return x+y’)</p>
<ul>
<li>自有属性 length:2</li>
<li>不可见的函数体：’return x+y’</li>
<li>fn.<strong>proto</strong> === Function.prototype</li>
</ul>
<p>Array是一个函数,所以Array.<strong>proto</strong> === Function.prototype。</p>
<h2 id="六、扩展知识"><a href="#六、扩展知识" class="headerlink" title="六、扩展知识"></a>六、扩展知识</h2><p>【JS 的 new 到底是干什么的？】<a href="https://zhuanlan.zhihu.com/p/23987456" target="_blank" rel="noopener">JS 的 new 到底是干什么的？ - 知乎</a></p>
<p>【原型与原型链】<a href="https://www.jianshu.com/p/78e44955e29e" target="_blank" rel="noopener">原型与原型链 - 简书</a></p>
]]></content>
  </entry>
  <entry>
    <title>【项目】一个会动的简历-总结</title>
    <url>/uncategorized/%E3%80%90%E9%A1%B9%E7%9B%AE%E3%80%91%E4%B8%80%E4%B8%AA%E4%BC%9A%E5%8A%A8%E7%9A%84%E7%AE%80%E5%8E%86-%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="【项目】一个会动的简历-总结"><a href="#【项目】一个会动的简历-总结" class="headerlink" title="【项目】一个会动的简历-总结"></a>【项目】一个会动的简历-总结</h1><h2 id="一、预览"><a href="#一、预览" class="headerlink" title="一、预览"></a>一、预览</h2><p><a href="https://qiuzp.com/animation-resume/" target="_blank" rel="noopener">预览地址</a><br><a href="https://github.com/qiuzp94/animation-resume" target="_blank" rel="noopener">源码地址</a></p>
<h2 id="二、原理"><a href="#二、原理" class="headerlink" title="二、原理"></a>二、原理</h2><h3 id="2-1-参考网址"><a href="#2-1-参考网址" class="headerlink" title="2.1 参考网址"></a>2.1 参考网址</h3><p><a href="https://www.strml.net/" target="_blank" rel="noopener">strml.net</a><br><a href="https://fangyinghang.com/animating-resume/" target="_blank" rel="noopener">animating-resume</a></p>
<h3 id="2-2-具体原理"><a href="#2-2-具体原理" class="headerlink" title="2.2 具体原理"></a>2.2 具体原理</h3><p>字在页面依次出现</p>
<h3 id="2-3-依次显示原理例子"><a href="#2-3-依次显示原理例子" class="headerlink" title="2.3 依次显示原理例子"></a>2.3 依次显示原理例子</h3><p><a href="https://jsbin.com/dekuroyehi/edit?html,js,output" target="_blank" rel="noopener">在线预览地址</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS Bin<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> result = <span class="string">'1234567890'</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> n = <span class="number">0</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> id = setInterval(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span></span><br><span class="line">  n += 1</span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.body.innerHTML = result.substring(<span class="number">0</span>,n)</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(n+<span class="string">'轮'</span>)</span></span><br><span class="line">  if(n &gt;= result.length)&#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.clearInterval(id)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,600)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/substring" target="_blank" rel="noopener">String.prototype.substring()</a></p>
<h3 id="2-4-CSS展示-依次显示原理例子"><a href="#2-4-CSS展示-依次显示原理例子" class="headerlink" title="2.4 CSS展示+依次显示原理例子"></a>2.4 CSS展示+依次显示原理例子</h3><p>因为在HTML里面,回车、Tab连续出现多个，浏览器会自动认为一个回车、Tab<br>所以要用<code>&lt;pre&gt;</code>标签包裹内容</p>
<p>【原理】: 将css样式代码，一边展示在页面中，一边同步将代码放入style标签里面，这样就可以得出效果。</p>
<p><a href="https://jsbin.com/yatinivufu/edit?html,js,output" target="_blank" rel="noopener">在线预览地址</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS Bin<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">id</span>=<span class="string">"styleTag"</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pre</span> <span class="attr">id</span>=<span class="string">"code"</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> result = `</span></span><br><span class="line">*&#123;</span><br><span class="line">  transition:all 1s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body&#123;</span><br><span class="line">background:#61D7A4;</span><br><span class="line">color:#fff;</span><br><span class="line">&#125;</span><br><span class="line">`</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> n = <span class="number">0</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> id = setInterval(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span></span><br><span class="line">n += 1</span><br><span class="line">code.innerHTML = result.substring(0,n)</span><br><span class="line">styleTag.innerHTML = result.substring(0,n)</span><br><span class="line">if(n &gt;= result.length)&#123;</span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.clearInterval(id)</span></span><br><span class="line">&#125; </span><br><span class="line">&#125;,10 )</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="三、技术栈"><a href="#三、技术栈" class="headerlink" title="三、技术栈"></a>三、技术栈</h2><ul>
<li>原生JS</li>
<li>JS定时器</li>
<li>prmisjs</li>
<li>箭头函数</li>
<li>异步与回调</li>
</ul>
<h2 id="四、代码高亮"><a href="#四、代码高亮" class="headerlink" title="四、代码高亮"></a>四、代码高亮</h2><h3 id="4-1-第一次尝试"><a href="#4-1-第一次尝试" class="headerlink" title="4.1 第一次尝试"></a>4.1 第一次尝试</h3><p>添加下面代码</p>
<p><code>code.innerHTML = code.innerHTMl.replace(&#39;html&#39;,&#39;&lt;span style=&quot;color:red;&quot;&gt;body&lt;/span&gt;&#39;)</code></p>
<p>如果用这种方法，处理多个标签要使用正则匹配，这里我们可以采用开源库<br><code>Prism.js</code></p>
<h3 id="4-2-关于Prism-js"><a href="#4-2-关于Prism-js" class="headerlink" title="4.2 关于Prism.js"></a>4.2 关于Prism.js</h3><p>Prism 是一款轻量、可扩展的代码语法高亮库，使用现代化的 Web 标准构建。</p>
<p>它能把一个字符串的其中的关键字加上高亮</p>
<p><a href="https://prismjs.com/" target="_blank" rel="noopener">Prism.js官网地址</a></p>
<h4 id="如何使用Prism-js"><a href="#如何使用Prism-js" class="headerlink" title="如何使用Prism.js"></a>如何使用Prism.js</h4><p>详情请看<a href="https://prismjs.com/#basic-usage" target="_blank" rel="noopener">官网介绍</a></p>
<h5 id="下载css与js文件后引入"><a href="#下载css与js文件后引入" class="headerlink" title="下载css与js文件后引入"></a>下载css与js文件后引入</h5><p><a href="https://prismjs.com/download.html#themes=prism&languages=markup+css+clike+javascript" target="_blank" rel="noopener">链接地址</a></p>
<h5 id="使用Prism-js"><a href="#使用Prism-js" class="headerlink" title="使用Prism.js"></a>使用Prism.js</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">code.innerHTML = Prism.highlight(code.innerHTML, Prism.languages.css, <span class="string">'css'</span>);</span><br><span class="line"><span class="string">``</span><span class="string">`   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 五、故意代码高亮</span></span><br><span class="line"><span class="string">### 第一步 </span></span><br><span class="line"><span class="string">添加默认样式default.css,先覆盖prism高亮的样式</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> CSS</span><br><span class="line"><span class="comment">//default.css</span></span><br><span class="line"></span><br><span class="line">.token.selector&#123;</span><br><span class="line">    color:black;</span><br><span class="line">&#125;</span><br><span class="line">.token.property&#123;</span><br><span class="line">    color:black;</span><br><span class="line">&#125;</span><br><span class="line">.token.punctuation&#123;</span><br><span class="line">    color:black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意default.css要在prism.css后面</p>
<h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>在result添加会prism高亮的样式,js执行到相关代码就会高亮</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="string">`</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">/* 我需要一点代码高亮 */</span></span><br><span class="line"><span class="string">.token.selector&#123;</span></span><br><span class="line"><span class="string">  color:#690;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">.token.property&#123;</span></span><br><span class="line"><span class="string">  color:#905;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">.token.punctuation&#123;</span></span><br><span class="line"><span class="string">  color:#999;</span></span><br><span class="line"><span class="string">&#125; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure>


<h2 id="六、加动画效果"><a href="#六、加动画效果" class="headerlink" title="六、加动画效果"></a>六、加动画效果</h2><h2 id="七、添加简历内容"><a href="#七、添加简历内容" class="headerlink" title="七、添加简历内容"></a>七、添加简历内容</h2><h3 id="第一步-新建-result2变量-来存储数据"><a href="#第一步-新建-result2变量-来存储数据" class="headerlink" title="第一步 新建 result2变量 来存储数据"></a>第一步 新建 result2变量 来存储数据</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">var</span> result2 = <span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure>


<h3 id="第二步-在第一个定时器上添加fn2与fn3函数"><a href="#第二步-在第一个定时器上添加fn2与fn3函数" class="headerlink" title="第二步 在第一个定时器上添加fn2与fn3函数"></a>第二步 在第一个定时器上添加fn2与fn3函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> id = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">window</span>.clearInterval(id)</span><br><span class="line">    fn2()</span><br><span class="line">    fn3(result)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<h3 id="第三步-在DOM树上添加pre标签即构造createPaper函数内容"><a href="#第三步-在DOM树上添加pre标签即构造createPaper函数内容" class="headerlink" title="第三步 在DOM树上添加pre标签即构造createPaper函数内容"></a>第三步 在DOM树上添加pre标签即构造createPaper函数内容</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> paper = <span class="built_in">document</span>.createElement(<span class="string">'pre'</span>)</span><br><span class="line">  paper.id = <span class="string">'paper'</span></span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(paper)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第四步-构造关于白纸内容的f3函数"><a href="#第四步-构造关于白纸内容的f3函数" class="headerlink" title="第四步 构造关于白纸内容的f3函数"></a>第四步 构造关于白纸内容的f3函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params">preResult</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="string">`</span></span><br><span class="line"><span class="string">#paper&#123;</span></span><br><span class="line"><span class="string">    width:100px; height:100px;</span></span><br><span class="line"><span class="string">    background:white;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">var</span> n = <span class="number">0</span></span><br><span class="line">  <span class="keyword">var</span> id = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">    code.innerHTML = preResult + result.substring(<span class="number">0</span>,<span class="number">1</span>) </span><br><span class="line">    code.innerHTML =</span><br><span class="line">    Prism.highlight(code.innerHTML, Prism.languages.css, <span class="string">'css'</span>);</span><br><span class="line">    styleTag.innerHTML = preResult + result.substring(<span class="number">0</span>, n)</span><br><span class="line">    <span class="keyword">if</span> (n &gt;= result.length) &#123;</span><br><span class="line">      <span class="built_in">window</span>.clearInterval(id)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="八、封装函数"><a href="#八、封装函数" class="headerlink" title="八、封装函数"></a>八、封装函数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeCode</span>(<span class="params">code</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> domCode = <span class="built_in">document</span>.querySelector(<span class="string">'#code'</span>)</span><br><span class="line">  <span class="keyword">let</span> n = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> id = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">    domCode.innerHTML = </span><br><span class="line">      Prism.highlight(code.substring(<span class="number">0</span>,n), Prism.languages.css, <span class="string">'css'</span>);</span><br><span class="line">    styleTag.innerHTML = code.substring(<span class="number">0</span>, n)</span><br><span class="line">    <span class="keyword">if</span> (n &gt;= result.length) &#123;</span><br><span class="line">      <span class="built_in">window</span>.clearInterval(id)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">10</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="九、异步与回调"><a href="#九、异步与回调" class="headerlink" title="九、异步与回调"></a>九、异步与回调</h2><p>因为writeCode(result）只负责定闹钟<br>createPaper在写代码之前</p>
<ol>
<li>定闹钟</li>
<li>writeCode返回</li>
<li>执行createPaper()</li>
<li>闹钟时间到</li>
<li>写第一行代码</li>
</ol>
<h3 id="9-1-一个例子-买黄牛票"><a href="#9-1-一个例子-买黄牛票" class="headerlink" title="9.1 一个例子 买黄牛票"></a>9.1 一个例子 买黄牛票</h3><ul>
<li>让黄牛去买票，然后站着等（同步）</li>
<li>让黄牛去买票（告诉黄牛，你买到票就call我），然后去做别的(异步)</li>
</ul>
<p>告诉黄牛，你买到票就打（回）电话我<br>when you get the ticket,call me back。</p>
<h3 id="9-2-异步的解释"><a href="#9-2-异步的解释" class="headerlink" title="9.2 异步的解释"></a>9.2 异步的解释</h3><p>异步就是先写代码后执行，<code>不等结果</code>直接进行下一步</p>
<p>如果想写完代码之后再执行createPaper，这需要回调</p>
<p>writeCode就是一个异步，因为我们不会等它把代码写完，因为它是一个定时器（闹钟）,只要是不等它做完，直接执行createPaper。这就说明writeCode就是一个异步任务。</p>
<p>异步的精髓在于<code>不等结果</code></p>
<h3 id="9-3-如何获取异步结果"><a href="#9-3-如何获取异步结果" class="headerlink" title="9.3 如何获取异步结果"></a>9.3 如何获取异步结果</h3><p>使用回调可以获取异步的结果</p>
<ul>
<li>回调是拿到异步结果的一种方式</li>
<li>回调也可以拿同步结果</li>
</ul>
<p>异步有缺点，就是拿不到结果，所以就要把回调放在异步里面</p>
<h3 id="9-4-使用异步"><a href="#9-4-使用异步" class="headerlink" title="9.4 使用异步"></a>9.4 使用异步</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//main.js</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">writeCode</span>(<span class="params">code,fn</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">        fn.call()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">10</span>) </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> ...</span><br><span class="line"> </span><br><span class="line">writeCode(result,()=&gt;&#123;</span><br><span class="line">  createPaper(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;)</span><br><span class="line">&#125;) </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">createPaper</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  fn.call()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="十、在已有代码上追加内容"><a href="#十、在已有代码上追加内容" class="headerlink" title="十、在已有代码上追加内容"></a>十、在已有代码上追加内容</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeCode</span>(<span class="params">prefix,code,fn</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    domCode.innerHTML =</span><br><span class="line">      Prism.highlight(prefix + code.substring(<span class="number">0</span>, n), Prism.languages.css, <span class="string">'css'</span>);</span><br><span class="line">    styleTag.innerHTML = prefix + code.substring(<span class="number">0</span>, n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">writeCode(<span class="string">''</span>,result,()=&gt;&#123;</span><br><span class="line">  createPaper(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    writeCode(result,result2)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h2 id="十一、代码往下滚动"><a href="#十一、代码往下滚动" class="headerlink" title="十一、代码往下滚动"></a>十一、代码往下滚动</h2> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">writeCode</span>(<span class="params">prefix, code, fn</span>) </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    domCode.scrollTop = domCode.scrollHeight</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h2 id="其他知识"><a href="#其他知识" class="headerlink" title="其他知识"></a>其他知识</h2><p>pre 全称preview </p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace" target="_blank" rel="noopener">replace() 方法返回一个由替换值（replacement）替换一些或所有匹配的模式（pattern）后的新字符串。</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollTop" target="_blank" rel="noopener">Element.scrollTop</a></p>
<h3 id="JS的功能"><a href="#JS的功能" class="headerlink" title="JS的功能"></a>JS的功能</h3><ol>
<li>操作页面</li>
<li>AJAX</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>【JavaScript】JavaScript操作请求与响应</title>
    <url>/uncategorized/%E3%80%90JavaScript%E3%80%91JavaScript%E6%93%8D%E4%BD%9C%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94/</url>
    <content><![CDATA[<h2 id="一、请求的组成部分"><a href="#一、请求的组成部分" class="headerlink" title="一、请求的组成部分"></a>一、请求的组成部分</h2><ul>
<li>第一部分 GET /xxx HTTP/1.1</li>
<li>第二部分 HOST:examlp.com:8002</li>
<li>第二部分 Content-Type:appliction/x-www-url-encoded</li>
<li>第三部分 </li>
<li>第四部分 要下载的内容<h2 id="二、JavaScript操作请求"><a href="#二、JavaScript操作请求" class="headerlink" title="二、JavaScript操作请求"></a>二、JavaScript操作请求</h2><h3 id="2-1-请求的第一部分-用XMLHttpRequest-open-设置"><a href="#2-1-请求的第一部分-用XMLHttpRequest-open-设置" class="headerlink" title="2.1 请求的第一部分 用XMLHttpRequest.open()设置"></a>2.1 请求的第一部分 用XMLHttpRequest.open()设置</h3><blockquote>
<p>XMLHttpRequest.open() 方法初始化一个请求。该方法要从JavaScript代码使用；从原生代码初始化一个请求，使用openRequest()替代。</p>
</blockquote>
</li>
</ul>
<p>例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">request.open(<span class="string">'get'</span>,<span class="string">'http:examlp.com:8002/xxx'</span>)</span><br></pre></td></tr></table></figure>

<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/open" target="_blank" rel="noopener">XMLHttpRequest.open()</a></p>
<h3 id="2-2-请求的第二部分-用XMLHttpRequest-setRequestHeader-设置"><a href="#2-2-请求的第二部分-用XMLHttpRequest-setRequestHeader-设置" class="headerlink" title="2.2 请求的第二部分 用XMLHttpRequest.setRequestHeader()设置"></a>2.2 请求的第二部分 用XMLHttpRequest.setRequestHeader()设置</h3><h4 id="JS可以设置任意的请求header吗？"><a href="#JS可以设置任意的请求header吗？" class="headerlink" title="JS可以设置任意的请求header吗？"></a>JS可以设置任意的请求header吗？</h4><blockquote>
<p>mdn :XMLHttpRequest.setRequestHeader() 是设置HTTP请求头部的方法。此方法必须在  open() 方法和 send()   之间调用。如果多次对同一个请求头赋值，只会生成一个合并了多个值的请求头。</p>
</blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/setRequestHeader" target="_blank" rel="noopener">XMLHttpRequest.setRequestHeader()</a></p>
<p>在server.js设置setRequestHeader，然后运行js打开chrome就看到自己设置的请求头，如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">request.open(<span class="string">'get'</span>,<span class="string">'/xxx'</span>) </span><br><span class="line">request.setRequestHeader(<span class="string">'frank'</span>,<span class="string">'18'</span>)</span><br><span class="line">request.send()</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/03/02/JNxeyfQVrzOAwFM.png" alt="setrequestheader01.png"></p>
<h3 id="2-3-请求的第三部分-回车-不需要设置"><a href="#2-3-请求的第三部分-回车-不需要设置" class="headerlink" title="2.3 请求的第三部分 回车 不需要设置"></a>2.3 请求的第三部分 回车 不需要设置</h3><h3 id="2-4-请求的第四部分-用XMLHttpRequest-send-设置"><a href="#2-4-请求的第四部分-用XMLHttpRequest-send-设置" class="headerlink" title="2.4 请求的第四部分 用XMLHttpRequest.send()设置"></a>2.4 请求的第四部分 用XMLHttpRequest.send()设置</h3><p>js set  request body</p>
<blockquote>
<p>mdn: XMLHttpRequest.send() 方法用于发送 HTTP 请求。如果是异步请求（默认为异步请求），则此方法会在请求发送后立即返回；如果是同步请求，则此方法直到响应到达后才会返回。XMLHttpRequest.send() 方法接受一个可选的参数，其作为请求主体；如果请求方法是 GET 或者 HEAD，则应将请求主体设置为 null。</p>
</blockquote>
<blockquote>
<p> XMLHttpRequest.send(body)</p>
</blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/send" target="_blank" rel="noopener">XMLHttpRequest.send()</a></p>
<p>例子如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">request.open(<span class="string">'get'</span>,<span class="string">'/xxx'</span>) </span><br><span class="line">request.setRequestHeader(<span class="string">'frank'</span>,<span class="string">'18'</span>)</span><br><span class="line">request.send(<span class="string">'我偏要设置request第四部分'</span>)</span><br></pre></td></tr></table></figure>

<p>在Chrome没有展示，是因为Chrome认为get请求理论上是没有Request.body,但是这个只是一个约定俗成而已，没有明令禁止，如果要看到请求的第四部分，不要用get请求</p>
<p>例子如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">request.open(<span class="string">'POST'</span>,<span class="string">'/xxx'</span>) </span><br><span class="line">request.setRequestHeader(<span class="string">'frank'</span>,<span class="string">'18'</span>)</span><br><span class="line">request.send(<span class="string">'我偏要设置request第四部分'</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/03/02/jEflIY7crzdyN1h.jpg" alt="setrequestbody01.jpeg"></p>
<p>Request payload就是请求体的意思</p>
<h4 id="2-4-1-不允许设置USer-Agent"><a href="#2-4-1-不允许设置USer-Agent" class="headerlink" title="2.4.1 不允许设置USer-Agent"></a>2.4.1 不允许设置USer-Agent</h4><p>因为浏览器安全问题，不给与设置<br>consloe报错代码 <code>Refused to set unsafe header &quot;User-Agent&quot;</code></p>
<h4 id="2-4-2-设置Content-Type"><a href="#2-4-2-设置Content-Type" class="headerlink" title="2.4.2 设置Content-Type"></a>2.4.2 设置Content-Type</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">request.open(<span class="string">'POST'</span>,<span class="string">'/xxx'</span>) </span><br><span class="line">request.setRequestHeader(<span class="string">'frank'</span>,<span class="string">'18'</span>)</span><br><span class="line">request.setRequestHeader(<span class="string">'Content-Type'</span>,<span class="string">'x-www-form-urlencoded'</span>)</span><br><span class="line">request.send(<span class="string">'我偏要设置request第四部分'</span>)</span><br></pre></td></tr></table></figure>


<p> <img src="https://i.loli.net/2020/03/02/rJiGWvuhjg1faxX.png" alt="setcontentType01.png"></p>
<h2 id="三、-响应的组成部分"><a href="#三、-响应的组成部分" class="headerlink" title="三、 响应的组成部分"></a>三、 响应的组成部分</h2><ul>
<li>第一部分 协议/版本号状态码状态解释</li>
<li>第二部分 Key1: value1</li>
<li>第二部分 Key2: value2</li>
<li>第二部分 Content-Length: 17931</li>
<li>第二部分 Content-Type: text/html</li>
<li>第三部分</li>
<li>第四部分 要下载的内容</li>
</ul>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> HTTP&#x2F;1.1 200 OK</span><br><span class="line"> Content-Type:text&#x2F;html</span><br><span class="line"> </span><br><span class="line">&lt;!DOCTYPE html&gt;&lt;html&gt;.....&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>


<h2 id="四、-获取响应的方法"><a href="#四、-获取响应的方法" class="headerlink" title="四、 获取响应的方法"></a>四、 获取响应的方法</h2><p> js get response header</p>
<blockquote>
<p>XMLHttpRequest.getAllResponseHeaders() 方法返回所有的响应头，以 CRLF 分割的字符串，或者 null 如果没有收到任何响应。 注意： 对于复合请求 （ multipart requests ），这个方法返回当前请求的头部，而不是最初的请求的头部。</p>
</blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/getAllResponseHeaders" target="_blank" rel="noopener"><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/getAllResponseHeaders" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/getAllResponseHeaders</a></a></p>
<p>例子如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &lt; <span class="number">300</span>)&#123;</span><br><span class="line">consloe.log(request.getAllResponseHeaders())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2020/03/02/82hoXQ1dqUHAmYG.png" alt="response01.png"></p>
<h3 id="4-1-响应的第一部分-可以用XMLHttpRequest-statusText来获取"><a href="#4-1-响应的第一部分-可以用XMLHttpRequest-statusText来获取" class="headerlink" title="4.1 响应的第一部分 可以用XMLHttpRequest.statusText来获取"></a>4.1 响应的第一部分 可以用XMLHttpRequest.statusText来获取</h3><p> js get response message</p>
<blockquote>
<p>只读属性 XMLHttpRequest.statusText 返回了XMLHttpRequest 请求中由服务器返回的一个DOMString 类型的文本信息，这则信息中也包含了响应的数字状态码。不同于使用一个数字来指示的状态码XMLHTTPRequest.status，这个属性包含了返回状态对应的文本信息，例如”OK”或是”Not Found”。如果请求的状态readyState的值为”UNSENT”或者”OPENED”，则这个属性的值将会是一个空字符串。</p>
</blockquote>
<p> 如果服务器未明确指定一个状态文本信息，则statusText的值将会被自动赋值为”OK”。<br>例子</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/statusText" target="_blank" rel="noopener">XMLHttpRequest.statusText</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(request.readState === <span class="number">4</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(request.status)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> chrome浏览器consloe打印出<br> ok</p>
<h3 id="4-2-响应头的第二部分-可以用-XMLHttpRequest-getResponseHeader-获取"><a href="#4-2-响应头的第二部分-可以用-XMLHttpRequest-getResponseHeader-获取" class="headerlink" title="4.2 响应头的第二部分 可以用 XMLHttpRequest.getResponseHeader() 获取"></a>4.2 响应头的第二部分 可以用 XMLHttpRequest.getResponseHeader() 获取</h3><h4 id="4-2-1-获取响应头的Content-Type"><a href="#4-2-1-获取响应头的Content-Type" class="headerlink" title="4.2.1 获取响应头的Content-Type"></a>4.2.1 获取响应头的Content-Type</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &lt; <span class="number">300</span>)&#123;</span><br><span class="line">  consloe.log(request.getResponseHeaders(<span class="string">'Content-Type'</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><img src="https://i.loli.net/2020/03/02/ONIV8lsEDXTfrwH.png" alt="response-content-type-01.png"></p>
<h3 id="4-3-响应头的第三部分-是空格-不用获取"><a href="#4-3-响应头的第三部分-是空格-不用获取" class="headerlink" title="4.3 响应头的第三部分 是空格 不用获取"></a>4.3 响应头的第三部分 是空格 不用获取</h3><h2 id="4-4-响应头的第四部分-用XMLHttpRequest-responseText获取"><a href="#4-4-响应头的第四部分-用XMLHttpRequest-responseText获取" class="headerlink" title="4.4 响应头的第四部分 用XMLHttpRequest.responseText获取"></a>4.4 响应头的第四部分 用XMLHttpRequest.responseText获取</h2><p> XMLHttpRequest.responseText 在一个请求被发送后，从服务器端返回文本。</p>
<p>例子：<br> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &lt; <span class="number">300</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(request.responseText)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="五、代码如下"><a href="#五、代码如下" class="headerlink" title="五、代码如下"></a>五、代码如下</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">myButton.addEventListener(<span class="string">'click'</span>,(e)=&gt;&#123;</span><br><span class="line"><span class="keyword">let</span> request = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  request.open(<span class="string">'get'</span>,<span class="string">'http:examlp.com:8002/xxx'</span>) <span class="comment">//配置request</span></span><br><span class="line">  request.send()</span><br><span class="line">  request.onreadstatechange = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(request.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'请求响应都完毕了'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(request.status)</span><br><span class="line">    <span class="keyword">if</span>(request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &lt; <span class="number">300</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'说明请求成功'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> request.responseText)</span><br><span class="line">    <span class="built_in">console</span>.log(request.responseText)</span><br><span class="line">    <span class="keyword">let</span> string = request.responseText</span><br><span class="line">    <span class="comment">//把符号JSON语法的字符串转换成JS对应的值</span></span><br><span class="line">    <span class="keyword">let</span> object = <span class="built_in">window</span>.JSON.pares(string)</span><br><span class="line">    <span class="comment">//JSON.parse 是浏览器提高的</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> object)</span><br><span class="line">    <span class="built_in">console</span>.log(object)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'object.note'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(object.note)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.status &gt;= <span class="number">400</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'说明请求失败'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><p>通过AJXA，除了部分因为安全原因不给用设置完，我们可以任意设置请求与响应的四部分的所有数据。</p>
<p>这就是AJAX的厉害之处</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
</search>
