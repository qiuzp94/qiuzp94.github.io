<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【JavaScript】Promise</title>
    <url>/2020/04/03/%20%E3%80%90JavaScript%E3%80%91Promise/</url>
    <content><![CDATA[
        <h2 id="一、前置问题：用函数有什么问题？—回调问题"   >
          <a href="#一、前置问题：用函数有什么问题？—回调问题" class="heading-link"><i class="fas fa-link"></i></a>一、前置问题：用函数有什么问题？—回调问题</h2>
      <p>如果不查阅文档，不知道回调的是什么，成功传到哪里，失败传到哪里。</p>
<p>因为每一个人封装函数的风格，不一致，导致要查看多个文档才能更好调有其他人的库。<br>没有规范，那么在JavaScript中有没有一个规范来定义形式咧？</p>
<p>有，这个规范就是Promise</p>
<p>Promise只是一个确定形式的规范。</p>
<a id="more"></a>


        <h2 id="二、Promise的使用"   >
          <a href="#二、Promise的使用" class="heading-link"><i class="fas fa-link"></i></a>二、Promise的使用</h2>
      
        <h3 id="以jQuery为例"   >
          <a href="#以jQuery为例" class="heading-link"><i class="fas fa-link"></i></a>以jQuery为例</h3>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//提前引入jQuery文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第一个方法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">responseText</span>)</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">response</span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> myButton.addEventListener(<span class="string">'click'</span>,(e)=&gt;&#123;</span><br><span class="line">  <span class="built_in">window</span>.jQuery.ajax(&#123;</span><br><span class="line">    url:<span class="string">'/frank'</span>,</span><br><span class="line">    method:<span class="string">'get'</span>,</span><br><span class="line">    success:<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">      f1.call(<span class="literal">undefined</span>,x)</span><br><span class="line">      f2.call(<span class="literal">undefined</span>,y)</span><br><span class="line">    &#125;,</span><br><span class="line">    error:<span class="function">(<span class="params">x</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(x)</span><br><span class="line">      <span class="built_in">console</span>.log(x.status)</span><br><span class="line">      <span class="built_in">console</span>.log(x.responseText)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二个方法(Promise方法)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">then</span>(<span class="params">responseText</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(responseText)</span><br><span class="line"> &#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fail</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(response)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> myButton.addEventListener(<span class="string">'click'</span>,(e)=&gt;&#123;</span><br><span class="line">  $ajax(&#123;</span><br><span class="line">    url:<span class="string">'/frank'</span>,</span><br><span class="line">    method:<span class="string">'get'</span>,</span><br><span class="line">  &#125;).then(success,fail)</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//这是一种新的API形式，虽然要传函数，但可以没有名字。</span></span><br><span class="line"><span class="comment">//不用再查找文档，只要记得成功放在第一个参数，失败放在第二个参数。</span></span><br><span class="line"><span class="comment">//代码得以继续优化</span></span><br><span class="line"></span><br><span class="line"> myButton.addEventListener(<span class="string">'click'</span>,(e)=&gt;&#123;</span><br><span class="line">  $ajax(&#123;</span><br><span class="line">    url:<span class="string">'/xxx'</span>,</span><br><span class="line">    method:<span class="string">'get'</span>,</span><br><span class="line">  &#125;).then(</span><br><span class="line">    (responseText) =&gt; &#123;<span class="built_in">console</span>.log(responseText)&#125;,</span><br><span class="line">    (response) =&gt; &#123;<span class="built_in">console</span>.log(<span class="string">'error'</span>)&#125;</span><br><span class="line">  )</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></div></figure>


        <h2 id="三、Promise的意义"   >
          <a href="#三、Promise的意义" class="heading-link"><i class="fas fa-link"></i></a>三、Promise的意义</h2>
      <ul>
<li>第一个意义：完全不用考虑传入的是success还是成功，是error还是fail，直接then一下就可以使用</li>
<li>第二个意义：标准化操作</li>
</ul>

        <h2 id="四、问题：如果同时有两个函数要操作，Promise是如何操作？"   >
          <a href="#四、问题：如果同时有两个函数要操作，Promise是如何操作？" class="heading-link"><i class="fas fa-link"></i></a>四、问题：如果同时有两个函数要操作，Promise是如何操作？</h2>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line">myButton.addEventListener(<span class="string">'click'</span>,(e)=&gt;&#123;</span><br><span class="line"> $ajax(&#123;</span><br><span class="line">   url:<span class="string">'/xxx'</span>,</span><br><span class="line">   method:<span class="string">'get'</span>,</span><br><span class="line"> &#125;).then( <span class="comment">//then的中文含义：然后</span></span><br><span class="line">   (responseText) =&gt; &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(responseText);</span><br><span class="line">   <span class="keyword">return</span> responseText</span><br><span class="line">   (response) =&gt; &#123;<span class="built_in">console</span>.log(<span class="string">'error1'</span>);<span class="keyword">return</span> <span class="string">'已经处理'</span></span><br><span class="line"> ).then(</span><br><span class="line">   (上一次的处理结果) =&gt; &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(上一次的处理结果)</span><br><span class="line">   &#125;,</span><br><span class="line">   (response) =&gt; &#123;<span class="built_in">console</span>.log(<span class="string">'error2'</span>);</span><br><span class="line"> )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//这样就把回调规范起来了</span></span><br></pre></td></tr></table></div></figure>

<p>浏览器结果如下<br><img src="https://i.loli.net/2020/03/04/iCoAa7d1zlGt2kc.png" alt="Promise01.png"></p>

        <h2 id="五、自己如何封装Promise"   >
          <a href="#五、自己如何封装Promise" class="heading-link"><i class="fas fa-link"></i></a>五、自己如何封装Promise</h2>
      <p>全局window下的promise，promise接受一个函数</p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQeuery.ajax=<span class="function"><span class="keyword">function</span>(<span class="params">&#123;url,method,body,successFn,failFn,headers&#125;</span>)</span>&#123;</span><br><span class="line"><span class="comment">//请问ajax的返回值是什么？</span></span><br><span class="line"><span class="comment">//答案：Promise new出来的对象(Promise对象，接受一个函数)</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> request = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  request.open(method,url)</span><br><span class="line">  request.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(request.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &gt; <span class="number">300</span> )&#123;</span><br><span class="line">      successFn.call(<span class="literal">undefined</span>,request.responseText)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.status &gt;= <span class="number">400</span> )&#123;</span><br><span class="line">      failFn.call(<span class="literal">undefined</span>，request)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  request.send(body)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure>

<p>背诵<code>return new Promise(function(resolve,reject){}</code>这是Promise的格式，固定套路</p>

        <h3 id="5-1-将resolve-reject套入代码中"   >
          <a href="#5-1-将resolve-reject套入代码中" class="heading-link"><i class="fas fa-link"></i></a>5.1  将resolve,reject套入代码中</h3>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQeuery.ajax=<span class="function"><span class="keyword">function</span>(<span class="params">&#123;url,method,body,headers&#125;</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> request = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  request.open(method,url)</span><br><span class="line">  request.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(request.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &gt; <span class="number">300</span> )&#123;</span><br><span class="line">      resolve.call(<span class="literal">undefined</span>,request.responseText)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.status &gt;= <span class="number">400</span> )&#123;</span><br><span class="line">      reject.call(<span class="literal">undefined</span>，request)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  request.send(body)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure>





        <h3 id="5-2-总结"   >
          <a href="#5-2-总结" class="heading-link"><i class="fas fa-link"></i></a>5.2 总结</h3>
      <ol>
<li>首先是用then代替了successFn，failFn参数</li>
<li>然后把代码都放入在<code>return new Promise(function(resolve,reject){}</code>格式中</li>
<li>如果成功调用resolve，如果失败调用reject</li>
</ol>

        <h3 id="5-3-jquery-ajax使用Promise"   >
          <a href="#5-3-jquery-ajax使用Promise" class="heading-link"><i class="fas fa-link"></i></a>5.3 jquery.ajax使用Promise</h3>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line">myButton.addEventListener(<span class="string">'click'</span>, (e) =&gt;&#123;</span><br><span class="line">  <span class="built_in">window</span>.jQuery.ajax(&#123;</span><br><span class="line">    <span class="comment">//url:'tony', 这是失败</span></span><br><span class="line">    url:<span class="string">'/xxx'</span>, <span class="comment">//这是成功</span></span><br><span class="line">    method:<span class="string">'get'</span>,</span><br><span class="line">    headers:&#123;</span><br><span class="line">      <span class="string">'content-type'</span>:<span class="string">'application/x-www-form-urlencoded'</span>,</span><br><span class="line">      <span class="string">'tony'</span>:<span class="string">'18'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).then(</span><br><span class="line">  (text)=&gt;&#123;<span class="built_in">console</span>.log(text)&#125;,</span><br><span class="line">  (request)=&gt;&#123;<span class="built_in">console</span>.log(request)  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure>


<p><img src="https://i.loli.net/2020/03/04/xEoJRYHGesrd43p.png" alt="promise.png"><br><img src="https://i.loli.net/2020/03/04/2opqCrs3EmPdJ7i.png" alt="promise02.png"></p>

        <h2 id="六、Promise的实现形式"   >
          <a href="#六、Promise的实现形式" class="heading-link"><i class="fas fa-link"></i></a>六、Promise的实现形式</h2>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.Promise = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//省略中间代码</span></span><br><span class="line">  <span class="keyword">return</span>&#123;</span><br><span class="line">    then:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前面代码格式化上面形式如下</span></span><br><span class="line">myButton.addEventListener(<span class="string">'click'</span>, (e) =&gt;&#123;</span><br><span class="line">  <span class="keyword">let</span> promise = <span class="built_in">window</span>.jQuery.ajax(&#123;</span><br><span class="line">    <span class="comment">//url:'tony', 这是失败</span></span><br><span class="line">    url:<span class="string">'/xxx'</span>, <span class="comment">//这是成功</span></span><br><span class="line">    method:<span class="string">'get'</span>,</span><br><span class="line">    headers:&#123;</span><br><span class="line">      <span class="string">'content-type'</span>:<span class="string">'application/x-www-form-urlencoded'</span>,</span><br><span class="line">      <span class="string">'tony'</span>:<span class="string">'18'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">   promise.then(</span><br><span class="line">  (text)=&gt;&#123;<span class="built_in">console</span>.log(text)&#125;,</span><br><span class="line">  (request)=&gt;&#123;<span class="built_in">console</span>.log(request)  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure>


        <h2 id="七、总结"   >
          <a href="#七、总结" class="heading-link"><i class="fas fa-link"></i></a>七、总结</h2>
      <p> 背诵<code>return new Promise(function(resolve,reject){}</code>这是Promise的格式，固定套路</p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Cookie与登录注册</title>
    <url>/2020/04/03/Cookie%E4%B8%8E%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C/</url>
    <content><![CDATA[
        <h2 id="一、啥是Cookie"   >
          <a href="#一、啥是Cookie" class="heading-link"><i class="fas fa-link"></i></a>一、啥是Cookie</h2>
      <p>Cookie，又称为“小甜饼”。类型为“小型文本文件”，指某些网站为了辨别用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。由网景公司的前雇员卢·蒙特利在1993年3月发明。</p>
<p>每个 Cookie 的大小一般不能超过4KB。浏览器每次向服务器发出请求，就会自动附上这段信息。</p>

        <h2 id="二、-Cookie-的特点"   >
          <a href="#二、-Cookie-的特点" class="heading-link"><i class="fas fa-link"></i></a>二、 Cookie 的特点</h2>
      <ol>
<li>服务器通过 Set-Cookie 响应头设置 Cookie</li>
<li>浏览器得到 Cookie 之后，每次请求都要带上 Cookie</li>
<li>服务器读取 Cookie 就知道登录用户的信息（email）</li>
</ol>
<a id="more"></a>


        <h2 id="三、什么时候要设置Cookie"   >
          <a href="#三、什么时候要设置Cookie" class="heading-link"><i class="fas fa-link"></i></a>三、什么时候要设置Cookie</h2>
      <p>在登录成功的一瞬间，我们需要设置一个Cookie，如果找这个用户的相关数据，就记录该用户的数据</p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Set-Cookie:&lt;cookie-name&gt;=&lt;cookie-value&gt;</span></span><br><span class="line">response.setHeader(<span class="string">'Set-Cookie'</span>,<span class="string">`sign_in_email=<span class="subst">$&#123;email&#125;</span>`</span>)</span><br></pre></td></tr></table></div></figure>

<p><span class="exturl"><a class="exturl__link"   href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Set-Cookie"  target="_blank" rel="noopener">Set-Cookie </a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h2 id="四、问题"   >
          <a href="#四、问题" class="heading-link"><i class="fas fa-link"></i></a>四、问题</h2>
      
        <h3 id="4-1-我在-Chrome-登录了得到-Cookie，用-Safari-访问，Safari-会带上-Cookie-吗？"   >
          <a href="#4-1-我在-Chrome-登录了得到-Cookie，用-Safari-访问，Safari-会带上-Cookie-吗？" class="heading-link"><i class="fas fa-link"></i></a>4.1 我在 Chrome 登录了得到 Cookie，用 Safari 访问，Safari 会带上 Cookie 吗？</h3>
      <p>no</p>

        <h3 id="4-2-Cookie-存在哪"   >
          <a href="#4-2-Cookie-存在哪" class="heading-link"><i class="fas fa-link"></i></a>4.2 Cookie 存在哪</h3>
      <p>Windows 存在 C 盘的一个文件里</p>

        <h3 id="4-3-Cookie会被用户篡改吗？"   >
          <a href="#4-3-Cookie会被用户篡改吗？" class="heading-link"><i class="fas fa-link"></i></a>4.3 Cookie会被用户篡改吗？</h3>
      <p>可以，可以用Session 来解决这个问题，防止用户篡改</p>

        <h3 id="4-4-Cookie-有效期吗？"   >
          <a href="#4-4-Cookie-有效期吗？" class="heading-link"><i class="fas fa-link"></i></a>4.4 Cookie 有效期吗？</h3>
      <ul>
<li><p>默认有效期20分钟左右，不同浏览器策略不同</p>
</li>
<li><p>端可以强制设置有效期，具体语法看 MDN</p>
</li>
<li>
        <h3 id="4-5-Cookie-遵守同源策略吗？"   >
          <a href="#4-5-Cookie-遵守同源策略吗？" class="heading-link"><i class="fas fa-link"></i></a>4.5 Cookie 遵守同源策略吗？</h3>
      <p>也有，不过跟 AJAX 的同源策略稍微有些不同。</p>
</li>
<li><p>当请求 qq.com 下的资源时，浏览器会默认带上 qq.com 对应的 Cookie，不会带上 baidu.com 对应的 Cookie</p>
</li>
<li><p>当请求 v.qq.com 下的资源时，浏览器不仅会带上 v.qq.com 的Cookie，还会带上 qq.com 的 Cookie</p>
</li>
</ul>
<p>另外 Cookie 还可以根据路径做限制，这个功能用得比较少。</p>

        <h3 id="五、其他资料"   >
          <a href="#五、其他资料" class="heading-link"><i class="fas fa-link"></i></a>五、其他资料</h3>
      <ul>
<li><span class="exturl"><a class="exturl__link"   href="https://zh.wikipedia.org/wiki/Cookie"  target="_blank" rel="noopener">Cookie维基百科</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
</ul>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS知识归纳</title>
    <url>/2020/04/03/CSS%E7%9F%A5%E8%AF%86%E5%BD%92%E7%BA%B3/</url>
    <content><![CDATA[
        <h2 id="一、文档流"   >
          <a href="#一、文档流" class="heading-link"><i class="fas fa-link"></i></a>一、文档流</h2>
      
        <h3 id="1-1-文档流定义"   >
          <a href="#1-1-文档流定义" class="heading-link"><i class="fas fa-link"></i></a>1.1 文档流定义</h3>
      <p>文档内元素的流动方向</p>

        <h3 id="1-2-文档流解释"   >
          <a href="#1-2-文档流解释" class="heading-link"><i class="fas fa-link"></i></a>1.2 文档流解释</h3>
      <ul>
<li>内联元素：从左向右流动，如果流动遇到阻碍，它是换行继续流动</li>
<li>块级元素：从上向下流动，每个块级元素独占一行。</li>
</ul>

        <h3 id="1-3-文档流注意事项"   >
          <a href="#1-3-文档流注意事项" class="heading-link"><i class="fas fa-link"></i></a>1.3 文档流注意事项</h3>
      <ul>
<li>如果一个<code>&lt;span&gt;</code>元素被截断，<code>&lt;span&gt;</code>元素会分成上下两部分，如果是长单词被截断，那么它会另起一行。</li>
<li>解决这个问题可以用CSS中的<code>word-bread</code>属性。</li>
<li><code>word-bread：bread-all</code>全部打断，中文网站推荐使用</li>
<li><code>word-bread：bread-word</code>只有在单词分割地方打断，默认值</li>
<li><code>word-bread：keep-all</code>全部不要打断</li>
<li>span 不接受设置宽高，要设置的话加display：inline-block；</li>
<li>span里面一般不放div，因为容易出bug</li>
</ul>

        <h3 id="1-4-div-横向排列方法"   >
          <a href="#1-4-div-横向排列方法" class="heading-link"><i class="fas fa-link"></i></a>1.4 div 横向排列方法</h3>
      <ul>
<li>float 浮动</li>
<li>display:inline-block 不推荐使用</li>
</ul>
<a id="more"></a>


        <h2 id="二、高度"   >
          <a href="#二、高度" class="heading-link"><i class="fas fa-link"></i></a>二、高度</h2>
      
        <h3 id="2-1-div高度"   >
          <a href="#2-1-div高度" class="heading-link"><i class="fas fa-link"></i></a>2.1 div高度</h3>
      <p>div高度有其内部文档流元素的高度总和决定</p>

        <h3 id="2-2-span高度"   >
          <a href="#2-2-span高度" class="heading-link"><i class="fas fa-link"></i></a>2.2 span高度</h3>
      <p>span高度与字体设计大小有关，可以手动用line-height设置，line-height是可以确定内联高度的。</p>

        <h3 id="2-3-高度注意事项"   >
          <a href="#2-3-高度注意事项" class="heading-link"><i class="fas fa-link"></i></a>2.3 高度注意事项</h3>
      <ul>
<li>一般情况下，能不使用height属性，就不要设置height属性</li>
<li>因为高度定死，会出现许多bug</li>
<li>可以是用 内容+line-height+padding 来下确定整体高度</li>
</ul>

        <h2 id="三、position"   >
          <a href="#三、position" class="heading-link"><i class="fas fa-link"></i></a>三、position</h2>
      
        <h3 id="3-1-position-fixed"   >
          <a href="#3-1-position-fixed" class="heading-link"><i class="fas fa-link"></i></a>3.1 position:fixed</h3>
      <p>相对于屏幕</p>

        <h3 id="3-2-position：absolute-绝对定位"   >
          <a href="#3-2-position：absolute-绝对定位" class="heading-link"><i class="fas fa-link"></i></a>3.2 position：absolute 绝对定位</h3>
      <ul>
<li>在子元素上写<code>position:absolute</code></li>
<li>在父元素上写<code>position:relative</code></li>
</ul>

        <h2 id="四、如何用CSS做个三角形"   >
          <a href="#四、如何用CSS做个三角形" class="heading-link"><i class="fas fa-link"></i></a>四、如何用CSS做个三角形</h2>
      <figure class="highlight css"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.triangle</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">10px</span> solid transparent;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">border-left-color</span>:red;</span><br><span class="line">  //border-top-width:0px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h2 id="五、图标居中问题"   >
          <a href="#五、图标居中问题" class="heading-link"><i class="fas fa-link"></i></a>五、图标居中问题</h2>
      <p>添加<code>rertical-align:top</code>可以解决图标上下居中问题</p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>JS的数据类型</title>
    <url>/2020/04/03/JS%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[
        <h2 id="一、七种数据类型"   >
          <a href="#一、七种数据类型" class="heading-link"><i class="fas fa-link"></i></a>一、七种数据类型</h2>
      <ol>
<li>number</li>
<li>string</li>
<li>boolean</li>
<li>symbol</li>
<li>undefined</li>
<li>null</li>
<li>object</li>
</ol>
<p>注意：没有array类型，也没有function类型，它们属于object</p>

        <h2 id="二、number"   >
          <a href="#二、number" class="heading-link"><i class="fas fa-link"></i></a>二、number</h2>
      <ul>
<li>整数和小数：<code>1</code> 、<code>1.1</code>、<code>.1</code></li>
<li>科学记数法：<code>1.23e2</code> == 123</li>
<li>二进制：<code>0b11</code></li>
<li>八进制：<code>011</code>(后来ES5添加了 0o11 语法)</li>
<li>十六进制：<code>0x11</code></li>
</ul>
<a id="more"></a>


        <h2 id="三、String"   >
          <a href="#三、String" class="heading-link"><i class="fas fa-link"></i></a>三、String</h2>
      
        <h3 id="3-1-空字符串：-39-39"   >
          <a href="#3-1-空字符串：-39-39" class="heading-link"><i class="fas fa-link"></i></a>3.1 空字符串：&#39;&#39;</h3>
      <ul>
<li>空字符串与空格字符串是两个概念。空字符串<code>&#39;&#39;</code>,length等于0，空格字符串<code>&#39; &#39;</code>,length等于1</li>
</ul>

        <h3 id="3-2-多行字符串"   >
          <a href="#3-2-多行字符串" class="heading-link"><i class="fas fa-link"></i></a>3.2 多行字符串</h3>
      
        <h4 id="写法一"   >
          <a href="#写法一" class="heading-link"><i class="fas fa-link"></i></a>写法一</h4>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'123456'</span>+</span><br><span class="line"><span class="string">'67890'</span> <span class="comment">// 无回车符号</span></span><br></pre></td></tr></table></div></figure>


        <h4 id="写法二"   >
          <a href="#写法二" class="heading-link"><i class="fas fa-link"></i></a>写法二</h4>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s  = <span class="string">`12345</span></span><br><span class="line"><span class="string">67890`</span> <span class="comment">//包含回车符号</span></span><br></pre></td></tr></table></div></figure>


        <h4 id="写法三"   >
          <a href="#写法三" class="heading-link"><i class="fas fa-link"></i></a>写法三</h4>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'123456 \</span></span><br><span class="line"><span class="string">67890'</span>    <span class="comment">//坑人语法。不推荐写</span></span><br></pre></td></tr></table></div></figure>


        <h3 id="3-3-特殊转义符"   >
          <a href="#3-3-特殊转义符" class="heading-link"><i class="fas fa-link"></i></a>3.3 特殊转义符</h3>
      <ul>
<li><code>\0</code>：null</li>
<li><code>\b</code> ：后退键</li>
<li><code>\f</code> ：换页符</li>
<li><code>\n</code>：换行符</li>
<li><code>\r</code> ：回车键</li>
<li><code>\t</code>：制表符</li>
<li><code>\v</code> ：垂直制表符</li>
<li><code>\&#39;</code> ：单引号</li>
<li><code>\&quot;</code> ：双引号</li>
<li><code>\\</code> ：反斜杠</li>
</ul>

        <h2 id="四、boolean"   >
          <a href="#四、boolean" class="heading-link"><i class="fas fa-link"></i></a>四、boolean</h2>
      <p>两个值:true（真） 与 false(假)</p>

        <h3 id="4-1-a-amp-amp-与-b"   >
          <a href="#4-1-a-amp-amp-与-b" class="heading-link"><i class="fas fa-link"></i></a>4.1 a &amp;&amp;(与) b</h3>
      <p>在a和b都为true时，取值为true，否则为false；</p>

        <h3 id="4-2-a-或-b"   >
          <a href="#4-2-a-或-b" class="heading-link"><i class="fas fa-link"></i></a>4.2 a ||(或)b</h3>
      <p>在a和b都是false时，取值为false，否则为true</p>

        <h2 id="五、undefined-与-null"   >
          <a href="#五、undefined-与-null" class="heading-link"><i class="fas fa-link"></i></a>五、undefined 与 null</h2>
      <p>它们都表示没有值</p>
<ol>
<li>(规范)如果一个变量没有被赋值，那么这个变量的值就是<code>undefined</code></li>
<li>(习俗)如果想表示一个还没有赋值的对象，就用<code>null</code>。如果想表示还没有赋值的字符串、数字、布尔、symbol就用<code>undefined</code>。</li>
</ol>

        <h2 id="六、symbol"   >
          <a href="#六、symbol" class="heading-link"><i class="fas fa-link"></i></a>六、symbol</h2>
      <p>ES6 引入了一种新的原始数据类型Symbol，表示独一无二的值。</p>

        <h2 id="七、object"   >
          <a href="#七、object" class="heading-link"><i class="fas fa-link"></i></a>七、object</h2>
      <p>object是复杂类型，就是上面几种数据类型（无序地）组合在一起</p>
<ul>
<li>object的key一律是字符串，不存在其他类型的key</li>
<li><code>object[&#39;&#39;]</code>是合法</li>
<li><code>object[&#39;key&#39;]</code>可以写作<code>object.key</code></li>
<li>注意<code>object.key</code>与<code>object[key]</code>不同
        <h3 id="7-1-delete"   >
          <a href="#7-1-delete" class="heading-link"><i class="fas fa-link"></i></a>7.1 delete</h3>
      delete命令用于删除对象的属性，删除成功后返回true</li>
</ul>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">p</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.keys(obj) <span class="comment">// ["p"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> obj.p <span class="comment">// true</span></span><br><span class="line">obj.p <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">Object</span>.keys(obj) <span class="comment">// []</span></span><br></pre></td></tr></table></div></figure>

        <h3 id="7-2-in"   >
          <a href="#7-2-in" class="heading-link"><i class="fas fa-link"></i></a>7.2 in</h3>
      <p>in运算符用于检查对象是否包含某个属性（注意，检查的是键名，不是键值），如果包含就返回true，否则返回false。</p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">p</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="string">'p'</span> <span class="keyword">in</span> obj <span class="comment">// true</span></span><br><span class="line"><span class="string">'toString'</span> <span class="keyword">in</span> obj <span class="comment">// true</span></span><br></pre></td></tr></table></div></figure>


        <h3 id="7-3-for…in-循环"   >
          <a href="#7-3-for…in-循环" class="heading-link"><i class="fas fa-link"></i></a>7.3 for…in 循环</h3>
      <p>for…in循环用来遍历一个对象的全部属性。</p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'键名：'</span>, i);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'键值：'</span>, obj[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 键名： a</span></span><br><span class="line"><span class="comment">// 键值： 1</span></span><br><span class="line"><span class="comment">// 键名： b</span></span><br><span class="line"><span class="comment">// 键值： 2</span></span><br><span class="line"><span class="comment">// 键名： c</span></span><br><span class="line"><span class="comment">// 键值： 3</span></span><br></pre></td></tr></table></div></figure>


<p>for…in循环有两个使用注意点。</p>
<ul>
<li>它遍历的是对象所有可遍历（enumerable）的属性，会跳过不可遍历的属性。</li>
<li>它不仅遍历对象自身的属性，还遍历继承的属性。</li>
</ul>

        <h2 id="八、-typeof操作符"   >
          <a href="#八、-typeof操作符" class="heading-link"><i class="fas fa-link"></i></a>八、 typeof操作符</h2>
      <ol>
<li>null typeof返回的是object</li>
<li>function typeof返回的是function</li>
<li>注意function并不是一个类型</li>
</ol>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 里的数据类型转换</title>
    <url>/2020/04/03/JS%20%E9%87%8C%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[
        <h2 id="任意类型转字符串"   >
          <a href="#任意类型转字符串" class="heading-link"><i class="fas fa-link"></i></a>任意类型转字符串</h2>
      
        <h3 id="方法一-String-x"   >
          <a href="#方法一-String-x" class="heading-link"><i class="fas fa-link"></i></a>方法一 String(x)</h3>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span>(<span class="number">1</span>)</span><br><span class="line"><span class="string">"1"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="string">"true"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">null</span>)</span><br><span class="line"><span class="string">"null"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">undefined</span>)</span><br><span class="line"><span class="string">"undefined"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span>(&#123;&#125;)</span><br><span class="line"><span class="string">"[object Object]"</span></span><br></pre></td></tr></table></div></figure>

<a id="more"></a>


        <h3 id="方法二-x-toString"   >
          <a href="#方法二-x-toString" class="heading-link"><i class="fas fa-link"></i></a>方法二 x.toString()</h3>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>).toString()</span><br><span class="line"><span class="string">"1"</span></span><br><span class="line"></span><br><span class="line">(<span class="literal">true</span>).toString()</span><br><span class="line"><span class="string">"true"</span></span><br><span class="line"></span><br><span class="line"><span class="literal">null</span>.toString()</span><br><span class="line">Uncaught <span class="built_in">TypeError</span>: Cannot read property <span class="string">'toString'</span> <span class="keyword">of</span> <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="literal">undefined</span>.toString()</span><br><span class="line">VM1129:<span class="number">1</span> Uncaught <span class="built_in">TypeError</span>: Cannot read property <span class="string">'toString'</span> <span class="keyword">of</span> <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">&#123;&#125;.toString()</span><br><span class="line">Uncaught <span class="built_in">SyntaxError</span>: Unexpected token <span class="string">'.'</span></span><br><span class="line"></span><br><span class="line">(&#123;&#125;).toString()</span><br><span class="line"><span class="string">"[object Object]"</span></span><br></pre></td></tr></table></div></figure>


        <h3 id="方法三-x-39-39-便捷用法"   >
          <a href="#方法三-x-39-39-便捷用法" class="heading-link"><i class="fas fa-link"></i></a>方法三 x + &#39;&#39; 便捷用法</h3>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="string">''</span></span><br><span class="line"><span class="string">"1"</span></span><br><span class="line"></span><br><span class="line"><span class="literal">true</span> + <span class="string">''</span></span><br><span class="line"><span class="string">"true"</span></span><br><span class="line"></span><br><span class="line"><span class="literal">null</span> + <span class="string">''</span></span><br><span class="line"><span class="string">"null"</span></span><br><span class="line"></span><br><span class="line"><span class="literal">undefined</span> + <span class="string">''</span></span><br><span class="line"><span class="string">"undefined"</span></span><br><span class="line"></span><br><span class="line">&#123;&#125; + <span class="string">''</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o  = &#123;&#125; </span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">o + <span class="string">''</span></span><br><span class="line"><span class="string">"[object Object]"</span></span><br></pre></td></tr></table></div></figure>


        <h2 id="任意类型转布尔"   >
          <a href="#任意类型转布尔" class="heading-link"><i class="fas fa-link"></i></a>任意类型转布尔</h2>
      
        <h3 id="方法一-Boolean-x"   >
          <a href="#方法一-Boolean-x" class="heading-link"><i class="fas fa-link"></i></a>方法一 Boolean(x)</h3>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Boolean</span>(<span class="built_in">String</span>)</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">null</span>)</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="string">''</span>)</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="number">0</span>)</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">undefined</span>)</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Boolean</span>(&#123;&#125;)</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></div></figure>


        <h3 id="方法二-x-便捷用法"   >
          <a href="#方法二-x-便捷用法" class="heading-link"><i class="fas fa-link"></i></a>方法二 !!x 便捷用法</h3>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line">!!<span class="built_in">String</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"></span><br><span class="line">!!<span class="literal">null</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"></span><br><span class="line">!!<span class="string">''</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"></span><br><span class="line">!!<span class="number">0</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"></span><br><span class="line">!!<span class="literal">undefined</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"></span><br><span class="line">!!&#123;&#125;</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></div></figure>


        <h3 id="五个falsy值（要背诵）"   >
          <a href="#五个falsy值（要背诵）" class="heading-link"><i class="fas fa-link"></i></a>五个falsy值（要背诵）</h3>
      <ol>
<li><code>0</code></li>
<li><code>NaN</code></li>
<li><code>null</code></li>
<li><code>undefined</code></li>
<li><code>&#39;&#39;</code></li>
</ol>

        <h3 id="注意事项"   >
          <a href="#注意事项" class="heading-link"><i class="fas fa-link"></i></a>注意事项</h3>
      <p>只要对象都是true</p>

        <h2 id="任意类型转数字"   >
          <a href="#任意类型转数字" class="heading-link"><i class="fas fa-link"></i></a>任意类型转数字</h2>
      
        <h3 id="方法一-Number-x"   >
          <a href="#方法一-Number-x" class="heading-link"><i class="fas fa-link"></i></a>方法一 Number(x)</h3>
      <p><code>Number(&#39;1&#39;) //返回 1</code></p>

        <h3 id="方法二-parseInt-x-10"   >
          <a href="#方法二-parseInt-x-10" class="heading-link"><i class="fas fa-link"></i></a>方法二 parseInt(x 10)</h3>
      <p>parseInt(string, radix)   将一个字符串 string 转换为 radix 进制的整数， radix 为介于2-36之间的数。</p>
<p><code>parseInt(&#39;1&#39;,10) //返回 1</code></p>

        <h3 id="方法三-parseFloat-x"   >
          <a href="#方法三-parseFloat-x" class="heading-link"><i class="fas fa-link"></i></a>方法三 parseFloat(x)</h3>
      <p>parseFloat() 函数解析一个参数（必要时先转换为字符串）并返回一个浮点数。给定值被解析成浮点数。如果给定值不能被转换成数值，则会返回 NaN。</p>
<p><code>parseFloat(&#39;1.23&#39;) //返回1.23</code></p>

        <h3 id="方法四-x-0-便捷用法"   >
          <a href="#方法四-x-0-便捷用法" class="heading-link"><i class="fas fa-link"></i></a>方法四 x - 0 便捷用法</h3>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="string">'1'</span>- <span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="string">'123'</span>- <span class="number">0</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="string">'1.23'</span>- <span class="number">0</span></span><br><span class="line"><span class="number">1.23</span></span><br></pre></td></tr></table></div></figure>


        <h3 id="方法五-x"   >
          <a href="#方法五-x" class="heading-link"><i class="fas fa-link"></i></a>方法五 + x</h3>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line">+ <span class="string">'1'</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line">+ <span class="string">'1.23'</span></span><br><span class="line"><span class="number">1.23</span></span><br><span class="line"></span><br><span class="line">+ <span class="string">'.1'</span></span><br><span class="line"><span class="number">3.1</span></span><br><span class="line"></span><br><span class="line">+ <span class="string">'-1'</span></span><br><span class="line"><span class="number">-1</span></span><br><span class="line"></span><br><span class="line">-(<span class="string">'-1'</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line">-(-<span class="string">'-1'</span>)</span><br><span class="line"><span class="number">-1</span></span><br></pre></td></tr></table></div></figure>]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Array对象类型</title>
    <url>/2020/04/03/JavaScript%20Array%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[
        <h2 id="什么是标准库"   >
          <a href="#什么是标准库" class="heading-link"><i class="fas fa-link"></i></a>什么是标准库</h2>
      <ol>
<li>在JS内存里面有Stack、Heap。</li>
<li>而在Stack有一个重要的变量（global/window）</li>
<li>而（global/window），用hash表示，分为标准库与非标准库</li>
<li>标准库里面有可以分为String()、Number()、Array()、Boolean()、Object()</li>
</ol>

        <h2 id="Array"   >
          <a href="#Array" class="heading-link"><i class="fas fa-link"></i></a>Array</h2>
      <p>Array对象是用于构造数组的全局对象；它是高阶、类似于列表的对象</p>

        <h2 id="什么是Array"   >
          <a href="#什么是Array" class="heading-link"><i class="fas fa-link"></i></a>什么是Array</h2>
      <p>数组是按次序排列的一组值</p>
<a id="more"></a>


        <h2 id="什么是伪数组"   >
          <a href="#什么是伪数组" class="heading-link"><i class="fas fa-link"></i></a>什么是伪数组</h2>
      <ol>
<li>有0，1，2，3，4，5，n，length这些key的对象</li>
<li>原型链没有Array.prototype</li>
</ol>
<p>目前已知的伪数组有</p>
<ol>
<li>argument 对象</li>
<li>document.querySelectAll(‘div’) 返回的对象</li>
</ol>

        <h2 id="数组的API"   >
          <a href="#数组的API" class="heading-link"><i class="fas fa-link"></i></a>数组的API</h2>
      <p>Array.prototype.forEach</p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript中常用的DOMAPI</title>
    <url>/2020/04/03/JavaScript%20%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84DOM%20API/</url>
    <content><![CDATA[<p>本文章是归纳复习本人在学习JavaScript中运用过得DOM api，将不定时的更新补充，完善。</p>
<p>DOM 是 JavaScript 操作网页的接口，全称为“文档对象模型”（Document Object Model）。它的作用是将网页转为一个 JavaScript 对象，从而可以用脚本进行各种操作（比如增删内容）。</p>

        <h2 id="一、Element类型"   >
          <a href="#一、Element类型" class="heading-link"><i class="fas fa-link"></i></a>一、Element类型</h2>
      
        <h3 id="Element-attributes"   >
          <a href="#Element-attributes" class="heading-link"><i class="fas fa-link"></i></a>Element.attributes</h3>
      <p>返回一个与该元素相关的所有属性集合</p>

        <h3 id="Element-classList"   >
          <a href="#Element-classList" class="heading-link"><i class="fas fa-link"></i></a>Element.classList</h3>
      <p>返回该元素包含的 class 属性,通常用来添加/移除对应的CSS样式</p>

        <h3 id="Element-className"   >
          <a href="#Element-className" class="heading-link"><i class="fas fa-link"></i></a>Element.className</h3>
      <p>className属性用来读写当前元素节点的class属性</p>

        <h3 id="Element-innerHTML"   >
          <a href="#Element-innerHTML" class="heading-link"><i class="fas fa-link"></i></a>Element.innerHTML</h3>
      <p>返回一个字符串，等同于该元素包含的所有 HTML 代码,常用来设置某个节点的内容。它能改写所有元素节点的内容</p>
<a id="more"></a>


        <h3 id="Element-getAttribute"   >
          <a href="#Element-getAttribute" class="heading-link"><i class="fas fa-link"></i></a>Element.getAttribute()</h3>
      <p>Element.getAttribute()方法接受一个字符串作为参数，返回同名属性的值。如果没有该属性，则返回null。</p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">var mydiv &#x3D; document.getElementById(&#39;mydiv&#39;);</span><br><span class="line">var id &#x3D; mydiv.getAttribute(&#39;id&#39;);</span><br><span class="line">上面代码读取mydiv的id的值。</span><br></pre></td></tr></table></div></figure>





        <h2 id="二、document类型"   >
          <a href="#二、document类型" class="heading-link"><i class="fas fa-link"></i></a>二、document类型</h2>
      
        <h3 id="document-querySelector"   >
          <a href="#document-querySelector" class="heading-link"><i class="fas fa-link"></i></a>document.querySelector</h3>
      <p>接受一个 CSS 选择器作为参数，返回匹配该选择器的元素节点。</p>

        <h3 id="document-querySelectorAll"   >
          <a href="#document-querySelectorAll" class="heading-link"><i class="fas fa-link"></i></a>document.querySelectorAll</h3>
      <p>document.querySelectorAll() 是 HTML5中引入的新方法，返回文档中匹配的CSS选择器的所有元素节点列表</p>

        <h3 id="document-getElementById"   >
          <a href="#document-getElementById" class="heading-link"><i class="fas fa-link"></i></a>document.getElementById</h3>
      <p>getElementById()返回一个匹配特定 ID的元素</p>

        <h3 id="document-getElementsByClassName"   >
          <a href="#document-getElementsByClassName" class="heading-link"><i class="fas fa-link"></i></a>document.getElementsByClassName</h3>
      <p>方法返回一个类似数组的对象，</p>

        <h3 id="document-getElementsByTagName"   >
          <a href="#document-getElementsByTagName" class="heading-link"><i class="fas fa-link"></i></a>document.getElementsByTagName</h3>
      <p>getElementsByClassName() 方法返回文档中所有指定类名的元素集合，作为 NodeList 对象。</p>

        <h3 id="document-createElement"   >
          <a href="#document-createElement" class="heading-link"><i class="fas fa-link"></i></a>document.createElement()</h3>
      <p>创建元素节点。</p>

        <h2 id="三、Node类型"   >
          <a href="#三、Node类型" class="heading-link"><i class="fas fa-link"></i></a>三、Node类型</h2>
      
        <h3 id="Node-appenChild"   >
          <a href="#Node-appenChild" class="heading-link"><i class="fas fa-link"></i></a>Node.appenChild()</h3>
      <p>方法将一个节点添加到指定父节点的子节点列表末尾。</p>

        <h3 id="Node-childNodes"   >
          <a href="#Node-childNodes" class="heading-link"><i class="fas fa-link"></i></a>Node.childNodes</h3>
      <p>返回一个包含了该节点所有子节点的实时的NodeList。</p>

        <h3 id="Node-nextSibling"   >
          <a href="#Node-nextSibling" class="heading-link"><i class="fas fa-link"></i></a>Node.nextSibling</h3>
      <p>返回与该节点同级的下一个节点 Node，如果没有返回null。</p>

        <h3 id="Node-nodeType"   >
          <a href="#Node-nodeType" class="heading-link"><i class="fas fa-link"></i></a>Node.nodeType</h3>
      <p>只读属性 Node.nodeType 表示的是该节点的类型。nodeType 属性可用来区分不同类型的节点，比如 元素, 文本 和 注释。</p>
<ul>
<li>Node.ELEMENT_NODE        节点是一个元素节点，nodeType 属性返回 1</li>
<li>Node.TEXT_NODE        节点是一个文本节点，nodeType 属性返回 3</li>
<li>Node.COMMENT_NODE        节点是一个注释节点，nodeType 属性返回 8</li>
<li>Node.DOCUMENT_NODE        一个 Document 节点。 9</li>
</ul>
<p><span class="exturl"><a class="exturl__link"   href="https://www.runoob.com/jsref/prop-node-nodetype.html"  target="_blank" rel="noopener">查看nodeType 属性其它返回节点类型</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h3 id="Node-textContent"   >
          <a href="#Node-textContent" class="heading-link"><i class="fas fa-link"></i></a>Node.textContent</h3>
      <p>textContent属性返回当前节点和它的所有后代节点的文本内容。</p>

        <h3 id="Node-parentNode"   >
          <a href="#Node-parentNode" class="heading-link"><i class="fas fa-link"></i></a>Node.parentNode</h3>
      <p>返回某节点的父节点</p>

        <h2 id="四、DOM事件-鼠标事件"   >
          <a href="#四、DOM事件-鼠标事件" class="heading-link"><i class="fas fa-link"></i></a>四、DOM事件-鼠标事件</h2>
      
        <h3 id="onclick"   >
          <a href="#onclick" class="heading-link"><i class="fas fa-link"></i></a>onclick</h3>
      <p>当用户点击某个对象时调用的事件句柄。</p>

        <h3 id="onmousedown"   >
          <a href="#onmousedown" class="heading-link"><i class="fas fa-link"></i></a>onmousedown</h3>
      <p>鼠标按钮被按下。</p>

        <h3 id="onmouseenter"   >
          <a href="#onmouseenter" class="heading-link"><i class="fas fa-link"></i></a>onmouseenter</h3>
      <p>当鼠标指针移动到元素上时触发。</p>

        <h3 id="onmouseleave"   >
          <a href="#onmouseleave" class="heading-link"><i class="fas fa-link"></i></a>onmouseleave</h3>
      <p>当鼠标指针移出元素时触发</p>

        <h3 id="onmouseup"   >
          <a href="#onmouseup" class="heading-link"><i class="fas fa-link"></i></a>onmouseup</h3>
      <p>鼠标按键被松开。</p>

        <h2 id="五、DOM事件-键盘事件"   >
          <a href="#五、DOM事件-键盘事件" class="heading-link"><i class="fas fa-link"></i></a>五、DOM事件-键盘事件</h2>
      
        <h3 id="onkeydown"   >
          <a href="#onkeydown" class="heading-link"><i class="fas fa-link"></i></a>onkeydown</h3>
      <p>某个键盘按键被按下。    </p>

        <h3 id="onkeypress"   >
          <a href="#onkeypress" class="heading-link"><i class="fas fa-link"></i></a>onkeypress</h3>
      <p>某个键盘按键被按下并松开。</p>

        <h3 id="onkeyup"   >
          <a href="#onkeyup" class="heading-link"><i class="fas fa-link"></i></a>onkeyup</h3>
      <p>某个键盘按键被松开。</p>

        <h2 id="六、Console-对象"   >
          <a href="#六、Console-对象" class="heading-link"><i class="fas fa-link"></i></a>六、Console 对象</h2>
      
        <h3 id="console-log"   >
          <a href="#console-log" class="heading-link"><i class="fas fa-link"></i></a>console.log()</h3>
      <p>控制台输出一条信息</p>

        <h3 id="console-time"   >
          <a href="#console-time" class="heading-link"><i class="fas fa-link"></i></a>console.time()</h3>
      <p>计时器，开始计时间，与 timeEnd() 联合使用，用于算出一个操作所花费的准确时间。</p>

        <h3 id="console-timeEnd"   >
          <a href="#console-timeEnd" class="heading-link"><i class="fas fa-link"></i></a>console.timeEnd()</h3>
      <p>计时结束</p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux入门之常用命令用法解析</title>
    <url>/2020/04/03/Linux%E5%85%A5%E9%97%A8%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E7%94%A8%E6%B3%95%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[
        <h2 id="常用命令"   >
          <a href="#常用命令" class="heading-link"><i class="fas fa-link"></i></a>常用命令</h2>
      
        <h3 id="ls"   >
          <a href="#ls" class="heading-link"><i class="fas fa-link"></i></a>ls</h3>
      <p>意思：查看路径（list-罗列）<br>用法：<br>  ls [参数][文件名]</p>
<p>  -a：显示所有文件与目录<br>  -l：除文件名称外，亦将文件型态、权限、拥有者、文件大小等资讯详细列出</p>
<p>例子：</p>
<ul>
<li><code>ls -a 路径</code></li>
<li><code>ls -l 路径</code></li>
<li><code>ls -al 路径</code></li>
</ul>
<a id="more"></a>


        <h3 id="cat"   >
          <a href="#cat" class="heading-link"><i class="fas fa-link"></i></a>cat</h3>
      <p>意思：显示或把多个文本文件连接起来–可以预览文件<br>用法：<br>  cat [参数][文件名]<br>例子：<br>  cat 文件</p>

        <h3 id="mv"   >
          <a href="#mv" class="heading-link"><i class="fas fa-link"></i></a>mv</h3>
      <p>意思：移动文件（move-移动）<br>用法：<br>  mv [源文件][目标文件]<br>例子：<br>  mv 文件名 文件名 — 将源文件改名为目标文件名<br>  mv 文件名 目录名 — 将文件移动到目标目录</p>

        <h3 id="touch"   >
          <a href="#touch" class="heading-link"><i class="fas fa-link"></i></a>touch</h3>
      <p>意思：用于修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件。<br>用法：<br>  touch [参数][文件]</p>
<p>  -a 改变档案的读取时间记录。<br>  -version 列出版本讯息。</p>
<p>例子：<br>  touch 1.txt </p>

        <h3 id="tree"   >
          <a href="#tree" class="heading-link"><i class="fas fa-link"></i></a>tree</h3>
      <p>意思：查看目录结构<br>用法：tree [参数][文件]<br>例子：<br>  tree 文件名</p>

        <h3 id="rm"   >
          <a href="#rm" class="heading-link"><i class="fas fa-link"></i></a>rm</h3>
      <p>意思：删除文件（remove）<br>用法：rm [参数][文件]<br>  -f 强制删除<br>  -r 递归删除<br>例子：</p>
<ul>
<li>删除文件  <code>rm 文件路径</code></li>
<li>强制删除文件  <code>rm -f 文件路径</code></li>
<li>删除目录  <code>rm -r 目录路径</code></li>
<li>强制删除目录  <code>rm -rf 目录路径</code></li>
</ul>

        <h3 id="pwd"   >
          <a href="#pwd" class="heading-link"><i class="fas fa-link"></i></a>pwd</h3>
      <p>意思：显示当前目录<br>用法：pwd<br>例子：pwd</p>

        <h3 id="mkdir"   >
          <a href="#mkdir" class="heading-link"><i class="fas fa-link"></i></a>mkdir</h3>
      <p>意思：创建目录<br>用法：mkdir [参数][目录名]<br>例子：</p>
<ul>
<li>创建目录  <code>mdir 目录名</code></li>
<li>创建目录  <code>mkdir -p 目录路径</code></li>
</ul>

        <h3 id="cd"   >
          <a href="#cd" class="heading-link"><i class="fas fa-link"></i></a>cd</h3>
      <p>意思：进入目录    (change directory)<br>用法：cd [目录名]<br>例子：<br>  cd 目录名</p>

        <h3 id="echo"   >
          <a href="#echo" class="heading-link"><i class="fas fa-link"></i></a>echo</h3>
      <p>意思：在显示器上显示一段文字，一般起到一个提示的作用。<br>用法：echo [ -n ] 字符串<br>例子：</p>
<ul>
<li>创建文件    <code>echo &#39;1&#39; &gt; 文件路径</code></li>
<li>强制创建文件    <code>echo &#39;1&#39; &gt;! 文件路径</code></li>
<li>追加文件内容    <code>echo &#39;1&#39; &gt;&gt; 文件路径</code></li>
</ul>

        <h3 id="ln"   >
          <a href="#ln" class="heading-link"><i class="fas fa-link"></i></a>ln</h3>
      <p>意思：建立软链接<br>用法：ln [参数] [真实文件][链接]<br>例子：<br>  ln -s 真实文件 链接</p>

        <h3 id="curl"   >
          <a href="#curl" class="heading-link"><i class="fas fa-link"></i></a>curl</h3>
      <p>意思：下载文件<br>用法：curl [参数] [网站] [存储目录]<br>例子：<br>  curl -L <span class="exturl"><a class="exturl__link"   href="https://www.baidu.com"  target="_blank" rel="noopener">https://www.baidu.com</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> &gt; baidu.html</p>

        <h3 id="wget"   >
          <a href="#wget" class="heading-link"><i class="fas fa-link"></i></a>wget</h3>
      <p>意思：wget是linux上的命令行的下载工具<br>用法：wget [参数列表] URL<br>例子：<br>  拷贝网页<code>wget -p -H -e robots=off https://www.baidu.com (Windows 不支持 wget)</code></p>

        <h3 id="find"   >
          <a href="#find" class="heading-link"><i class="fas fa-link"></i></a>find</h3>
      <p>意思：用来在指定目录下查找文件<br>用法：find [起始目录] 寻找条件 操作<br>例子：ind /-name yum.conf</p>

        <h3 id="其他命令"   >
          <a href="#其他命令" class="heading-link"><i class="fas fa-link"></i></a>其他命令</h3>
      <ul>
<li>磁盘占用 <code>df -kh</code></li>
<li>当前目录大小    <code>du -sh .</code></li>
<li>各文件大小    <code>du -h</code></li>
</ul>

        <h2 id="explainshell-com"   >
          <a href="#explainshell-com" class="heading-link"><i class="fas fa-link"></i></a>explainshell.com</h2>
      <p>这是一个解析Linux命令的网站，只要将要解析的命令输入进去，便可得到相关具体解析。推荐给大伙用用。</p>

        <h2 id="参考资料"   >
          <a href="#参考资料" class="heading-link"><i class="fas fa-link"></i></a>参考资料</h2>
      <p><span class="exturl"><a class="exturl__link"   href="https://www.runoob.com/linux/linux-command-manual.html"  target="_blank" rel="noopener">Linux 命令大全</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【HTTP】HTTP请求与响应,curl命令知识</title>
    <url>/2020/04/03/%E3%80%90HTTP%E3%80%91HTTP%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94%EF%BC%8Ccurl%E5%91%BD%E4%BB%A4%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[
        <h2 id="一、HTTP请求"   >
          <a href="#一、HTTP请求" class="heading-link"><i class="fas fa-link"></i></a>一、HTTP请求</h2>
      
        <h3 id="1、HTTP请求格式"   >
          <a href="#1、HTTP请求格式" class="heading-link"><i class="fas fa-link"></i></a>1、HTTP请求格式</h3>
      <p>1 动词路径协议/版本<br>2 Key1: value1<br>2 Key2: value2<br>2 Key3: value3<br>2 Content-Type: application/x-www-form-urlencoded<br>2 Host: <span class="exturl"><a class="exturl__link"   href="http://www.baidu.com"  target="_blank" rel="noopener">www.baidu.com</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br>2 User-Agent: curl/7.54.0<br>3<br>4 要上传的数据</p>
<p>请求最多包含四部分，最少包含三部分。（也就是说第四部分可以为空）<br>第三部分永远都是一个回车（\n）<br>动词有 <em>GET POST PUT PATCH DELETE HEAD OPTIONS</em> 等<br>这里的路径包括「查询参数」，但不包括「锚点」<br>如果你没有写路径，那么路径默认为 /<br>第 2 部分中的 Content-Type 标注了第 4 部分的格式</p>
<a id="more"></a>


        <h3 id="2、HTTP请求组成格式"   >
          <a href="#2、HTTP请求组成格式" class="heading-link"><i class="fas fa-link"></i></a>2、HTTP请求组成格式</h3>
      <p>实践命令<code>curl -X POST -s -v -H &quot;hao123: xxx&quot; -- &quot;https://www.baidu.com&quot;</code><br>返回如下</p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">&gt; POST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">&gt; Host: www.baidu.com</span><br><span class="line">&gt; User-Agent: curl&#x2F;7.54.0</span><br><span class="line">&gt; Accept: *&#x2F;*</span><br><span class="line">&gt; hao123: xxx</span><br><span class="line">&gt;</span><br></pre></td></tr></table></div></figure>


        <h3 id="3、在Chrome-发请求"   >
          <a href="#3、在Chrome-发请求" class="heading-link"><i class="fas fa-link"></i></a>3、在Chrome 发请求</h3>
      <ul>
<li>右键打开打开 Network</li>
<li>地址栏输入网址</li>
<li>在 Network 点击，查看 request，点击「view source」</li>
<li>就可以看到请求的前三部分了</li>
<li>在 FormData 或 Payload 里面可以看到请求的第四部分</li>
</ul>

        <h2 id="二、HTTP响应"   >
          <a href="#二、HTTP响应" class="heading-link"><i class="fas fa-link"></i></a>二、HTTP响应</h2>
      
        <h3 id="1、HTTP响应格式"   >
          <a href="#1、HTTP响应格式" class="heading-link"><i class="fas fa-link"></i></a>1、HTTP响应格式</h3>
      <p>1 协议/版本号状态码状态解释<br>2 Key1: value1<br>2 Key2: value2<br>2 Content-Length: 17931<br>2 Content-Type: text/html<br>3<br>4 要下载的内容</p>
<p>第 2 部分中的 Content-Type 标注了第 4 部分的格式<br>第 2 部分中的 Content-Type 遵循 MIME 规范</p>

        <h3 id="2、状态码"   >
          <a href="#2、状态码" class="heading-link"><i class="fas fa-link"></i></a>2、状态码</h3>
      <ul>
<li>1xx 不常用</li>
<li>2xx 表示成功，如：200，203</li>
<li>3xx 表示跳转，如：301永久跳转，302临时跳转，304同上次给的一样</li>
<li>4xx 表示客户端错误，如：404</li>
<li>5xx 表示服务器错误，如：502</li>
</ul>

        <h3 id="3、HTTP响应组成格式"   >
          <a href="#3、HTTP响应组成格式" class="heading-link"><i class="fas fa-link"></i></a>3、HTTP响应组成格式</h3>
      <p>实践命令<code>curl -X POST -s -v -H &quot;hao123: xxx&quot; -- &quot;https://www.baidu.com&quot;</code><br>返回如下</p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">&lt; HTTP&#x2F;1.1 302 Found</span><br><span class="line">&lt; Connection: Keep-Alive</span><br><span class="line">&lt; Content-Length: 17931</span><br><span class="line">&lt; Content-Type: text&#x2F;html</span><br><span class="line">&lt; Date: Sun, 24 Nov 2019 07:25:14 GMT</span><br><span class="line">&lt; Etag: &quot;54d9748e-460b&quot;</span><br><span class="line">&lt; Server: bfe&#x2F;1.0.8.18</span><br><span class="line">&lt;</span><br><span class="line">&lt; 要下载的内容（太多，不展示）</span><br></pre></td></tr></table></div></figure>


        <h3 id="4、在Chrome-查看响应"   >
          <a href="#4、在Chrome-查看响应" class="heading-link"><i class="fas fa-link"></i></a>4、在Chrome 查看响应</h3>
      <ul>
<li>右键打开打开 Network</li>
<li>地址栏输入网址</li>
<li>在 Network 点击，选中第一个响应，查看 Response Headers，点击「view source」</li>
<li>就可以看到响应的前两部分</li>
<li>查看 Response 或者 Preview，就看到响应的第 4 部分</li>
</ul>

        <h2 id="curl命令相关知识"   >
          <a href="#curl命令相关知识" class="heading-link"><i class="fas fa-link"></i></a>curl命令相关知识</h2>
      <p>curl命令是一个利用URL规则在命令行下工作的文件传输工具。它支持文件的上传和下载，所以是综合传输工具，但按传统，习惯称curl为下载工具。</p>
<p>例子：<code>curl -X POST -s -v -H &quot;hao123: xxx&quot; -- &quot;https://www.baidu.com&quot;</code><br>-H:–header 添加 HTTP 请求的标头。如：”hao123: xxx”<br>-s:–silent 指定只输出错误信息，通常与-s一起使用<br>-v:–verbose 输出通信的整个过程，用于调试。<br>-X：指定 HTTP 请求的方法。如：POST </p>
<p>详细教程请看<span class="exturl"><a class="exturl__link"   href="https://www.ruanyifeng.com/blog/2019/09/curl-reference.html"  target="_blank" rel="noopener">阮一峰的curl 的用法指南</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>【JavaScript】JavaScript操作请求与响应</title>
    <url>/2020/04/03/%E3%80%90JavaScript%E3%80%91JavaScript%E6%93%8D%E4%BD%9C%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94/</url>
    <content><![CDATA[
        <h2 id="一、请求的组成部分"   >
          <a href="#一、请求的组成部分" class="heading-link"><i class="fas fa-link"></i></a>一、请求的组成部分</h2>
      <ul>
<li>第一部分 GET /xxx HTTP/1.1</li>
<li>第二部分 HOST:examlp.com:8002</li>
<li>第二部分 Content-Type:appliction/x-www-url-encoded</li>
<li>第三部分 </li>
<li>第四部分 要下载的内容
        <h2 id="二、JavaScript操作请求"   >
          <a href="#二、JavaScript操作请求" class="heading-link"><i class="fas fa-link"></i></a>二、JavaScript操作请求</h2>
      
        <h3 id="2-1-请求的第一部分-用XMLHttpRequest-open-设置"   >
          <a href="#2-1-请求的第一部分-用XMLHttpRequest-open-设置" class="heading-link"><i class="fas fa-link"></i></a>2.1 请求的第一部分 用XMLHttpRequest.open()设置</h3>
      <blockquote>
<p>XMLHttpRequest.open() 方法初始化一个请求。该方法要从JavaScript代码使用；从原生代码初始化一个请求，使用openRequest()替代。</p>
</blockquote>
</li>
</ul>
<p>例子</p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line">request.open(<span class="string">'get'</span>,<span class="string">'http:examlp.com:8002/xxx'</span>)</span><br></pre></td></tr></table></div></figure>

<p><span class="exturl"><a class="exturl__link"   href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/open"  target="_blank" rel="noopener">XMLHttpRequest.open()</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<a id="more"></a>


        <h3 id="2-2-请求的第二部分-用XMLHttpRequest-setRequestHeader-设置"   >
          <a href="#2-2-请求的第二部分-用XMLHttpRequest-setRequestHeader-设置" class="heading-link"><i class="fas fa-link"></i></a>2.2 请求的第二部分 用XMLHttpRequest.setRequestHeader()设置</h3>
      
        <h4 id="JS可以设置任意的请求header吗？"   >
          <a href="#JS可以设置任意的请求header吗？" class="heading-link"><i class="fas fa-link"></i></a>JS可以设置任意的请求header吗？</h4>
      <blockquote>
<p>mdn :XMLHttpRequest.setRequestHeader() 是设置HTTP请求头部的方法。此方法必须在  open() 方法和 send()   之间调用。如果多次对同一个请求头赋值，只会生成一个合并了多个值的请求头。</p>
</blockquote>
<p><span class="exturl"><a class="exturl__link"   href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/setRequestHeader"  target="_blank" rel="noopener">XMLHttpRequest.setRequestHeader()</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>在server.js设置setRequestHeader，然后运行js打开chrome就看到自己设置的请求头，如下</p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line">request.open(<span class="string">'get'</span>,<span class="string">'/xxx'</span>) </span><br><span class="line">request.setRequestHeader(<span class="string">'frank'</span>,<span class="string">'18'</span>)</span><br><span class="line">request.send()</span><br></pre></td></tr></table></div></figure>

<p><img src="https://i.loli.net/2020/03/02/JNxeyfQVrzOAwFM.png" alt="setrequestheader01.png"></p>

        <h3 id="2-3-请求的第三部分-回车-不需要设置"   >
          <a href="#2-3-请求的第三部分-回车-不需要设置" class="heading-link"><i class="fas fa-link"></i></a>2.3 请求的第三部分 回车 不需要设置</h3>
      
        <h3 id="2-4-请求的第四部分-用XMLHttpRequest-send-设置"   >
          <a href="#2-4-请求的第四部分-用XMLHttpRequest-send-设置" class="heading-link"><i class="fas fa-link"></i></a>2.4 请求的第四部分 用XMLHttpRequest.send()设置</h3>
      <p>js set  request body</p>
<blockquote>
<p>mdn: XMLHttpRequest.send() 方法用于发送 HTTP 请求。如果是异步请求（默认为异步请求），则此方法会在请求发送后立即返回；如果是同步请求，则此方法直到响应到达后才会返回。XMLHttpRequest.send() 方法接受一个可选的参数，其作为请求主体；如果请求方法是 GET 或者 HEAD，则应将请求主体设置为 null。</p>
</blockquote>
<blockquote>
<p> XMLHttpRequest.send(body)</p>
</blockquote>
<p><span class="exturl"><a class="exturl__link"   href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/send"  target="_blank" rel="noopener">XMLHttpRequest.send()</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>例子如下</p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line">request.open(<span class="string">'get'</span>,<span class="string">'/xxx'</span>) </span><br><span class="line">request.setRequestHeader(<span class="string">'frank'</span>,<span class="string">'18'</span>)</span><br><span class="line">request.send(<span class="string">'我偏要设置request第四部分'</span>)</span><br></pre></td></tr></table></div></figure>

<p>在Chrome没有展示，是因为Chrome认为get请求理论上是没有Request.body,但是这个只是一个约定俗成而已，没有明令禁止，如果要看到请求的第四部分，不要用get请求</p>
<p>例子如下</p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line">request.open(<span class="string">'POST'</span>,<span class="string">'/xxx'</span>) </span><br><span class="line">request.setRequestHeader(<span class="string">'frank'</span>,<span class="string">'18'</span>)</span><br><span class="line">request.send(<span class="string">'我偏要设置request第四部分'</span>)</span><br></pre></td></tr></table></div></figure>

<p><img src="https://i.loli.net/2020/03/02/jEflIY7crzdyN1h.jpg" alt="setrequestbody01.jpeg"></p>
<p>Request payload就是请求体的意思</p>

        <h4 id="2-4-1-不允许设置USer-Agent"   >
          <a href="#2-4-1-不允许设置USer-Agent" class="heading-link"><i class="fas fa-link"></i></a>2.4.1 不允许设置USer-Agent</h4>
      <p>因为浏览器安全问题，不给与设置<br>consloe报错代码 <code>Refused to set unsafe header &quot;User-Agent&quot;</code></p>

        <h4 id="2-4-2-设置Content-Type"   >
          <a href="#2-4-2-设置Content-Type" class="heading-link"><i class="fas fa-link"></i></a>2.4.2 设置Content-Type</h4>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line">request.open(<span class="string">'POST'</span>,<span class="string">'/xxx'</span>) </span><br><span class="line">request.setRequestHeader(<span class="string">'frank'</span>,<span class="string">'18'</span>)</span><br><span class="line">request.setRequestHeader(<span class="string">'Content-Type'</span>,<span class="string">'x-www-form-urlencoded'</span>)</span><br><span class="line">request.send(<span class="string">'我偏要设置request第四部分'</span>)</span><br></pre></td></tr></table></div></figure>


<p> <img src="https://i.loli.net/2020/03/02/rJiGWvuhjg1faxX.png" alt="setcontentType01.png"></p>

        <h2 id="三、-响应的组成部分"   >
          <a href="#三、-响应的组成部分" class="heading-link"><i class="fas fa-link"></i></a>三、 响应的组成部分</h2>
      <ul>
<li>第一部分 协议/版本号状态码状态解释</li>
<li>第二部分 Key1: value1</li>
<li>第二部分 Key2: value2</li>
<li>第二部分 Content-Length: 17931</li>
<li>第二部分 Content-Type: text/html</li>
<li>第三部分</li>
<li>第四部分 要下载的内容</li>
</ul>
 <figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line"> HTTP&#x2F;1.1 200 OK</span><br><span class="line"> Content-Type:text&#x2F;html</span><br><span class="line"> </span><br><span class="line">&lt;!DOCTYPE html&gt;&lt;html&gt;.....&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></div></figure>



        <h2 id="四、-获取响应的方法"   >
          <a href="#四、-获取响应的方法" class="heading-link"><i class="fas fa-link"></i></a>四、 获取响应的方法</h2>
      <p> js get response header</p>
<blockquote>
<p>XMLHttpRequest.getAllResponseHeaders() 方法返回所有的响应头，以 CRLF 分割的字符串，或者 null 如果没有收到任何响应。 注意： 对于复合请求 （ multipart requests ），这个方法返回当前请求的头部，而不是最初的请求的头部。</p>
</blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/getAllResponseHeaders" target="_blank" rel="noopener"><span class="exturl"><a class="exturl__link"   href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/getAllResponseHeaders"  target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/getAllResponseHeaders</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></a></p>
<p>例子如下</p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &lt; <span class="number">300</span>)&#123;</span><br><span class="line">consloe.log(request.getAllResponseHeaders())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>
<p><img src="https://i.loli.net/2020/03/02/82hoXQ1dqUHAmYG.png" alt="response01.png"></p>

        <h3 id="4-1-响应的第一部分-可以用XMLHttpRequest-statusText来获取"   >
          <a href="#4-1-响应的第一部分-可以用XMLHttpRequest-statusText来获取" class="heading-link"><i class="fas fa-link"></i></a>4.1 响应的第一部分 可以用XMLHttpRequest.statusText来获取</h3>
      <p> js get response message</p>
<blockquote>
<p>只读属性 XMLHttpRequest.statusText 返回了XMLHttpRequest 请求中由服务器返回的一个DOMString 类型的文本信息，这则信息中也包含了响应的数字状态码。不同于使用一个数字来指示的状态码XMLHTTPRequest.status，这个属性包含了返回状态对应的文本信息，例如”OK”或是”Not Found”。如果请求的状态readyState的值为”UNSENT”或者”OPENED”，则这个属性的值将会是一个空字符串。</p>
</blockquote>
<p> 如果服务器未明确指定一个状态文本信息，则statusText的值将会被自动赋值为”OK”。<br>例子</p>
<p><span class="exturl"><a class="exturl__link"   href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/statusText"  target="_blank" rel="noopener">XMLHttpRequest.statusText</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(request.readState === <span class="number">4</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(request.status)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p> chrome浏览器consloe打印出<br> ok</p>

        <h3 id="4-2-响应头的第二部分-可以用-XMLHttpRequest-getResponseHeader-获取"   >
          <a href="#4-2-响应头的第二部分-可以用-XMLHttpRequest-getResponseHeader-获取" class="heading-link"><i class="fas fa-link"></i></a>4.2 响应头的第二部分 可以用 XMLHttpRequest.getResponseHeader() 获取</h3>
      
        <h4 id="4-2-1-获取响应头的Content-Type"   >
          <a href="#4-2-1-获取响应头的Content-Type" class="heading-link"><i class="fas fa-link"></i></a>4.2.1 获取响应头的Content-Type</h4>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &lt; <span class="number">300</span>)&#123;</span><br><span class="line">  consloe.log(request.getResponseHeaders(<span class="string">'Content-Type'</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


<p><img src="https://i.loli.net/2020/03/02/ONIV8lsEDXTfrwH.png" alt="response-content-type-01.png"></p>

        <h3 id="4-3-响应头的第三部分-是空格-不用获取"   >
          <a href="#4-3-响应头的第三部分-是空格-不用获取" class="heading-link"><i class="fas fa-link"></i></a>4.3 响应头的第三部分 是空格 不用获取</h3>
      
        <h2 id="4-4-响应头的第四部分-用XMLHttpRequest-responseText获取"   >
          <a href="#4-4-响应头的第四部分-用XMLHttpRequest-responseText获取" class="heading-link"><i class="fas fa-link"></i></a>4.4 响应头的第四部分 用XMLHttpRequest.responseText获取</h2>
      <p> XMLHttpRequest.responseText 在一个请求被发送后，从服务器端返回文本。</p>
<p>例子：<br> <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &lt; <span class="number">300</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(request.responseText)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure></p>

        <h2 id="五、代码如下"   >
          <a href="#五、代码如下" class="heading-link"><i class="fas fa-link"></i></a>五、代码如下</h2>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line">myButton.addEventListener(<span class="string">'click'</span>,(e)=&gt;&#123;</span><br><span class="line"><span class="keyword">let</span> request = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  request.open(<span class="string">'get'</span>,<span class="string">'http:examlp.com:8002/xxx'</span>) <span class="comment">//配置request</span></span><br><span class="line">  request.send()</span><br><span class="line">  request.onreadstatechange = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(request.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'请求响应都完毕了'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(request.status)</span><br><span class="line">    <span class="keyword">if</span>(request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &lt; <span class="number">300</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'说明请求成功'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> request.responseText)</span><br><span class="line">    <span class="built_in">console</span>.log(request.responseText)</span><br><span class="line">    <span class="keyword">let</span> string = request.responseText</span><br><span class="line">    <span class="comment">//把符号JSON语法的字符串转换成JS对应的值</span></span><br><span class="line">    <span class="keyword">let</span> object = <span class="built_in">window</span>.JSON.pares(string)</span><br><span class="line">    <span class="comment">//JSON.parse 是浏览器提高的</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> object)</span><br><span class="line">    <span class="built_in">console</span>.log(object)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'object.note'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(object.note)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.status &gt;= <span class="number">400</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'说明请求失败'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure>



        <h2 id="六、总结"   >
          <a href="#六、总结" class="heading-link"><i class="fas fa-link"></i></a>六、总结</h2>
      <p>通过AJXA，除了部分因为安全原因不给用设置完，我们可以任意设置请求与响应的四部分的所有数据。</p>
<p>这就是AJAX的厉害之处</p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>【JavaScript】MVC知识概括</title>
    <url>/2020/04/03/%E3%80%90JavaScript%E3%80%91MVC%E7%9F%A5%E8%AF%86%E6%A6%82%E6%8B%AC/</url>
    <content><![CDATA[<p>CRM-使用别人的东西</p>
<ul>
<li>Copy 抄代码</li>
<li>Run  运行代码</li>
<li>Modify  修改代码</li>
</ul>

        <h2 id="一、MAC的前提：模块化"   >
          <a href="#一、MAC的前提：模块化" class="heading-link"><i class="fas fa-link"></i></a>一、MAC的前提：模块化</h2>
      
        <h3 id="1-1-什么是MVC"   >
          <a href="#1-1-什么是MVC" class="heading-link"><i class="fas fa-link"></i></a>1.1 什么是MVC</h3>
      <ul>
<li>M:Model 模式</li>
<li>v:View  视图</li>
<li>C:Controller 控制器</li>
</ul>

        <h3 id="1-2-问题：怎么解决代码一写就忘记？"   >
          <a href="#1-2-问题：怎么解决代码一写就忘记？" class="heading-link"><i class="fas fa-link"></i></a>1.2 问题：怎么解决代码一写就忘记？</h3>
      <ul>
<li>模块化编程：一块代码，只操作一种功能<ul>
<li>例如：将混乱的一个js文件，按功能分为不同的js文件</li>
</ul>
</li>
<li>MVC的前提就是代码要有模块化</li>
</ul>

        <h2 id="二、立即执行函数的使用"   >
          <a href="#二、立即执行函数的使用" class="heading-link"><i class="fas fa-link"></i></a>二、立即执行函数的使用</h2>
      <ul>
<li>判断代码乱不乱—代码多就乱、代码少就不乱</li>
<li>怎么减少代码又兼顾功能——引入MVC思想</li>
</ul>
<a id="more"></a>


        <h3 id="2-1-问题：一个变量用var声明会自动变成全局变量，如何解决这个问题？"   >
          <a href="#2-1-问题：一个变量用var声明会自动变成全局变量，如何解决这个问题？" class="heading-link"><i class="fas fa-link"></i></a>2.1 问题：一个变量用var声明会自动变成全局变量，如何解决这个问题？</h3>
      <ul>
<li>全局变量可以互相影响</li>
<li>解决方法：不要使用全局变量，使用局部变量</li>
</ul>

        <h4 id="2-1-在ES5，使用局部变量方法"   >
          <a href="#2-1-在ES5，使用局部变量方法" class="heading-link"><i class="fas fa-link"></i></a>2.1 在ES5，使用局部变量方法</h4>
      <p> 只要函数里面才有局部变量，于是声明一个<code>function xxx</code>，然后<code>xxx.call()</code>，这个时候<code>xxx</code>是全局变量（全局函数），所以不能给这个函数名字，所以<code>function().call()</code>,但是chrome会报错，语法错误</p>

        <h5 id="2-1-1-两个方法不报错-加个！和加个-包裹函数"   >
          <a href="#2-1-1-两个方法不报错-加个！和加个-包裹函数" class="heading-link"><i class="fas fa-link"></i></a>2.1.1 两个方法不报错  加个！和加个()包裹函数</h5>
      <ul>
<li><code>！function().call()</code></li>
<li>虽然<code>！</code>会改变匿名函数的返回值，但是这里我们不关心函数的返回值，所以没关系</li>
<li><code>(function().call())</code></li>
<li>但是有个bug 函数前面加个数字就会 被迫调用  不推荐使用</li>
</ul>

        <h4 id="2-2-es5使用局部变量方法"   >
          <a href="#2-2-es5使用局部变量方法" class="heading-link"><i class="fas fa-link"></i></a>2.2 es5使用局部变量方法</h4>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//错误如下</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//单用一个&#123;&#125;是不能使用到局部变量，因为var会变量提升</span></span><br><span class="line">    <span class="comment">//var会变量提升到当前函数或者是全局作用域最顶端上</span></span><br><span class="line">    <span class="comment">//虽然java和C++可以，但是JavaScript就是不能</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"> <span class="comment">//成功如下 方法一 </span></span><br><span class="line"> ！<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//用一个函数函数包裹，然后call调用</span></span><br><span class="line"> &#125;.call()</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//成功如下 方法二 </span></span><br><span class="line"> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123; </span><br><span class="line">  <span class="comment">//用一个函数函数包裹，然后call调用 ,有bug不推荐使用</span></span><br><span class="line"> &#125;.call())</span><br></pre></td></tr></table></div></figure>




        <h2 id="三、闭包的使用"   >
          <a href="#三、闭包的使用" class="heading-link"><i class="fas fa-link"></i></a>三、闭包的使用</h2>
      
        <h3 id="3-1-前置问题：如果采用了上面的局部变量方法，若是确实要两个模块要交互的话，怎么解决？"   >
          <a href="#3-1-前置问题：如果采用了上面的局部变量方法，若是确实要两个模块要交互的话，怎么解决？" class="heading-link"><i class="fas fa-link"></i></a>3.1 前置问题：如果采用了上面的局部变量方法，若是确实要两个模块要交互的话，怎么解决？</h3>
      
        <h3 id="3-2-一个例子"   >
          <a href="#3-2-一个例子" class="heading-link"><i class="fas fa-link"></i></a>3.2 一个例子</h3>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> accessor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//变量</span></span><br><span class="line">    <span class="keyword">var</span> person =  &#123;</span><br><span class="line">        name: <span class="string">'tony'</span>,</span><br><span class="line">        age: <span class="number">17</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="comment">//匿名函数，用了外面的变量,这person和这个匿名函数就是闭包</span></span><br><span class="line">        person.age += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> person.age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//这是一个返回了匿名函数的函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> growUp = accessor.call()</span><br><span class="line"></span><br><span class="line">growUp()</span><br></pre></td></tr></table></div></figure>



        <h3 id="3-3-闭包是什么"   >
          <a href="#3-3-闭包是什么" class="heading-link"><i class="fas fa-link"></i></a>3.3 闭包是什么</h3>
      <p>  一个函数，访问了外面的变量,这变量和这个函数就是闭包。</p>
<p>  闭包有与立即执行函数一起使用，没有立即执行函数就没有闭包。</p>

        <h3 id="3-4-闭包的作用"   >
          <a href="#3-4-闭包的作用" class="heading-link"><i class="fas fa-link"></i></a>3.4 闭包的作用</h3>
      <ol>
<li>闭包用来对数据进行隐藏细节</li>
<li>进行访问控制</li>
</ol>

        <h3 id="3-5-问题：如果没有立即执行函数，上面例子会出现什么？"   >
          <a href="#3-5-问题：如果没有立即执行函数，上面例子会出现什么？" class="heading-link"><i class="fas fa-link"></i></a>3.5 问题：如果没有立即执行函数，上面例子会出现什么？</h3>
      <p>  立即执行函数是隔离作用域的，如果没有立即执行函数，这个闭包毫无意义。因为var的person变量就是全局变量，没有必要封装它。<br>量</p>
<ul>
<li>立即执行函数使得person无法被外部访问</li>
<li>闭包使得匿名函数可以操作person</li>
<li>window.tonyGrowUp 保存了匿名函数的肚子鼓</li>
<li>任何地方都可以使用window.tonyGrowUp</li>
</ul>
<p>上面四点可以推论出:</p>
<ul>
<li>任何地方都可以使用window.tonyGrowUp操作person，但是不能直接访问person</li>
</ul>

        <h2 id="四、MVC的V和C"   >
          <a href="#四、MVC的V和C" class="heading-link"><i class="fas fa-link"></i></a>四、MVC的V和C</h2>
      
        <h3 id="4-1-view的作用"   >
          <a href="#4-1-view的作用" class="heading-link"><i class="fas fa-link"></i></a>4.1 view的作用</h3>
      <p>view作用是告诉js，页面中的哪些代码块是我这个模块对应的东西</p>

        <h3 id="4-2-Controller"   >
          <a href="#4-2-Controller" class="heading-link"><i class="fas fa-link"></i></a>4.2 Controller</h3>
      <p>Controller作用是控制视图(view)</p>
<p>一个Controller事件只操作一个事件。</p>

        <h3 id="4-3-MVC的作用"   >
          <a href="#4-3-MVC的作用" class="heading-link"><i class="fas fa-link"></i></a>4.3 MVC的作用</h3>
      <p>以前每有一个情况写一个东西，导致结构都不相同，而现在有了MVC之后，结构一致。都有一个view、controller。</p>
<p>controller去操作view</p>
<p>所有的代码都一样</p>

        <h3 id="4-4-this"   >
          <a href="#4-4-this" class="heading-link"><i class="fas fa-link"></i></a>4.4 this</h3>
      <p>this只有转变成call，才能确定</p>
<p>箭头函数没有this</p>
<p>箭头函数内外，this不变</p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//chrome console控制操作</span></span><br><span class="line"><span class="keyword">this</span> <span class="comment">//返回window对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">//返回undefined</span></span><br><span class="line"></span><br><span class="line">f.call(&#123;<span class="attr">name</span>:<span class="string">'tony'</span>&#125;) <span class="comment">//返回还是window对象</span></span><br><span class="line"><span class="comment">//箭头函数不存在this</span></span><br></pre></td></tr></table></div></figure>

<p><img src="https://i.loli.net/2020/03/05/5AKV8zYHuSM9PIv.png" alt="mvc-this01.png"></p>

        <h2 id="五、MVC的Model"   >
          <a href="#五、MVC的Model" class="heading-link"><i class="fas fa-link"></i></a>五、MVC的Model</h2>
      <p>v 只负责看见的东西<br>c 负责将二者组合<br>m 跟数据相关的操作（请求，存数据）</p>

        <h2 id="六、MVC总结"   >
          <a href="#六、MVC总结" class="heading-link"><i class="fas fa-link"></i></a>六、MVC总结</h2>
      <p>MVC就是把代码分成三块</p>
<ul>
<li>第一块 V(view)告诉程序，你的代码长什么样子，或者你的代码在页面的哪一块</li>
<li>第二块 M(Model)你的数据有哪些操作，操作(初始化，获取，保存)</li>
<li>第三 C(Controll)负责其他所有的事情，Controll比较复杂点</li>
<li>这就是MVC</li>
</ul>
<p>总的来说，V就是视图，M是数据，所有相关数据的操作都应该放在model里面，Controll是控制器，它来控制其他所有的代码。</p>
<p>MVC是一种代码组织形式。它不是任何一种框架，也不是任何一种技术。<br>它就是一种组织代码的思想。</p>
<p><img src="https://i.loli.net/2020/03/10/sk4p5SmLcMiRahP.png" alt="mvc01-min.png"></p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>【JavaScript】面向对象编程-全局命名空间&amp;&amp;new是什么</title>
    <url>/2020/04/03/%E3%80%90JavaScript%E3%80%91%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B-%E5%85%A8%E5%B1%80%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4&amp;&amp;new%E6%98%AF%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[
        <h2 id="一、-什么是面向对象？"   >
          <a href="#一、-什么是面向对象？" class="heading-link"><i class="fas fa-link"></i></a>一、 什么是面向对象？</h2>
      <p>在编程里面，面向的意思以什么什么为主。<br>面向对象编程的意思，代码中主要是对象。<br>面向对象不是一个概念，而是一个经验知识。</p>

        <h3 id="1-1-知乎大佬对面向对象概念的解释"   >
          <a href="#1-1-知乎大佬对面向对象概念的解释" class="heading-link"><i class="fas fa-link"></i></a>1.1 知乎大佬对面向对象概念的解释</h3>
      <ul>
<li>把一组数据结构和处理他们的方法组成<code>对象（Object）</code>，</li>
<li>把相同行为的对象归纳为<code>类（class）</code>,</li>
<li>通过类的<code>封装（encapsulation）</code>隐藏内部细节，</li>
<li>通过<code>继承（inheritance）</code>实现类的<code>特化（specialization）/泛化（generalization）</code></li>
<li>通过<code>多态（polymorphism）</code>实现基于对象类型的<code>动态分派（dynamic dispath）</code></li>
</ul>
<a id="more"></a>


        <h3 id="1-2-面向对象的中英与简称"   >
          <a href="#1-2-面向对象的中英与简称" class="heading-link"><i class="fas fa-link"></i></a>1.2 面向对象的中英与简称</h3>
      <p>introduction_to_Object-Oriented<br>面向对象编程  Object Oriented Programming<br>面向对象设计  object-oriented design<br>面向对象编程 OO编程</p>

        <h3 id="1-3-MDN文档对面向对象的解释"   >
          <a href="#1-3-MDN文档对面向对象的解释" class="heading-link"><i class="fas fa-link"></i></a>1.3 MDN文档对面向对象的解释</h3>
      <blockquote>
<p>面向对象编程是用抽象方式创建基于现实世界模型的一种编程模式。它使用先前建立的范例，包括模块化，多态和封装几种技术。今天，许多流行的编程语言（如Java，JavaScript，C＃，C+ +，Python，PHP，Ruby和Objective-C）都支持面向对象编程（OOP）。</p>
<p>相对于「一个程序只是一些函数的集合，或简单的计算机指令列表。」的传统软件设计观念而言，面向对象编程可以看作是使用一系列对象相互协作的软件设计。 <strong>在 OOP 中，每个对象能够接收消息，处理数据和发送消息给其他对象</strong>。每个对象都可以被看作是一个拥有清晰角色或责任的独立小机器。</p>
</blockquote>
<p><span class="exturl"><a class="exturl__link"   href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript"  target="_blank" rel="noopener">JavaScript面向对象简介 - JavaScript | MDN</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h3 id="1-4-术语"   >
          <a href="#1-4-术语" class="heading-link"><i class="fas fa-link"></i></a>1.4 术语</h3>
      
        <h4 id="Namespace-命名空间"   >
          <a href="#Namespace-命名空间" class="heading-link"><i class="fas fa-link"></i></a>Namespace 命名空间</h4>
      <p>  比如<code>window.jQuery = 函数或者对象</code>；<code>window.jquery.ajax=</code>他们都有一个共同的前缀jQuery，jQuery就是一个命名空间。</p>

        <h4 id="Class-类"   >
          <a href="#Class-类" class="heading-link"><i class="fas fa-link"></i></a>Class 类</h4>
      
        <h4 id="Object-对象"   >
          <a href="#Object-对象" class="heading-link"><i class="fas fa-link"></i></a>Object 对象</h4>
      
        <h4 id="Property-属性"   >
          <a href="#Property-属性" class="heading-link"><i class="fas fa-link"></i></a>Property 属性</h4>
      <p> 属性就是对象里面的key：value的每个key就是属性</p>

        <h4 id="Method-方法"   >
          <a href="#Method-方法" class="heading-link"><i class="fas fa-link"></i></a>Method 方法</h4>
      <p>如果一个对象属性是一个函数function()，那么这个function就是method方法。</p>

        <h4 id="Constructor-构造函数"   >
          <a href="#Constructor-构造函数" class="heading-link"><i class="fas fa-link"></i></a>Constructor 构造函数</h4>
      <p>比如：Object()是一个构造函数 Number()是一个构造函数 String()是一个构造函数</p>

        <h4 id="inheritance-继承"   >
          <a href="#inheritance-继承" class="heading-link"><i class="fas fa-link"></i></a>inheritance 继承</h4>
      
        <h4 id="Encapsulation-封装"   >
          <a href="#Encapsulation-封装" class="heading-link"><i class="fas fa-link"></i></a>Encapsulation 封装</h4>
      
        <h4 id="Abstraction-抽象"   >
          <a href="#Abstraction-抽象" class="heading-link"><i class="fas fa-link"></i></a>Abstraction 抽象</h4>
      
        <h4 id="Polymorphism-多态"   >
          <a href="#Polymorphism-多态" class="heading-link"><i class="fas fa-link"></i></a>Polymorphism 多态</h4>
      
        <h3 id="1-5-面向对象的核心"   >
          <a href="#1-5-面向对象的核心" class="heading-link"><i class="fas fa-link"></i></a>1.5 面向对象的核心</h3>
      <p>继承、封装、抽象、多态</p>

        <h2 id="二、javascript-小技巧"   >
          <a href="#二、javascript-小技巧" class="heading-link"><i class="fas fa-link"></i></a>二、javascript 小技巧</h2>
      
        <h3 id="2-1-一个运算符例子"   >
          <a href="#2-1-一个运算符例子" class="heading-link"><i class="fas fa-link"></i></a>2.1 一个运算符例子</h3>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> || <span class="number">2</span> <span class="comment">//这表达式的值是什么？</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//答案：1</span></span><br></pre></td></tr></table></div></figure>

<p>JavaScript 或操作符 且操作符<br><code>a||b</code>，<code>c||d</code>的值基本上不可能是true或false。</p>
<p>这是因为五个false值<code>（null、undefined、0、&#39;&#39;、NaN）</code>,而上面的或与且操作符一般不是falsy或者truy值，所以值是从自身a、b；c、d上选一个值</p>

        <h3 id="2-2-与运算（-amp-amp-）"   >
          <a href="#2-2-与运算（-amp-amp-）" class="heading-link"><i class="fas fa-link"></i></a>2.2 与运算（&amp;&amp;）</h3>
      <p>与是找false值</p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> &amp;&amp; <span class="number">0</span> <span class="comment">//0</span></span><br><span class="line"><span class="number">1</span> &amp;&amp; <span class="number">0</span> &amp;&amp; <span class="number">2</span> <span class="comment">//0</span></span><br><span class="line"><span class="number">1</span> &amp;&amp; <span class="number">0</span> &amp;&amp; <span class="number">2</span> &amp;&amp; <span class="number">3</span>  &amp;&amp; <span class="number">4</span> &amp;&amp; <span class="number">5</span>  <span class="comment">//0</span></span><br><span class="line"><span class="comment">//规律：浏览器会把一个false的值返回出来，后面的运算不看</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> &amp;&amp; <span class="number">0</span> &amp;&amp; <span class="built_in">console</span>.log(<span class="number">3</span>) <span class="comment">//console.log(3)会执行吗？</span></span><br><span class="line"><span class="comment">//答案：不会，直接返回0 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>)<span class="comment">//值是什么？ //undefined</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>&amp;&amp;<span class="number">2</span>&amp;&amp;<span class="number">33</span> <span class="comment">// 3</span></span><br><span class="line"><span class="comment">//规律2：如果与运算中，没有false值，这返回最后一个值。</span></span><br></pre></td></tr></table></div></figure>



        <h3 id="2-3-或运算"   >
          <a href="#2-3-或运算" class="heading-link"><i class="fas fa-link"></i></a>2.3  或运算||</h3>
      <p>或是找真值,只要一个是真就是真，说整个式子是真，则返回第一个真值</p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> || undefeined || <span class="literal">null</span> || <span class="number">1</span>  <span class="comment">// 1 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = b || &#123;&#125; </span><br><span class="line"><span class="comment">//如果b不是一个false值，是一个真值，那么a = b；</span></span><br><span class="line"><span class="comment">//如果b是一个真值，那么a等于空对象&#123;&#125;</span></span><br><span class="line"><span class="comment">//等于下面形式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(b)&#123;</span><br><span class="line">  a = b</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">  a = &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>







<p>三、 <code>var MYAPP = MYAPP || {};</code>是什么意思</p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局命名空间</span></span><br><span class="line"><span class="keyword">var</span> MYAPP = MYAPP || &#123;&#125;;</span><br></pre></td></tr></table></div></figure>

<blockquote>
<p>因为它要确保程序员不乱写代码</p>
</blockquote>

        <h2 id="三、-全局命名空间"   >
          <a href="#三、-全局命名空间" class="heading-link"><i class="fas fa-link"></i></a>三、 全局命名空间</h2>
      
        <h3 id="3-1-理解全局命名空间"   >
          <a href="#3-1-理解全局命名空间" class="heading-link"><i class="fas fa-link"></i></a>3.1 理解全局命名空间</h3>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = &#123;&#125; </span><br><span class="line"><span class="comment">//这是一个危险代码，因为你不知道app之前等于是什么，就采取覆盖app</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//应该用if来写,a是我的一个初始化对象。</span></span><br><span class="line"><span class="keyword">if</span>(app)&#123;</span><br><span class="line">  app = app <span class="comment">//废话 没有什么作用</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  a= <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//所以上面形式就可以简化成</span></span><br><span class="line"><span class="keyword">var</span> app = app || &#123;&#125;</span><br></pre></td></tr></table></div></figure>




        <h3 id="3-2-全局命名空间的作用"   >
          <a href="#3-2-全局命名空间的作用" class="heading-link"><i class="fas fa-link"></i></a>3.2 全局命名空间的作用</h3>
      <p>全局命名空间的作用：以后所以的变量都挂着MYAPP上面,MYAPP包含所以的命名，MYAPP就像一个房间装着所以的属性，所以叫命名空间。</p>
<p>例如<br><code>MYAPP.event ={}</code><br><code>MYAPP.commonMethod={}</code> </p>

        <h2 id="四、new是什么？"   >
          <a href="#四、new是什么？" class="heading-link"><i class="fas fa-link"></i></a>四、new是什么？</h2>
      
        <h3 id="4-1-一个例子"   >
          <a href="#4-1-一个例子" class="heading-link"><i class="fas fa-link"></i></a>4.1 一个例子</h3>
      
        <h4 id="4-1-1-士兵属性与怎么使用士兵"   >
          <a href="#4-1-1-士兵属性与怎么使用士兵" class="heading-link"><i class="fas fa-link"></i></a>4.1.1 士兵属性与怎么使用士兵</h4>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">var</span> 士兵 = &#123;</span><br><span class="line">  ID :<span class="number">1</span>,</span><br><span class="line">  兵种 :<span class="string">"美国大兵"</span></span><br><span class="line">  攻击力 : <span class="number">6</span></span><br><span class="line">  生命值: <span class="number">45</span>,</span><br><span class="line">  行走 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  奔跑 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  死亡 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  防御 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="comment">//怎么使用这个士兵？</span></span><br><span class="line">  兵营.制造（士兵）</span><br></pre></td></tr></table></div></figure>


        <h4 id="4-1-2-多个士兵代码"   >
          <a href="#4-1-2-多个士兵代码" class="heading-link"><i class="fas fa-link"></i></a>4.1.2 多个士兵代码</h4>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果要有100个士兵，是不是重新写100？</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> 士兵<span class="number">2</span> = &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> 士兵<span class="number">3</span> = &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> 士兵<span class="number">4</span> = &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">兵营.制造（士兵<span class="number">2</span>）</span><br><span class="line">兵营.制造（士兵<span class="number">3</span>）</span><br><span class="line">兵营.制造（士兵<span class="number">4</span>）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//为此我们可以用一个循环代码来写</span></span><br><span class="line"><span class="keyword">var</span> 士兵们 = []</span><br><span class="line"><span class="keyword">var</span> 士兵 = &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">  ID :<span class="number">1</span>,</span><br><span class="line">  兵种 :<span class="string">"美国大兵"</span></span><br><span class="line">  攻击力 : <span class="number">6</span></span><br><span class="line">  生命值: <span class="number">45</span>,</span><br><span class="line">  行走 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  奔跑 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  死亡 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  防御 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  士兵们.push(士兵)</span><br><span class="line">&#125;</span><br><span class="line">兵营.批量制造(士兵们)</span><br></pre></td></tr></table></div></figure>



        <h4 id="4-1-3-优化公共代码"   >
          <a href="#4-1-3-优化公共代码" class="heading-link"><i class="fas fa-link"></i></a>4.1.3 优化公共代码</h4>
      <p> 上面循环代码在内存图里面大量重复代码，我们可以声明一个对象包含它们共同的函数</p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 士兵共有属性 = &#123;</span><br><span class="line">  兵种 :<span class="string">"美国大兵"</span></span><br><span class="line">  攻击力 : <span class="number">6</span></span><br><span class="line">  行走 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  奔跑 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  死亡 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  防御 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> 士兵们 = []</span><br><span class="line">  <span class="keyword">var</span> 士兵 = &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">    士兵 = &#123;</span><br><span class="line">      ID：i，<span class="comment">//ID不能重复</span></span><br><span class="line">      生命值：<span class="number">42</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/* 工作不要这样写，因为__proto__不是标准属性*/</span></span><br><span class="line">士兵.__proto__ =  士兵共有属性</span><br><span class="line"></span><br><span class="line">  士兵们.push(士兵)</span><br><span class="line">&#125;</span><br><span class="line">兵营.批量制造(士兵们)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//上面代码还可以优化</span></span><br><span class="line"><span class="keyword">var</span> 士兵共有属性 = &#123;</span><br><span class="line">  兵种 :<span class="string">"美国大兵"</span></span><br><span class="line">  攻击力 : <span class="number">6</span></span><br><span class="line">  行走 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  奔跑 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  死亡 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  防御 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">create</span>士兵(<span class="params">id</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> 士兵 = &#123;</span><br><span class="line">      ID : id:<span class="comment">//ID不能重复</span></span><br><span class="line">      生命值：<span class="number">41</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 工作不要这样写，因为__proto__不是标准属性*/</span></span><br><span class="line">士兵.__proto__ =  士兵共有属性</span><br><span class="line"><span class="keyword">return</span>   士兵</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用如下</span></span><br><span class="line"><span class="keyword">var</span> 士兵们 = []</span><br><span class="line"><span class="keyword">var</span> 士兵</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">  士兵们.push(create士兵(i))</span><br><span class="line">&#125;</span><br><span class="line">兵营.批量制造(士兵们)</span><br><span class="line"></span><br><span class="line"><span class="comment">//这叫模块化</span></span><br></pre></td></tr></table></div></figure>


        <h4 id="4-1-4-解决优化代码的命名问题"   >
          <a href="#4-1-4-解决优化代码的命名问题" class="heading-link"><i class="fas fa-link"></i></a>4.1.4 解决优化代码的命名问题</h4>
      <p>上面代码命名不好<br>没有人知道“士兵共有属性”与“create士兵”有关联<br>如果离开了“士兵共有属性”这个对象，“create士兵”这个函数就失效了,<br>说明这个“create士兵”函数和士兵共有属性”这个对象是有关系的</p>
<p>那怎么处理？<br>把它们放在一起，直接把“士兵共有属性”这个对象作为这个函数“create士兵”的一个属性</p>
<p>但是，没有办法将这个函数“create士兵”作为这个对象“士兵共有属性”的一个属性，这是因为“create士兵”不是共有属性。</p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//var temp = &#123;&#125;</span></span><br><span class="line">  <span class="comment">//this = temp</span></span><br><span class="line">  <span class="comment">//this.__proto__ = create士兵.prototype</span></span><br><span class="line">  <span class="keyword">this</span>.ID = id, </span><br><span class="line">  <span class="keyword">this</span>.生命值 = <span class="number">42</span> <span class="comment">//自有属性</span></span><br><span class="line">  <span class="comment">//return this</span></span><br><span class="line">&#125;</span><br><span class="line">create 士兵.士兵共有属性 = &#123;</span><br><span class="line">  兵种:<span class="string">"美国大兵"</span></span><br><span class="line">  攻击力：<span class="number">5</span></span><br><span class="line">  行走 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  奔跑 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  死亡 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  防御 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> 士兵们 = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++)&#123;</span><br><span class="line">  士兵们.push(<span class="keyword">new</span> create士兵(i))</span><br><span class="line">&#125;</span><br><span class="line">兵营.批量制造(士兵们)</span><br></pre></td></tr></table></div></figure>




        <h4 id="4-1-5-最终优化"   >
          <a href="#4-1-5-最终优化" class="heading-link"><i class="fas fa-link"></i></a>4.1.5 最终优化</h4>
      <p>由于new后面的函数是用来创造对象的，所以没有必要在函数前面再写create </p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 士兵(<span class="params">id</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//var temp = &#123;&#125;</span></span><br><span class="line">  <span class="comment">//this = temp</span></span><br><span class="line">  <span class="comment">//士兵.prototype =&#123;constructor:士兵&#125;</span></span><br><span class="line">  <span class="comment">//this.__proto__ = create士兵.prototype //3</span></span><br><span class="line">  <span class="keyword">this</span>.ID = id, </span><br><span class="line">  <span class="keyword">this</span>.生命值 = <span class="number">42</span> <span class="comment">//自有属性</span></span><br><span class="line">  <span class="comment">//return this</span></span><br><span class="line">&#125;</span><br><span class="line">士兵.prototype.兵种 = <span class="string">"美国大兵"</span></span><br><span class="line">士兵.prototype.攻击力 = <span class="number">5</span></span><br><span class="line">士兵.prototype = &#123;</span><br><span class="line">  <span class="comment">//共有属性</span></span><br><span class="line">  <span class="keyword">constructor</span>:士兵，</span><br><span class="line">  兵种:"美国大兵"</span><br><span class="line">  攻击力：5</span><br><span class="line">  行走 : function()&#123;&#125;</span><br><span class="line">  奔跑 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  死亡 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  防御 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h3 id="4-2-总结"   >
          <a href="#4-2-总结" class="heading-link"><i class="fas fa-link"></i></a>4.2 总结</h3>
      <p>  对象要么是属性，要么是有函数</p>
<p>  new 是给你一个去写一个函数，这个函数可以指定两个东西，一个是自由属性，一个是共有属性。</p>

        <h3 id="4-3-new的过程"   >
          <a href="#4-3-new的过程" class="heading-link"><i class="fas fa-link"></i></a>4.3 new的过程</h3>
      <p>new的过程就是帮程序员操作了4个步骤</p>
<ol>
<li>创建一个临时对象</li>
<li>这个临时对象指向this或者这个this指向这个临时对象</li>
<li>这个this的prototype指向这个函数的prototype</li>
<li>return this</li>
</ol>
<p>一个new等于4句话</p>

        <h3 id="4-4-关于new的约定"   >
          <a href="#4-4-关于new的约定" class="heading-link"><i class="fas fa-link"></i></a>4.4 关于new的约定</h3>
      <p>由于new后面的函数是用来创造对象的，所以没有必要在函数前面再写create。</p>

        <h3 id="4-5-思考"   >
          <a href="#4-5-思考" class="heading-link"><i class="fas fa-link"></i></a>4.5 思考</h3>
      
        <h4 id="4-5-1当写var-object-new-Object-的时候，到底做了什么？"   >
          <a href="#4-5-1当写var-object-new-Object-的时候，到底做了什么？" class="heading-link"><i class="fas fa-link"></i></a>4.5.1当写var object = new Object()的时候，到底做了什么？</h4>
      <p>答: 就是new会给object加上一些自有属性，然后让object.<strong>proto</strong>(object原型)指向Object.prototype</p>
<blockquote>
<p><code>object.__proto___ === Object.prototype</code></p>
</blockquote>
<p>比如我们生成一个var array = new Array(a,b,c),这行代码操作了什么？</p>
<ul>
<li>自有属性0:’a’，1:’b’， 2:’c’;</li>
<li>length:2;</li>
<li>array.<strong>proto</strong> === Array.prototype(指向它构造函数的prototype)，而Array里面又有push、pop等等方法。</li>
<li>Array.prototype.<strong>proto</strong> ==== Object.prototype</li>
</ul>
<p>var fn = new Funciton(‘x’,’y’,’return x+y’)</p>
<ul>
<li>自有属性 length:2</li>
<li>不可见的函数体：’return x+y’</li>
<li>fn.<strong>proto</strong> === Function.prototype</li>
</ul>
<p>Array是一个函数,所以Array.<strong>proto</strong> === Function.prototype。</p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>【JavaScript】自己封装AJXA</title>
    <url>/2020/04/03/%E3%80%90JavaScript%E3%80%91%E8%87%AA%E5%B7%B1%E5%B0%81%E8%A3%85AJXA%20/</url>
    <content><![CDATA[<p>ajax能获取响应头，node.js能设置响应头</p>

        <h2 id="一、前置-TCP知识"   >
          <a href="#一、前置-TCP知识" class="heading-link"><i class="fas fa-link"></i></a>一、前置-TCP知识</h2>
      <ul>
<li>HTML/CSS/JavaScript/JSON是基于HTTP传输</li>
<li>HTTP是基于TCP/IP协议传输</li>
<li>一次请求不是一下子全部给客户端的，要经过“三次握手”，“三次握手”要确定客户服务双方都能请求（request）与响应（response）</li>
<li>先获取响应头，在获取响应头</li>
<li>浏览器是一开始就判断响应的状态（200，404wait），然后下载完全部响应内容。</li>
</ul>

        <h2 id="二、自己封装jQuery-ajax"   >
          <a href="#二、自己封装jQuery-ajax" class="heading-link"><i class="fas fa-link"></i></a>二、自己封装jQuery.ajax</h2>
      
        <h3 id="2-1-window-jQuery-ajax的结构"   >
          <a href="#2-1-window-jQuery-ajax的结构" class="heading-link"><i class="fas fa-link"></i></a>2.1 window.jQuery.ajax的结构</h3>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQuery.ajax = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line"><span class="comment">//代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<a id="more"></a>


        <h3 id="2-2-ajax功能"   >
          <a href="#2-2-ajax功能" class="heading-link"><i class="fas fa-link"></i></a>2.2 ajax功能</h3>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line">request.open()</span><br><span class="line">request.setRequestHeader()</span><br><span class="line">request.send()</span><br><span class="line">reuqest.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ajax功能是将xmlHttprequest的上面四行代码变成一行代码</span></span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">###  2.3 封装window.jQuery </span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> javascript</span><br><span class="line"><span class="built_in">window</span>.jQuery = <span class="function"><span class="keyword">function</span>(<span class="params">nodeOrSelector</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> nondes = &#123;&#125;</span><br><span class="line">  nodes.addClass = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  nodes.html = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> nodes</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">###  2.4 封装window.jQuery.ajax </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> javascript</span><br><span class="line"><span class="built_in">window</span>.jQuery.ajax = <span class="function"><span class="keyword">function</span>(<span class="params">url,method,body,successFn,failFn</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> request = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  request.open(method,url)</span><br><span class="line">  request.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(request.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &gt; <span class="number">300</span> )&#123;</span><br><span class="line">      successFn.call(<span class="literal">undefined</span>,request.responseText)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.status &gt;= <span class="number">400</span> )&#123;</span><br><span class="line">      failFn.call(<span class="literal">undefined</span>，request)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  request.send(body)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.$ = <span class="built_in">window</span>.jQuery</span><br></pre></td></tr></table></div></figure>


        <h3 id="2-5-运用window-jQuery-ajax函数"   >
          <a href="#2-5-运用window-jQuery-ajax函数" class="heading-link"><i class="fas fa-link"></i></a>2.5 运用window.jQuery.ajax函数</h3>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line">myButtons.addEventListener(<span class="string">'click'</span>,(e)=&gt;&#123;</span><br><span class="line">  <span class="built_in">window</span>.jQuery.ajax(</span><br><span class="line">  <span class="string">'/xxx'</span>,  <span class="comment">//路径</span></span><br><span class="line">  <span class="string">'post'</span>,  <span class="comment">//方法体</span></span><br><span class="line">  <span class="string">'a=1&amp;b=2'</span>,  <span class="comment">//请求体</span></span><br><span class="line">  (responseText)=&gt;&#123;<span class="built_in">console</span>.log(<span class="number">1</span>)&#125;, <span class="comment">//成功函数</span></span><br><span class="line">  (response)=&gt;&#123;<span class="built_in">console</span>.log(<span class="number">2</span>)&#125;  <span class="comment">//失败函数</span></span><br><span class="line">  )&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></div></figure>


        <h3 id="2-6-window-jQuery-ajax函数优化-给参数命名"   >
          <a href="#2-6-window-jQuery-ajax函数优化-给参数命名" class="heading-link"><i class="fas fa-link"></i></a>2.6 window.jQuery.ajax函数优化-给参数命名</h3>
      <p>上面函数容易不确定其中参数的意思，所以解决这个问题，有个技巧，传一个有结构的参数，即对象，例子如下</p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line">myButtons.addEventListener(<span class="string">'click'</span>,(e)=&gt;&#123;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;</span><br><span class="line">    url:<span class="string">'/xxx'</span>,</span><br><span class="line">    method:<span class="string">'get'</span>,</span><br><span class="line">    successFn:()=&#123;&#125;,</span><br><span class="line">    fail:()=&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">window</span>.jQuery.ajax(obj)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为采用了对象，所以window.jQuery.ajax也要修改，修改如下</span></span><br><span class="line"><span class="built_in">window</span>.jQuery.ajxa = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> url = options.url</span><br><span class="line">  <span class="keyword">let</span> method = options.method</span><br><span class="line">  <span class="keyword">let</span> body = options.body</span><br><span class="line">  <span class="keyword">let</span> successFn = options.successFn</span><br><span class="line">  <span class="keyword">let</span> fail = options.failFn</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> request = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  request.open(method,url)</span><br><span class="line">  request.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(request.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &gt; <span class="number">300</span> )&#123;</span><br><span class="line">      successFn.call(<span class="literal">undefined</span>,request.responseText)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.status &gt;= <span class="number">400</span> )&#123;</span><br><span class="line">      failFn.call(<span class="literal">undefined</span>，request)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  request.send(body)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h3 id="2-7-window-jQuery-ajax函数优化-不要中间的obj"   >
          <a href="#2-7-window-jQuery-ajax函数优化-不要中间的obj" class="heading-link"><i class="fas fa-link"></i></a>2.7 window.jQuery.ajax函数优化-不要中间的obj</h3>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line">myButtons.addEventListener(<span class="string">'click'</span>,(e)=&gt;&#123;</span><br><span class="line"><span class="built_in">window</span>.jQuery.ajax(&#123;</span><br><span class="line">    url:<span class="string">'/xxx'</span>,</span><br><span class="line">    method:<span class="string">'get'</span>,</span><br><span class="line">    successFn:()=&#123;&#125;,</span><br><span class="line">    fail:()=&#123;&#125;</span><br><span class="line">  &#125;) </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure>



        <h2 id="三、什么是回调（callback）"   >
          <a href="#三、什么是回调（callback）" class="heading-link"><i class="fas fa-link"></i></a>三、什么是回调（callback）</h2>
      <p>例子：</p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下面代码称为使用方代码</span></span><br><span class="line">myButtons.addEventListener(<span class="string">'click'</span>,(e)=&gt;&#123;</span><br><span class="line"><span class="built_in">window</span>.jQuery.ajax(&#123;</span><br><span class="line">    url:<span class="string">'/xxx'</span>,</span><br><span class="line">    method:<span class="string">'get'</span>,</span><br><span class="line">    successFn:(x)=&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(x)<span class="comment">//请问x代表是什么？</span></span><br><span class="line">      <span class="comment">//x代表的是request.responseText   </span></span><br><span class="line">    &#125;,</span><br><span class="line">    fail:()=&#123;&#125;</span><br><span class="line">  &#125;) </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure>

<ul>
<li><p>回调：向反方向call，自己主动调叫call，要其他函数调叫callback，call就是一个函数，上面的<code>(x)={console.log(x)}</code>就是一个回调函数</p>
</li>
<li><p>技巧 callback === function</p>
</li>
</ul>

        <h3 id="3-1-如果请求失败，有没有可能存在响应第四部分（response-body）"   >
          <a href="#3-1-如果请求失败，有没有可能存在响应第四部分（response-body）" class="heading-link"><i class="fas fa-link"></i></a>3.1 如果请求失败，有没有可能存在响应第四部分（response.body）?</h3>
      <p>有，第四部分与状态码无关，与第二部分有关</p>
<p>例子</p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//服务器</span></span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    response.statusCode = <span class="number">404</span></span><br><span class="line">    response.setHeader(<span class="string">'content-Type'</span>,<span class="string">'text/html;charset=utf-8'</span>)</span><br><span class="line">    response.write(<span class="string">`</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        "error":"not found "</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    `</span>) <span class="comment">//书写错误提示</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端</span></span><br><span class="line">fail:<span class="function">(<span class="params">x</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x)</span><br><span class="line">  <span class="built_in">console</span>.log(x.status)</span><br><span class="line">  <span class="built_in">console</span>.log(x.responseText) <span class="comment">//打印响应文本</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>chrome控制台结果如下</p>
<p> <img src="https://i.loli.net/2020/03/03/8pHLCMbGqKahzV6.png" alt="xresponsetext01.png"></p>

        <h3 id="3-2-需求一：请求成功之后，执行两个f1与f2函数怎么办-请问怎么传参？"   >
          <a href="#3-2-需求一：请求成功之后，执行两个f1与f2函数怎么办-请问怎么传参？" class="heading-link"><i class="fas fa-link"></i></a>3.2 需求一：请求成功之后，执行两个f1与f2函数怎么办,请问怎么传参？</h3>
      <p>问题与代码如下</p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">responseText</span>)</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">responseText</span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">myButtons.addEventListener(<span class="string">'click'</span>,(e)=&gt;&#123;</span><br><span class="line"><span class="built_in">window</span>.jQuery.ajax(&#123;</span><br><span class="line">    url:<span class="string">'/xxx'</span>,</span><br><span class="line">    method:<span class="string">'get'</span>,</span><br><span class="line">    successFn:(x)=&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(x)   </span><br><span class="line">    &#125;,</span><br><span class="line">    fail:<span class="function">(<span class="params">x</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(x)</span><br><span class="line">      <span class="built_in">console</span>.log(x.status)</span><br><span class="line">      <span class="built_in">console</span>.log(x.responseText) </span><br><span class="line">  &#125;</span><br><span class="line">  &#125;) </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//外面一个大函数，把函数作为参数传进去，一次调用</span></span><br><span class="line"><span class="comment">//答案如下</span></span><br><span class="line">myButtons.addEventListener(<span class="string">'click'</span>,(e)=&gt;&#123;</span><br><span class="line"><span class="built_in">window</span>.jQuery.ajax(&#123;</span><br><span class="line">    url:<span class="string">'/xxx'</span>,</span><br><span class="line">    method:<span class="string">'get'</span>,</span><br><span class="line">    successFn:(x)=&#123;</span><br><span class="line">      f1.call(<span class="literal">undefined</span>.x)</span><br><span class="line">      f2.call(<span class="literal">undefined</span>.x)</span><br><span class="line">    &#125;,</span><br><span class="line">    fail:<span class="function">(<span class="params">x</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(x)</span><br><span class="line">      <span class="built_in">console</span>.log(x.status)</span><br><span class="line">      <span class="built_in">console</span>.log(x.responseText) </span><br><span class="line">  &#125;&#125;</span><br><span class="line">  &#125;) </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure>



        <h3 id="3-2-需求二：如果要设置headers，怎么操作？"   >
          <a href="#3-2-需求二：如果要设置headers，怎么操作？" class="heading-link"><i class="fas fa-link"></i></a>3.2 需求二：如果要设置headers，怎么操作？</h3>
      <p>答：把要设置的header，添加到window.jQuery.ajax中</p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//答案如下</span></span><br><span class="line"><span class="comment">//首先在window.jQuery.ajxa中新增变量headers与关于header的for循环</span></span><br><span class="line"><span class="built_in">window</span>.jQuery.ajxa = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> headers = options.headers </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> headers)&#123;</span><br><span class="line">  <span class="keyword">let</span> value = headers[key]</span><br><span class="line">  request.setRequestsetHeader(key,value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">myButtons.addEventListener(<span class="string">'click'</span>,(e)=&gt;&#123;</span><br><span class="line"><span class="built_in">window</span>.jQuery.ajax(&#123;</span><br><span class="line">    url:<span class="string">'/xxx'</span>,</span><br><span class="line">    method:<span class="string">'get'</span>,</span><br><span class="line">    headers:&#123;</span><br><span class="line">      <span class="string">'content-type'</span>:<span class="string">'application/x-www-form-urlencode'</span>,</span><br><span class="line">      <span class="string">'frank'</span>:<span class="string">'18'</span> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加到请求的window.jQuery.ajax中.分别调用headers就可以</span></span><br><span class="line">    successFn:(x)=&#123;</span><br><span class="line">      f1.call(<span class="literal">undefined</span>.x)</span><br><span class="line">      f2.call(<span class="literal">undefined</span>.x)</span><br><span class="line">    &#125;,</span><br><span class="line">    fail:<span class="function">(<span class="params">x</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(x)</span><br><span class="line">      <span class="built_in">console</span>.log(x.status)</span><br><span class="line">      <span class="built_in">console</span>.log(x.responseText) </span><br><span class="line">  &#125;&#125;</span><br><span class="line">  &#125;) </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure>

<p>chrome控制台结果如下<br><img src="https://i.loli.net/2020/03/03/TJx9wcGZPtWQpCF.png" alt="setheaders01.png"></p>

        <h2 id="四、jQuery文档中ajax与自己封装的ajax的区别"   >
          <a href="#四、jQuery文档中ajax与自己封装的ajax的区别" class="heading-link"><i class="fas fa-link"></i></a>四、jQuery文档中ajax与自己封装的ajax的区别</h2>
      <p><span class="exturl"><a class="exturl__link"   href="https://api.jquery.com/jQuery.ajax/"  target="_blank" rel="noopener">jQuery.ajax()英文文档地址</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p><span class="exturl"><a class="exturl__link"   href="https://www.jquery123.com/jQuery.ajax/"  target="_blank" rel="noopener">jQuery.ajax()中文文档地址</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//jquery 文档的ajax例子：发送id作为数据发送到服务器， 保存一些数据到服务器上， 并通一旦它的完成知用户。  如果请求失败，则提醒用户。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> menuId = $(<span class="string">"ul.nav"</span>).first().attr(<span class="string">"id"</span>);</span><br><span class="line"><span class="keyword">var</span> request = $.ajax(&#123;</span><br><span class="line">  url: <span class="string">"script.php"</span>,</span><br><span class="line">  type: <span class="string">"POST"</span>,<span class="comment">//type就是我们设置的methods</span></span><br><span class="line">  data: &#123;<span class="attr">id</span> : menuId&#125;,<span class="comment">//data就是我们设置的body</span></span><br><span class="line">  dataType: <span class="string">"html"</span> <span class="comment">//dataType就是我们设置的Content-type</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">request.done(<span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">  $(<span class="string">"#log"</span>).html( msg );</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">request.fail(<span class="function"><span class="keyword">function</span>(<span class="params">jqXHR, textStatus</span>) </span>&#123;</span><br><span class="line">  alert( <span class="string">"Request failed: "</span> + textStatus );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></div></figure>



        <h3 id="4-1-继续优化自己的window-jquery-ajax-像jquery一样接受两种形式的参数"   >
          <a href="#4-1-继续优化自己的window-jquery-ajax-像jquery一样接受两种形式的参数" class="heading-link"><i class="fas fa-link"></i></a>4.1 继续优化自己的window.jquery.ajax-像jquery一样接受两种形式的参数</h3>
      <p><img src="https://i.loli.net/2020/03/03/baoPF2UB7vSKrpR.png" alt="jqueryajax03.png"></p>
<p>代码如下</p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQuery.ajxa = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//下面代码意思是：接受两种形式的参数</span></span><br><span class="line">  <span class="keyword">let</span> url</span><br><span class="line">  <span class="keyword">if</span>(argument.length === <span class="number">1</span>)&#123;</span><br><span class="line">     url = options.url</span><br><span class="line">    </span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">arguments</span>.length === <span class="number">2</span> )&#123;</span><br><span class="line">     url = argunments[<span class="number">0</span>]</span><br><span class="line">     options = <span class="built_in">arguments</span>[<span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//上面代码意思是：接受两种形式的参数</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> method = options.method</span><br><span class="line">  <span class="keyword">let</span> body = options.body</span><br><span class="line">  <span class="keyword">let</span> successFn = options.successFn</span><br><span class="line">  <span class="keyword">let</span> fail = options.failFn</span><br><span class="line">  <span class="keyword">let</span> header = otions.headers</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> request = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  request.open(method,url)</span><br><span class="line">  request.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(request.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &gt; <span class="number">300</span> )&#123;</span><br><span class="line">      successFn.call(<span class="literal">undefined</span>,request.responseText)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.status &gt;= <span class="number">400</span> )&#123;</span><br><span class="line">      failFn.call(<span class="literal">undefined</span>，request)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  request.send(body)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h2 id="五、结构化编程"   >
          <a href="#五、结构化编程" class="heading-link"><i class="fas fa-link"></i></a>五、结构化编程</h2>
      <ol>
<li>顺序执行</li>
<li>if…else</li>
<li>while/for</li>
</ol>
<p>只要一个编程，有上面的三点就是完备的编程，其他是多余的。</p>
<p><span class="exturl"><a class="exturl__link"   href="https://zh.wikipedia.org/wiki/%E7%BB%93%E6%9E%84%E5%8C%96%E7%BC%96%E7%A8%8B"  target="_blank" rel="noopener">结构化编程</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h3 id="维基百科解释"   >
          <a href="#维基百科解释" class="heading-link"><i class="fas fa-link"></i></a>维基百科解释</h3>
      <p>结构化程序设计（英语：Structured programming），一种编程典范。它采用子程序、代码区块、for循环以及while循环等结构，来取代传统的 goto。希望借此来改善计算机程序的明晰性、质量以及开发时间，并且避免写出面条式代码。</p>

        <h2 id="六、用ES6-解构赋值-优化window-jQuery-ajax"   >
          <a href="#六、用ES6-解构赋值-优化window-jQuery-ajax" class="heading-link"><i class="fas fa-link"></i></a>六、用ES6-解构赋值-优化window.jQuery.ajax</h2>
      
        <h3 id="6-1-第一次优化"   >
          <a href="#6-1-第一次优化" class="heading-link"><i class="fas fa-link"></i></a>6.1 第一次优化</h3>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQuery.ajxa = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">   <span class="comment">//ES5 </span></span><br><span class="line">  <span class="keyword">let</span> url = options.url</span><br><span class="line">  <span class="keyword">let</span> method = options.method</span><br><span class="line">  <span class="keyword">let</span> body = options.body</span><br><span class="line">  <span class="keyword">let</span> successFn = options.successFn</span><br><span class="line">  <span class="keyword">let</span> fail = options.failFn</span><br><span class="line">  <span class="keyword">let</span> headers = optionss.headers</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//ES6 解构赋值</span></span><br><span class="line">  <span class="keyword">let</span> &#123;url,method,body,successFn,failFn,headers&#125; = options <span class="comment">//等价于上面6行</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> request = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  request.open(method,url)</span><br><span class="line">  request.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(request.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &gt; <span class="number">300</span> )&#123;</span><br><span class="line">      successFn.call(<span class="literal">undefined</span>,request.responseText)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.status &gt;= <span class="number">400</span> )&#123;</span><br><span class="line">      failFn.call(<span class="literal">undefined</span>，request)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  request.send(body)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h3 id="6-2-解构赋值"   >
          <a href="#6-2-解构赋值" class="heading-link"><i class="fas fa-link"></i></a>6.2 解构赋值</h3>
      <p>解构赋值语法是一种 Javascript 表达式。通过解构赋值, 可以将属性/值从对象/数组中取出,赋值给其他变量。<br><span class="exturl"><a class="exturl__link"   href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"  target="_blank" rel="noopener">MDN-解构赋值</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p>例子代码</p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a, b, rest;</span><br><span class="line">[a, b] = [<span class="number">10</span>, <span class="number">20</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line">[a, b, ...rest] = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 20</span></span><br><span class="line"><span class="built_in">console</span>.log(rest); <span class="comment">// [30, 40, 50]</span></span><br><span class="line"></span><br><span class="line">(&#123; a, b &#125; = &#123; <span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: <span class="number">20</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Stage 4（已完成）提案中的特性</span></span><br><span class="line">(&#123;a, b, ...rest&#125; = &#123;<span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: <span class="number">20</span>, <span class="attr">c</span>: <span class="number">30</span>, <span class="attr">d</span>: <span class="number">40</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 20</span></span><br><span class="line"><span class="built_in">console</span>.log(rest); <span class="comment">// &#123;c: 30, d: 40&#125;</span></span><br></pre></td></tr></table></div></figure>


        <h4 id="6-2-1-问题-如何交换两个变量的值"   >
          <a href="#6-2-1-问题-如何交换两个变量的值" class="heading-link"><i class="fas fa-link"></i></a>6.2.1 问题 如何交换两个变量的值</h4>
      
        <h5 id="用es5方法"   >
          <a href="#用es5方法" class="heading-link"><i class="fas fa-link"></i></a>用es5方法</h5>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'a'</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">'b'</span></span><br><span class="line">temp = a </span><br><span class="line">a = b</span><br><span class="line">b = temp</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">//b</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">//a</span></span><br></pre></td></tr></table></div></figure>

        <h5 id="用ES6解构语法"   >
          <a href="#用ES6解构语法" class="heading-link"><i class="fas fa-link"></i></a>用ES6解构语法</h5>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'a'</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">'b'</span></span><br><span class="line">[a,b] = [b,a]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">//b</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">//a</span></span><br></pre></td></tr></table></div></figure>



        <h4 id="6-2-2-ES5与ES6对比"   >
          <a href="#6-2-2-ES5与ES6对比" class="heading-link"><i class="fas fa-link"></i></a>6.2.2 ES5与ES6对比</h4>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">let</span> a <span class="comment">// ES6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125; <span class="comment">// ES5</span></span><br><span class="line"></span><br><span class="line">f2 = <span class="function">(<span class="params">a</span>) =&gt;</span> &#123;<span class="built_in">console</span>.log()&#125; <span class="comment">// ES6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">'???'</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;</span><br><span class="line">o[x] = <span class="literal">true</span> <span class="comment">// '???' as key </span></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">'???'</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  [x]:<span class="literal">true</span></span><br><span class="line">&#125;<span class="comment">// ES6</span></span><br></pre></td></tr></table></div></figure>


        <h3 id="6-3-第二次优化"   >
          <a href="#6-3-第二次优化" class="heading-link"><i class="fas fa-link"></i></a>6.3 第二次优化</h3>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//直接从第一个参数拿到这六个变量，同时声明这六个变量</span></span><br><span class="line"><span class="built_in">window</span>.jQeuery.ajax=<span class="function"><span class="keyword">function</span>(<span class="params">&#123;url,method,body,successFn,failFn,headers&#125;</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> request = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  request.open(method,url)</span><br><span class="line">  request.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(request.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &gt; <span class="number">300</span> )&#123;</span><br><span class="line">      successFn.call(<span class="literal">undefined</span>,request.responseText)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.status &gt;= <span class="number">400</span> )&#123;</span><br><span class="line">      failFn.call(<span class="literal">undefined</span>，request)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  request.send(body)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>【前端项目】添加轮播swiper总结</title>
    <url>/2020/04/03/%E3%80%90%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E3%80%91%E6%B7%BB%E5%8A%A0%E8%BD%AE%E6%92%ADswiper%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[
        <h2 id="一、-swiper是什么"   >
          <a href="#一、-swiper是什么" class="heading-link"><i class="fas fa-link"></i></a>一、 swiper是什么</h2>
      <p>swiper是一个轮播插件</p>
<p><span class="exturl"><a class="exturl__link"   href="https://swiperjs.com/"  target="_blank" rel="noopener">swiper-官方地址</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br><span class="exturl"><a class="exturl__link"   href="https://github.com/nolimits4web/swiper"  target="_blank" rel="noopener">swiper-官方仓库地址</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h2 id="二-、-使用swiper"   >
          <a href="#二-、-使用swiper" class="heading-link"><i class="fas fa-link"></i></a>二 、 使用swiper</h2>
      
        <h3 id="2-1-怎么引入swiper"   >
          <a href="#2-1-怎么引入swiper" class="heading-link"><i class="fas fa-link"></i></a>2.1 怎么引入swiper</h3>
      
        <h4 id="2-1-1-方法一-npm-安装"   >
          <a href="#2-1-1-方法一-npm-安装" class="heading-link"><i class="fas fa-link"></i></a>2.1.1 方法一 npm 安装</h4>
      <p><code>npm install swiper</code></p>

        <h4 id="2-1-2-方法二-CDN-引入"   >
          <a href="#2-1-2-方法二-CDN-引入" class="heading-link"><i class="fas fa-link"></i></a>2.1.2 方法二 CDN 引入</h4>
      <figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://unpkg.com/swiper/css/swiper.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://unpkg.com/swiper/css/swiper.min.css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/swiper/js/swiper.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/swiper/js/swiper.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>

<a id="more"></a>



        <h3 id="2-2-项目添加swiper-css与js文件"   >
          <a href="#2-2-项目添加swiper-css与js文件" class="heading-link"><i class="fas fa-link"></i></a>2.2 项目添加swiper.css与js文件</h3>
      <figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    //...省略无关代码</span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://unpkg.com/swiper/css/swiper.min.css"</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/swiper/js/swiper.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>个人简历<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></div></figure>


        <h4 id="2-2-1-测试swiper是否引入成功"   >
          <a href="#2-2-1-测试swiper是否引入成功" class="heading-link"><i class="fas fa-link"></i></a>2.2.1 测试swiper是否引入成功</h4>
      <p>chrome控制台测试Swiper对象是否成功打印出</p>
<p><img src="https://i.loli.net/2020/03/04/LDfEawUy6l25qsb.png" alt="swiper02.png"></p>

        <h3 id="2-2-2-添加swiper-html代码框架到项目中"   >
          <a href="#2-2-2-添加swiper-html代码框架到项目中" class="heading-link"><i class="fas fa-link"></i></a>2.2.2 添加swiper html代码框架到项目中</h3>
      <figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--swiper html代码框架如下 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Slider main container --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-container"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Additional required wrapper --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-wrapper"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Slides --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-slide"</span>&gt;</span>Slide 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-slide"</span>&gt;</span>Slide 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-slide"</span>&gt;</span>Slide 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- If we need pagination --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-pagination"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- If we need navigation buttons --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-button-prev"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-button-next"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- If we need scrollbar --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-scrollbar"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">### 2.2.3 添加swiper css样式到项目中</span><br><span class="line"></span><br><span class="line">``` css</span><br><span class="line">//swiper css样式如下</span><br><span class="line">.swiper-container &#123;</span><br><span class="line">    width: 600px;</span><br><span class="line">    height: 300px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h3 id="2-2-4-初始化swiper-到项目中"   >
          <a href="#2-2-4-初始化swiper-到项目中" class="heading-link"><i class="fas fa-link"></i></a>2.2.4 初始化swiper 到项目中</h3>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化swiper 代码如下</span></span><br><span class="line"><span class="keyword">var</span> mySwiper = <span class="keyword">new</span> Swiper (<span class="string">'.swiper-container'</span>, &#123;</span><br><span class="line">    <span class="comment">// Optional parameters</span></span><br><span class="line">    direction: <span class="string">'vertical'</span>,<span class="comment">//列轮播提示</span></span><br><span class="line">    loop: <span class="literal">true</span>, <span class="comment">//是否是无缝轮播</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we need pagination</span></span><br><span class="line">    pagination: &#123;</span><br><span class="line">      el: <span class="string">'.swiper-pagination'</span>, <span class="comment">//是否需要分页器</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Navigation arrows</span></span><br><span class="line">    navigation: &#123;</span><br><span class="line">      nextEl: <span class="string">'.swiper-button-next'</span>, <span class="comment">//是否需要上一个轮播按钮</span></span><br><span class="line">      prevEl: <span class="string">'.swiper-button-prev'</span>,<span class="comment">//是否需要下一个轮播按钮</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// And if we need scrollbar</span></span><br><span class="line">    scrollbar: &#123;</span><br><span class="line">      el: <span class="string">'.swiper-scrollbar'</span>,<span class="comment">//是否需要滚动条</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></div></figure>


        <h3 id="2-2-5-swiper初始化效果如下"   >
          <a href="#2-2-5-swiper初始化效果如下" class="heading-link"><i class="fas fa-link"></i></a>2.2.5 swiper初始化效果如下</h3>
      <p><img src="https://i.loli.net/2020/03/04/pzGQEK9x4soCjvq.png" alt="swiper03.png"></p>

        <h3 id="2-2-6-修改swiper文件适配项目"   >
          <a href="#2-2-6-修改swiper文件适配项目" class="heading-link"><i class="fas fa-link"></i></a>2.2.6 修改swiper文件适配项目</h3>
      <ul>
<li>去掉列轮播提示选项<code>direction: &#39;vertical&#39;</code></li>
<li>去掉需要滚动条js<code>&#39;.swiper-scrollbar</code></li>
<li>去掉需要滚动条<code>class=&quot;swiper-scrollba</code></li>
</ul>

        <h3 id="2-2-7-适配效果如下"   >
          <a href="#2-2-7-适配效果如下" class="heading-link"><i class="fas fa-link"></i></a>2.2.7 适配效果如下</h3>
      <p><img src="https://i.loli.net/2020/03/04/fnCUDtGpsv6cOFb.png" alt="swiper04.png"></p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>前端项目</tag>
      </tags>
  </entry>
  <entry>
    <title>【前端项目】简历项目添加LeanCloud留言功能</title>
    <url>/2020/04/03/%E3%80%90%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E3%80%91%E7%AE%80%E5%8E%86%E9%A1%B9%E7%9B%AE%E6%B7%BB%E5%8A%A0LeanCloud%E7%95%99%E8%A8%80%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[
        <h2 id="一、什么是LeanCLoud"   >
          <a href="#一、什么是LeanCLoud" class="heading-link"><i class="fas fa-link"></i></a>一、什么是LeanCLoud</h2>
      
        <h3 id="1-1-问题：前端要存储一个数据要怎么操作？"   >
          <a href="#1-1-问题：前端要存储一个数据要怎么操作？" class="heading-link"><i class="fas fa-link"></i></a>1.1 问题：前端要存储一个数据要怎么操作？</h3>
      <p>没有方法存储，用户刷新或者换一台设备，数据就会没有。<br>存数据只能存储在服务器（server）上，这样才能做到，跨设备数据保存。</p>

        <h2 id="1-2-LeanCLoud是什么"   >
          <a href="#1-2-LeanCLoud是什么" class="heading-link"><i class="fas fa-link"></i></a>1.2 LeanCLoud是什么</h2>
      <p>在请求量低，LeanCloud提供免费数据库API</p>
<blockquote>
<p>leancloud 领先的 BaaS 提供商,提供数据存储、文件存储、云引擎、容器、即时通讯、消息推送、短信、游戏云等多项服务,为移动开发提供强有力的后端支持</p>
</blockquote>
<p><span class="exturl"><a class="exturl__link"   href="https://www.leancloud.cn/"  target="_blank" rel="noopener">LeanCloud官网</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<a id="more"></a>

<ul>
<li>一个自带数据库和增删改查（CRUD）功能的后台系统<ul>
<li>登录注册、手机验证码功能（收费）</li>
<li>存储任意信息</li>
<li>读取任意信息</li>
<li>搜索任意信息</li>
<li>删除任意信息</li>
<li>更新任意信息</li>
<li>等等功能</li>
</ul>
</li>
</ul>

        <h2 id="二、前期准备"   >
          <a href="#二、前期准备" class="heading-link"><i class="fas fa-link"></i></a>二、前期准备</h2>
      
        <h3 id="1-1-注册一个leadcloud"   >
          <a href="#1-1-注册一个leadcloud" class="heading-link"><i class="fas fa-link"></i></a>1.1 注册一个leadcloud</h3>
      
        <h3 id="1-2-选择节点"   >
          <a href="#1-2-选择节点" class="heading-link"><i class="fas fa-link"></i></a>1.2 选择节点</h3>
      <p>  如果域名在国内备案了，选择华北或者华东节点，反之选国际版</p>
<p><img src="https://i.loli.net/2020/03/09/zOdSJq6pacNbsBR.png" alt="leadcloud01-min.png"></p>

        <h3 id="1-3-创建一个应用"   >
          <a href="#1-3-创建一个应用" class="heading-link"><i class="fas fa-link"></i></a>1.3 创建一个应用</h3>
      <p><img src="https://i.loli.net/2020/03/09/HT4u1AfzwyvIp9W.png" alt="leadcloud02-min.png"></p>

        <h2 id="三、初始化LeadCloud"   >
          <a href="#三、初始化LeadCloud" class="heading-link"><i class="fas fa-link"></i></a>三、初始化LeadCloud</h2>
      
        <h3 id="3-1-创建一个CLass"   >
          <a href="#3-1-创建一个CLass" class="heading-link"><i class="fas fa-link"></i></a>3.1 创建一个CLass</h3>
      <p><img src="https://i.loli.net/2020/03/09/9Dj6MExuNWwBokH.png" alt="leadCloud03-min.png"></p>

        <h3 id="3-2-绑定自定义域名"   >
          <a href="#3-2-绑定自定义域名" class="heading-link"><i class="fas fa-link"></i></a>3.2 绑定自定义域名</h3>
      <p><img src="https://i.loli.net/2020/03/09/uCXmcg7vPp9ODYx.png" alt="uCXmcg7vPp9ODYx.png"></p>

        <h3 id="3-3-引入leadcloud数据库"   >
          <a href="#3-3-引入leadcloud数据库" class="heading-link"><i class="fas fa-link"></i></a>3.3 引入leadcloud数据库</h3>
      <p>具体操作<span class="exturl"><a class="exturl__link"   href="https://tab.leancloud.cn/docs/start.html"  target="_blank" rel="noopener">可以查看LeanCloud 文档</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h4 id="3-3-1-cdn引入leadcloud"   >
          <a href="#3-3-1-cdn引入leadcloud" class="heading-link"><i class="fas fa-link"></i></a>3.3.1 cdn引入leadcloud</h4>
      <figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 存储服务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.jsdelivr.net/npm/leancloud-storage@4.2.0/dist/av-min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></div></figure>

<blockquote>
<p>引入成功，可以在chrome的控制台打印出<code>AV</code>的全局变量</p>
</blockquote>

        <h4 id="3-3-2-添加个人的leadCloud信息到js上"   >
          <a href="#3-3-2-添加个人的leadCloud信息到js上" class="heading-link"><i class="fas fa-link"></i></a>3.3.2 添加个人的leadCloud信息到js上</h4>
      <p><img src="https://i.loli.net/2020/03/09/dwLfy5OsXMI6Y2t.png" alt="leadCloud05-min.png"></p>

        <h2 id="四、测试LeadCloud"   >
          <a href="#四、测试LeadCloud" class="heading-link"><i class="fas fa-link"></i></a>四、测试LeadCloud</h2>
      
        <h3 id="4-1-ping-自己设置的自定义域名-有响应就成功"   >
          <a href="#4-1-ping-自己设置的自定义域名-有响应就成功" class="heading-link"><i class="fas fa-link"></i></a>4.1 ping 自己设置的自定义域名 有响应就成功</h3>
      <p>具体可以看看leadCloud文档的<code>验证</code>部分</p>
<p><span class="exturl"><a class="exturl__link"   href="https://tab.leancloud.cn/docs/start.html"  target="_blank" rel="noopener">SDK 安装指南 - LeanCloud 文档</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<figure class="highlight js"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="keyword">var</span> TestObject = AV.Object.extend(<span class="string">'TestObject'</span>);</span><br><span class="line"><span class="keyword">var</span> testObject = <span class="keyword">new</span> TestObject();</span><br><span class="line">testObject.set(<span class="string">'words'</span>, <span class="string">'Hello world!'</span>);</span><br><span class="line">testObject.save().then(<span class="function"><span class="keyword">function</span> (<span class="params">testObject</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'保存成功。'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure>

        <h3 id="4-2-提高数据库安全性"   >
          <a href="#4-2-提高数据库安全性" class="heading-link"><i class="fas fa-link"></i></a>4.2 提高数据库安全性</h3>
      <ol>
<li>在<code>设置</code>-&gt;<code>风险监测</code>中，把不要的Class能删除就删除，不能删除的就改为更高级别的权限。</li>
<li>在<code>设置</code>-&gt;<code>安全中心</code>-&gt;<code>服务开关</code>,把不需要的服务统统关闭。</li>
<li>在<code>设置</code>-&gt;<code>安全中心</code>-&gt;<code>Web安全域名域名</code>添加自己数据库自定义域名上去</li>
</ol>

        <h2 id="五、添加留言表单"   >
          <a href="#五、添加留言表单" class="heading-link"><i class="fas fa-link"></i></a>五、添加留言表单</h2>
      
        <h3 id="5-1-添加留言表单的HTMl"   >
          <a href="#5-1-添加留言表单的HTMl" class="heading-link"><i class="fas fa-link"></i></a>5.1 添加留言表单的HTMl</h3>
      <figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">id</span>=<span class="string">"postMessageForm"</span> <span class="attr">class</span>=<span class="string">"postMessageForm"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"name"</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"content"</span>&gt;</span>评论内容<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></div></figure>



        <h3 id="5-2-添加留言表单的CSS"   >
          <a href="#5-2-添加留言表单的CSS" class="heading-link"><i class="fas fa-link"></i></a>5.2 添加留言表单的CSS</h3>
      <figure class="highlight css"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.postMessageForm</span>&#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">7px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.7</span>); <span class="attribute">box-sizing</span>:border-box; <span class="attribute">border</span>:<span class="number">20px</span> solid white; <span class="attribute">background-color</span>:<span class="number">#fff</span>; &#125;</span><br><span class="line"><span class="selector-class">.postMessageForm</span> &gt; <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span>&#123; <span class="attribute">width</span>:<span class="number">300px</span>; <span class="attribute">height</span>:<span class="number">30px</span>; &#125;</span><br><span class="line"><span class="selector-class">.postMessageForm</span> &gt; <span class="selector-tag">input</span><span class="selector-attr">[name=name]</span>,</span><br><span class="line"><span class="selector-class">.postMessageForm</span> &gt; <span class="selector-tag">input</span><span class="selector-attr">[name=content]</span>&#123; <span class="attribute">margin-right</span>: <span class="number">30px</span>; &#125;</span><br><span class="line"><span class="selector-class">.postMessageForm</span> &gt; <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span><span class="selector-pseudo">:focus</span>&#123; <span class="attribute">outline</span>: none; &#125;</span><br><span class="line"><span class="selector-class">.postMessageForm</span> &gt; <span class="selector-tag">label</span>&#123; <span class="attribute">line-height</span>: <span class="number">30px</span>; <span class="attribute">font-size</span>:<span class="number">18px</span>; &#125;</span><br><span class="line"><span class="selector-class">.postMessageForm</span> &gt; <span class="selector-tag">input</span><span class="selector-attr">[type=submit]</span>&#123; <span class="attribute">background-color</span>:<span class="number">#e4696c</span>; <span class="attribute">opacity</span>: <span class="number">0.6</span>; <span class="attribute">color</span>:<span class="number">#efefef</span>; <span class="attribute">width</span>: <span class="number">100px</span>; <span class="attribute">text-align</span>: center; <span class="attribute">line-height</span>: <span class="number">32px</span>; &#125;</span><br><span class="line"><span class="selector-class">.postMessageForm</span> &gt; <span class="selector-tag">input</span><span class="selector-attr">[type=submit]</span><span class="selector-pseudo">:focus</span>&#123; <span class="attribute">outline</span>: none; &#125;</span><br><span class="line"><span class="selector-class">.postMessageForm</span> &gt; <span class="selector-tag">input</span><span class="selector-attr">[type=submit]</span><span class="selector-pseudo">:hover</span>&#123; <span class="attribute">opacity</span>: <span class="number">1</span>; <span class="attribute">transition</span>: all <span class="number">0.4s</span>; <span class="attribute">cursor</span>: pointer; &#125;</span><br></pre></td></tr></table></div></figure>


        <h3 id="5-3-添加留言表单的JS"   >
          <a href="#5-3-添加留言表单的JS" class="heading-link"><i class="fas fa-link"></i></a>5.3 添加留言表单的JS</h3>
      <figure class="highlight js"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myForm = <span class="built_in">document</span>.querySelector(<span class="string">'#postMessageForm'</span>)</span><br><span class="line">myForm.addEventListener(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.preventDefault()<span class="comment">//阻止默认事件，否则会有默认跳转</span></span><br><span class="line">    <span class="keyword">let</span> content = myForm.querySelector(<span class="string">'input[name=content]'</span>).value</span><br><span class="line">    <span class="keyword">let</span> name = myForm.querySelector(<span class="string">'input[name=name]'</span>).value</span><br><span class="line">    <span class="keyword">var</span> Message = AV.Object.extend(<span class="string">'Message'</span>);</span><br><span class="line">    <span class="keyword">var</span> message = <span class="keyword">new</span> Message();</span><br><span class="line">    message.set(&#123;</span><br><span class="line">        <span class="string">'content'</span>: content,</span><br><span class="line">        <span class="string">'name'</span>: name,</span><br><span class="line">    &#125;)</span><br><span class="line">    message.save().then(<span class="function"><span class="keyword">function</span> (<span class="params">Object</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>)</span><br><span class="line">        li.innerText = <span class="string">`<span class="subst">$&#123;object.attributes.name&#125;</span>: <span class="subst">$&#123;object.attributes.content&#125;</span>`</span></span><br><span class="line">        <span class="keyword">let</span> messageList = <span class="built_in">document</span>.querySelector(<span class="string">'#messageList'</span>)</span><br><span class="line">        messageList.appendChild(li)</span><br><span class="line">        location.reload(<span class="literal">true</span>);<span class="comment">//刷新页面</span></span><br><span class="line">    &#125;)</span><br><span class="line">    alert(<span class="string">'留言成功啦'</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure>


        <h2 id="六、添加留言板代码"   >
          <a href="#六、添加留言板代码" class="heading-link"><i class="fas fa-link"></i></a>六、添加留言板代码</h2>
      
        <h3 id="6-1-添加留言板html"   >
          <a href="#6-1-添加留言板html" class="heading-link"><i class="fas fa-link"></i></a>6.1 添加留言板html</h3>
      <figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">id</span>=<span class="string">"messageList"</span> <span class="attr">class</span>=<span class="string">"messageList"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></div></figure>


        <h3 id="6-2-添加留言板css"   >
          <a href="#6-2-添加留言板css" class="heading-link"><i class="fas fa-link"></i></a>6.2 添加留言板css</h3>
      <figure class="highlight css"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.messageList</span> &gt; <span class="selector-tag">li</span>&#123; <span class="attribute">font-size</span>: <span class="number">18px</span>; <span class="attribute">line-height</span>: <span class="number">40px</span>; <span class="attribute">background-color</span>:<span class="number">#eee</span>; <span class="attribute">padding</span>:<span class="number">0px</span> <span class="number">20px</span>; &#125;</span><br><span class="line"><span class="selector-class">.messageList</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span>&#123; <span class="attribute">border-top-left-radius</span>: <span class="number">10px</span>; <span class="attribute">border-top-right-radius</span>: <span class="number">10px</span>; &#125;</span><br><span class="line"><span class="selector-class">.messageList</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span>&#123; <span class="attribute">border-bottom-left-radius</span>: <span class="number">10px</span>; <span class="attribute">border-bottom-right-radius</span>: <span class="number">10px</span>; &#125;</span><br><span class="line"><span class="selector-class">.messageList</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(2n+1)</span>&#123; <span class="attribute">background-color</span>:<span class="number">#fff</span>; &#125; </span><br><span class="line"><span class="selector-class">.messageList</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span>&#123; <span class="attribute">background-color</span>:<span class="number">#e4696c</span>; <span class="attribute">color</span>:<span class="number">#fff</span>; &#125;</span><br></pre></td></tr></table></div></figure>


        <h3 id="6-3-添加留言板JS"   >
          <a href="#6-3-添加留言板JS" class="heading-link"><i class="fas fa-link"></i></a>6.3 添加留言板JS</h3>
      <p>打开项目就会读取leadCloud上的留言数据，然后存放在ol的li中</p>
<figure class="highlight js"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> query = <span class="keyword">new</span> AV.Query(<span class="string">'Message'</span>);</span><br><span class="line">query.find()</span><br><span class="line">    .then(</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">messages</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> array = messages.map(<span class="function">(<span class="params">item</span>) =&gt;</span> item.attributes)</span><br><span class="line">            array.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>)</span><br><span class="line">                li.innerText = <span class="string">`<span class="subst">$&#123;item.name&#125;</span>:<span class="subst">$&#123;item.content&#125;</span>`</span></span><br><span class="line">                <span class="keyword">let</span> messageList = <span class="built_in">document</span>.querySelector(<span class="string">'#messageList'</span>)</span><br><span class="line">                messageList.appendChild(li)</span><br><span class="line">                myForm.querySelector(<span class="string">'input[name=content]'</span>).value = <span class="string">''</span></span><br><span class="line">                myForm.querySelector(<span class="string">'input[name=name]'</span>).value = <span class="string">''</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; </span><br><span class="line">    );</span><br></pre></td></tr></table></div></figure>



        <h2 id="七、总结"   >
          <a href="#七、总结" class="heading-link"><i class="fas fa-link"></i></a>七、总结</h2>
      
        <h3 id="7-1效果如下"   >
          <a href="#7-1效果如下" class="heading-link"><i class="fas fa-link"></i></a>7.1效果如下</h3>
      <p><img src="https://i.loli.net/2020/03/09/rFOQxntULyaC6Yc.png" alt="leancloud06.png"></p>

        <h3 id="7-2-问：为什么要监听form，而不是button？"   >
          <a href="#7-2-问：为什么要监听form，而不是button？" class="heading-link"><i class="fas fa-link"></i></a>7.2 问：为什么要监听form，而不是button？</h3>
      <p>假设用户在文本框输入了文字，但不点提交按钮，直接点回车，怎么办？用户回车要不要提交表单？ 要</p>
<p>所以要监听提按钮也要监听回车</p>
<figure class="highlight js"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下面是错误示范</span></span><br><span class="line"><span class="keyword">let</span> button = myForm.querySelector(<span class="string">'input[type=submit]'</span>)</span><br><span class="line">button.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br><span class="line"><span class="keyword">let</span> input = myForm.querySelector(<span class="string">'input[name=content]'</span>)</span><br><span class="line">input.addEventListener(<span class="string">'keypress'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(e.keyCode === <span class="number">13</span>)&#123;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//但是上面代码也可以等于下面,比较简单</span></span><br><span class="line">myForm.addEventListener(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></div></figure>

<p><strong>sumblit 包含提交，在任意的input打回车</strong></p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>前端项目</tag>
      </tags>
  </entry>
  <entry>
    <title>【前端项目】一个会动的简历-总结</title>
    <url>/2020/04/03/%E3%80%90%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E3%80%91%E4%B8%80%E4%B8%AA%E4%BC%9A%E5%8A%A8%E7%9A%84%E7%AE%80%E5%8E%86-%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[
        <h2 id="一、预览"   >
          <a href="#一、预览" class="heading-link"><i class="fas fa-link"></i></a>一、预览</h2>
      <p><a href="https://qiuzp.com/animation-resume/">预览地址</a><br><span class="exturl"><a class="exturl__link"   href="https://github.com/qiuzp94/animation-resume"  target="_blank" rel="noopener">源码地址</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h2 id="二、原理"   >
          <a href="#二、原理" class="heading-link"><i class="fas fa-link"></i></a>二、原理</h2>
      
        <h3 id="2-1-参考网址"   >
          <a href="#2-1-参考网址" class="heading-link"><i class="fas fa-link"></i></a>2.1 参考网址</h3>
      <p><span class="exturl"><a class="exturl__link"   href="https://www.strml.net/"  target="_blank" rel="noopener">strml.net</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br><span class="exturl"><a class="exturl__link"   href="https://fangyinghang.com/animating-resume/"  target="_blank" rel="noopener">animating-resume</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<a id="more"></a>


        <h3 id="2-2-具体原理"   >
          <a href="#2-2-具体原理" class="heading-link"><i class="fas fa-link"></i></a>2.2 具体原理</h3>
      <p>字在页面依次出现</p>

        <h3 id="2-3-依次显示原理例子"   >
          <a href="#2-3-依次显示原理例子" class="heading-link"><i class="fas fa-link"></i></a>2.3 依次显示原理例子</h3>
      <p><span class="exturl"><a class="exturl__link"   href="https://jsbin.com/dekuroyehi/edit?html,js,output"  target="_blank" rel="noopener">在线预览地址</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS Bin<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> result = <span class="string">'1234567890'</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> n = <span class="number">0</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> id = setInterval(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span></span><br><span class="line">  n += 1</span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.body.innerHTML = result.substring(<span class="number">0</span>,n)</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(n+<span class="string">'轮'</span>)</span></span><br><span class="line">  if(n &gt;= result.length)&#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.clearInterval(id)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,600)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></div></figure>

<p><span class="exturl"><a class="exturl__link"   href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/substring"  target="_blank" rel="noopener">String.prototype.substring()</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h3 id="2-4-CSS展示-依次显示原理例子"   >
          <a href="#2-4-CSS展示-依次显示原理例子" class="heading-link"><i class="fas fa-link"></i></a>2.4 CSS展示+依次显示原理例子</h3>
      <p>因为在HTML里面,回车、Tab连续出现多个，浏览器会自动认为一个回车、Tab<br>所以要用<code>&lt;pre&gt;</code>标签包裹内容</p>
<p>【原理】: 将css样式代码，一边展示在页面中，一边同步将代码放入style标签里面，这样就可以得出效果。</p>
<p><span class="exturl"><a class="exturl__link"   href="https://jsbin.com/yatinivufu/edit?html,js,output"  target="_blank" rel="noopener">在线预览地址</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS Bin<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">id</span>=<span class="string">"styleTag"</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pre</span> <span class="attr">id</span>=<span class="string">"code"</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> result = `</span></span><br><span class="line">*&#123;</span><br><span class="line">  transition:all 1s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body&#123;</span><br><span class="line">background:#61D7A4;</span><br><span class="line">color:#fff;</span><br><span class="line">&#125;</span><br><span class="line">`</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> n = <span class="number">0</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> id = setInterval(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span></span><br><span class="line">n += 1</span><br><span class="line">code.innerHTML = result.substring(0,n)</span><br><span class="line">styleTag.innerHTML = result.substring(0,n)</span><br><span class="line">if(n &gt;= result.length)&#123;</span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.clearInterval(id)</span></span><br><span class="line">&#125; </span><br><span class="line">&#125;,10 )</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></div></figure>




        <h2 id="三、技术栈"   >
          <a href="#三、技术栈" class="heading-link"><i class="fas fa-link"></i></a>三、技术栈</h2>
      <ul>
<li>原生JS</li>
<li>JS定时器</li>
<li>prmisjs</li>
<li>箭头函数</li>
<li>异步与回调</li>
</ul>

        <h2 id="四、代码高亮"   >
          <a href="#四、代码高亮" class="heading-link"><i class="fas fa-link"></i></a>四、代码高亮</h2>
      
        <h3 id="4-1-第一次尝试"   >
          <a href="#4-1-第一次尝试" class="heading-link"><i class="fas fa-link"></i></a>4.1 第一次尝试</h3>
      <p>添加下面代码</p>
<p><code>code.innerHTML = code.innerHTMl.replace(&#39;html&#39;,&#39;&lt;span style=&quot;color:red;&quot;&gt;body&lt;/span&gt;&#39;)</code></p>
<p>如果用这种方法，处理多个标签要使用正则匹配，这里我们可以采用开源库<br><code>Prism.js</code></p>

        <h3 id="4-2-关于Prism-js"   >
          <a href="#4-2-关于Prism-js" class="heading-link"><i class="fas fa-link"></i></a>4.2 关于Prism.js</h3>
      <p>Prism 是一款轻量、可扩展的代码语法高亮库，使用现代化的 Web 标准构建。</p>
<p>它能把一个字符串的其中的关键字加上高亮</p>
<p><span class="exturl"><a class="exturl__link"   href="https://prismjs.com/"  target="_blank" rel="noopener">Prism.js官网地址</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h4 id="如何使用Prism-js"   >
          <a href="#如何使用Prism-js" class="heading-link"><i class="fas fa-link"></i></a>如何使用Prism.js</h4>
      <p>详情请看<span class="exturl"><a class="exturl__link"   href="https://prismjs.com/#basic-usage"  target="_blank" rel="noopener">官网介绍</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h5 id="下载css与js文件后引入"   >
          <a href="#下载css与js文件后引入" class="heading-link"><i class="fas fa-link"></i></a>下载css与js文件后引入</h5>
      <p><span class="exturl"><a class="exturl__link"   href="https://prismjs.com/download.html#themes=prism&languages=markup+css+clike+javascript"  target="_blank" rel="noopener">链接地址</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h5 id="使用Prism-js"   >
          <a href="#使用Prism-js" class="heading-link"><i class="fas fa-link"></i></a>使用Prism.js</h5>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line">code.innerHTML = Prism.highlight(code.innerHTML, Prism.languages.css, <span class="string">'css'</span>);</span><br><span class="line"><span class="string">``</span><span class="string">`   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 五、故意代码高亮</span></span><br><span class="line"><span class="string">### 第一步 </span></span><br><span class="line"><span class="string">添加默认样式default.css,先覆盖prism高亮的样式</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> CSS</span><br><span class="line"><span class="comment">//default.css</span></span><br><span class="line"></span><br><span class="line">.token.selector&#123;</span><br><span class="line">    color:black;</span><br><span class="line">&#125;</span><br><span class="line">.token.property&#123;</span><br><span class="line">    color:black;</span><br><span class="line">&#125;</span><br><span class="line">.token.punctuation&#123;</span><br><span class="line">    color:black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>注意default.css要在prism.css后面</p>

        <h3 id="第二步"   >
          <a href="#第二步" class="heading-link"><i class="fas fa-link"></i></a>第二步</h3>
      <p>在result添加会prism高亮的样式,js执行到相关代码就会高亮</p>
<figure class="highlight js"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="string">`</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">/* 我需要一点代码高亮 */</span></span><br><span class="line"><span class="string">.token.selector&#123;</span></span><br><span class="line"><span class="string">  color:#690;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">.token.property&#123;</span></span><br><span class="line"><span class="string">  color:#905;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">.token.punctuation&#123;</span></span><br><span class="line"><span class="string">  color:#999;</span></span><br><span class="line"><span class="string">&#125; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></div></figure>



        <h2 id="六、加动画效果"   >
          <a href="#六、加动画效果" class="heading-link"><i class="fas fa-link"></i></a>六、加动画效果</h2>
      
        <h2 id="七、添加简历内容"   >
          <a href="#七、添加简历内容" class="heading-link"><i class="fas fa-link"></i></a>七、添加简历内容</h2>
      
        <h3 id="第一步-新建-result2变量-来存储数据"   >
          <a href="#第一步-新建-result2变量-来存储数据" class="heading-link"><i class="fas fa-link"></i></a>第一步 新建 result2变量 来存储数据</h3>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">var</span> result2 = <span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></div></figure>



        <h3 id="第二步-在第一个定时器上添加fn2与fn3函数"   >
          <a href="#第二步-在第一个定时器上添加fn2与fn3函数" class="heading-link"><i class="fas fa-link"></i></a>第二步 在第一个定时器上添加fn2与fn3函数</h3>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> id = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">window</span>.clearInterval(id)</span><br><span class="line">    fn2()</span><br><span class="line">    fn3(result)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">10</span>)</span><br></pre></td></tr></table></div></figure>


        <h3 id="第三步-在DOM树上添加pre标签即构造createPaper函数内容"   >
          <a href="#第三步-在DOM树上添加pre标签即构造createPaper函数内容" class="heading-link"><i class="fas fa-link"></i></a>第三步 在DOM树上添加pre标签即构造createPaper函数内容</h3>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> paper = <span class="built_in">document</span>.createElement(<span class="string">'pre'</span>)</span><br><span class="line">  paper.id = <span class="string">'paper'</span></span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(paper)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h3 id="第四步-构造关于白纸内容的f3函数"   >
          <a href="#第四步-构造关于白纸内容的f3函数" class="heading-link"><i class="fas fa-link"></i></a>第四步 构造关于白纸内容的f3函数</h3>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params">preResult</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="string">`</span></span><br><span class="line"><span class="string">#paper&#123;</span></span><br><span class="line"><span class="string">    width:100px; height:100px;</span></span><br><span class="line"><span class="string">    background:white;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">var</span> n = <span class="number">0</span></span><br><span class="line">  <span class="keyword">var</span> id = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">    code.innerHTML = preResult + result.substring(<span class="number">0</span>,<span class="number">1</span>) </span><br><span class="line">    code.innerHTML =</span><br><span class="line">    Prism.highlight(code.innerHTML, Prism.languages.css, <span class="string">'css'</span>);</span><br><span class="line">    styleTag.innerHTML = preResult + result.substring(<span class="number">0</span>, n)</span><br><span class="line">    <span class="keyword">if</span> (n &gt;= result.length) &#123;</span><br><span class="line">      <span class="built_in">window</span>.clearInterval(id)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h2 id="八、封装函数"   >
          <a href="#八、封装函数" class="heading-link"><i class="fas fa-link"></i></a>八、封装函数</h2>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeCode</span>(<span class="params">code</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> domCode = <span class="built_in">document</span>.querySelector(<span class="string">'#code'</span>)</span><br><span class="line">  <span class="keyword">let</span> n = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> id = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">    domCode.innerHTML = </span><br><span class="line">      Prism.highlight(code.substring(<span class="number">0</span>,n), Prism.languages.css, <span class="string">'css'</span>);</span><br><span class="line">    styleTag.innerHTML = code.substring(<span class="number">0</span>, n)</span><br><span class="line">    <span class="keyword">if</span> (n &gt;= result.length) &#123;</span><br><span class="line">      <span class="built_in">window</span>.clearInterval(id)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">10</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h2 id="九、异步与回调"   >
          <a href="#九、异步与回调" class="heading-link"><i class="fas fa-link"></i></a>九、异步与回调</h2>
      <p>因为writeCode(result）只负责定闹钟<br>createPaper在写代码之前</p>
<ol>
<li>定闹钟</li>
<li>writeCode返回</li>
<li>执行createPaper()</li>
<li>闹钟时间到</li>
<li>写第一行代码</li>
</ol>

        <h3 id="9-1-一个例子-买黄牛票"   >
          <a href="#9-1-一个例子-买黄牛票" class="heading-link"><i class="fas fa-link"></i></a>9.1 一个例子 买黄牛票</h3>
      <ul>
<li>让黄牛去买票，然后站着等（同步）</li>
<li>让黄牛去买票（告诉黄牛，你买到票就call我），然后去做别的(异步)</li>
</ul>
<p>告诉黄牛，你买到票就打（回）电话我<br>when you get the ticket,call me back。</p>

        <h3 id="9-2-异步的解释"   >
          <a href="#9-2-异步的解释" class="heading-link"><i class="fas fa-link"></i></a>9.2 异步的解释</h3>
      <p>异步就是先写代码后执行，<code>不等结果</code>直接进行下一步</p>
<p>如果想写完代码之后再执行createPaper，这需要回调</p>
<p>writeCode就是一个异步，因为我们不会等它把代码写完，因为它是一个定时器（闹钟）,只要是不等它做完，直接执行createPaper。这就说明writeCode就是一个异步任务。</p>
<p>异步的精髓在于<code>不等结果</code></p>

        <h3 id="9-3-如何获取异步结果"   >
          <a href="#9-3-如何获取异步结果" class="heading-link"><i class="fas fa-link"></i></a>9.3 如何获取异步结果</h3>
      <p>使用回调可以获取异步的结果</p>
<ul>
<li>回调是拿到异步结果的一种方式</li>
<li>回调也可以拿同步结果</li>
</ul>
<p>异步有缺点，就是拿不到结果，所以就要把回调放在异步里面</p>

        <h3 id="9-4-使用异步"   >
          <a href="#9-4-使用异步" class="heading-link"><i class="fas fa-link"></i></a>9.4 使用异步</h3>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//main.js</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">writeCode</span>(<span class="params">code,fn</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">        fn.call()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">10</span>) </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> ...</span><br><span class="line"> </span><br><span class="line">writeCode(result,()=&gt;&#123;</span><br><span class="line">  createPaper(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;)</span><br><span class="line">&#125;) </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">createPaper</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  fn.call()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>




        <h2 id="十、在已有代码上追加内容"   >
          <a href="#十、在已有代码上追加内容" class="heading-link"><i class="fas fa-link"></i></a>十、在已有代码上追加内容</h2>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeCode</span>(<span class="params">prefix,code,fn</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    domCode.innerHTML =</span><br><span class="line">      Prism.highlight(prefix + code.substring(<span class="number">0</span>, n), Prism.languages.css, <span class="string">'css'</span>);</span><br><span class="line">    styleTag.innerHTML = prefix + code.substring(<span class="number">0</span>, n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">writeCode(<span class="string">''</span>,result,()=&gt;&#123;</span><br><span class="line">  createPaper(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    writeCode(result,result2)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure>



        <h2 id="十一、代码往下滚动"   >
          <a href="#十一、代码往下滚动" class="heading-link"><i class="fas fa-link"></i></a>十一、代码往下滚动</h2>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">writeCode</span>(<span class="params">prefix, code, fn</span>) </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    domCode.scrollTop = domCode.scrollHeight</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>






        <h2 id="十二、其他知识"   >
          <a href="#十二、其他知识" class="heading-link"><i class="fas fa-link"></i></a>十二、其他知识</h2>
      <p>pre 全称preview </p>
<p><span class="exturl"><a class="exturl__link"   href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace"  target="_blank" rel="noopener">replace() 方法返回一个由替换值（replacement）替换一些或所有匹配的模式（pattern）后的新字符串。</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p><span class="exturl"><a class="exturl__link"   href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollTop"  target="_blank" rel="noopener">Element.scrollTop</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h3 id="12-1-JS的功能"   >
          <a href="#12-1-JS的功能" class="heading-link"><i class="fas fa-link"></i></a>12.1 JS的功能</h3>
      <ol>
<li>操作页面</li>
<li>AJAX</li>
</ol>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>前端项目</tag>
      </tags>
  </entry>
  <entry>
    <title>【数据库系统原理】第一章 数据库系统概念</title>
    <url>/2020/04/03/%E3%80%90%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86%E3%80%91%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[
        <h2 id="一、-数据管理技术的发展"   >
          <a href="#一、-数据管理技术的发展" class="heading-link"><i class="fas fa-link"></i></a>一、 数据管理技术的发展</h2>
      
        <h3 id="1-1、人工管理阶段"   >
          <a href="#1-1、人工管理阶段" class="heading-link"><i class="fas fa-link"></i></a>1.1、人工管理阶段</h3>
      
        <h4 id="特点："   >
          <a href="#特点：" class="heading-link"><i class="fas fa-link"></i></a>特点：</h4>
      <ol>
<li>数据不保存</li>
<li>应用程序管理数据</li>
<li>数据面向应用</li>
</ol>
<p>注意：记录内无结构，整体无结构。</p>

        <h3 id="1-2、文件系统阶段"   >
          <a href="#1-2、文件系统阶段" class="heading-link"><i class="fas fa-link"></i></a>1.2、文件系统阶段</h3>
      
        <h4 id="特点：-1"   >
          <a href="#特点：-1" class="heading-link"><i class="fas fa-link"></i></a>特点：</h4>
      <ol>
<li>数据的管理值：文件系统，<strong>数据可长期保存</strong></li>
<li>数据面向的对象：某一应用程序。<code>(例word-doc)</code></li>
<li>数据的共享程度：<strong>共享性差、冗余度大</strong></li>
<li>数据的结构化：<strong>记录内有结构，整体无结构</strong></li>
<li>数据的独立性：<strong>独立性差</strong>，数据的逻辑结构改变必须修改应用程序。</li>
<li>数据的控制能力：应用程序自己控制。</li>
</ol>
<a id="more"></a>


        <h3 id="1-3、-数据库系统阶段"   >
          <a href="#1-3、-数据库系统阶段" class="heading-link"><i class="fas fa-link"></i></a>1.3、 数据库系统阶段</h3>
      
        <h4 id="特点：-2"   >
          <a href="#特点：-2" class="heading-link"><i class="fas fa-link"></i></a>特点：</h4>
      <ol>
<li><strong>数据集成</strong></li>
<li><strong>数据共享性高</strong></li>
<li><strong>数据冗余小</strong></li>
<li><strong>数据一致性</strong> <code>(例：同word出现副本)</code></li>
<li><strong>数据独立性高</strong></li>
<li><strong>实施统一管理与控制</strong></li>
<li>减少应用程序开发与维护的工作量</li>
</ol>
<p>注意：加粗为考试常出</p>
<p>冗余不代表数据出错，代表数据比较“啰嗦”</p>

        <h2 id="二、数据库系统的结构"   >
          <a href="#二、数据库系统的结构" class="heading-link"><i class="fas fa-link"></i></a>二、数据库系统的结构</h2>
      
        <h3 id="2-1-数据库系统的三级模式结构"   >
          <a href="#2-1-数据库系统的三级模式结构" class="heading-link"><i class="fas fa-link"></i></a>2.1 数据库系统的三级模式结构</h3>
      
        <h4 id="2-1-1-模式"   >
          <a href="#2-1-1-模式" class="heading-link"><i class="fas fa-link"></i></a>2.1.1 模式</h4>
      <p>模式也称为<strong>概念模式或逻辑模式</strong>，它是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公共数据视图。</p>
<p> <code>概念/逻辑：例：家族图谱</code><br> <code>概念/逻辑：例：学校-系-专业-班</code></p>

        <h4 id="2-1-2-外模式"   >
          <a href="#2-1-2-外模式" class="heading-link"><i class="fas fa-link"></i></a>2.1.2 外模式</h4>
      <p>外模式也称为<strong>子模式（Subschema）或用户模式</strong>，它是数据库用户（包括应用程序员和最终用户）能够看见和使用的局部数据的逻辑结构和特征的描述。</p>
<p>DBMS提供了子模式描述语言（Subschema DDL）来严格地定义子模式。</p>
<p><code>外模式例：独立于数据库外，肉眼可以看见的</code><br><code>外模式例: 查话费的表</code></p>

        <h4 id="2-1-3-内模式"   >
          <a href="#2-1-3-内模式" class="heading-link"><i class="fas fa-link"></i></a>2.1.3 内模式</h4>
      <p>内模式也称为存储模式（Storage Schema），它是对数据库中数据物理结构和存储方式的描述，是数据在数据库内部的表示形式。</p>
<p><code>内模式：跟计算机有关</code><br><code>内模式例：二进制、存储等等</code></p>

        <h3 id="2-2-三级模式结构的两层映像与数据独立性"   >
          <a href="#2-2-三级模式结构的两层映像与数据独立性" class="heading-link"><i class="fas fa-link"></i></a>2.2 三级模式结构的两层映像与数据独立性</h3>
      <ul>
<li><strong>外模式/模式映像（逻辑独立性）</strong></li>
<li><strong>模式/内模式映像（物理独立性）</strong></li>
</ul>

        <h4 id="2-2-1-问题：数据库系统的数据独立性是指什么？"   >
          <a href="#2-2-1-问题：数据库系统的数据独立性是指什么？" class="heading-link"><i class="fas fa-link"></i></a>2.2.1 问题：数据库系统的数据独立性是指什么？</h4>
      <p>不会因为系统数据库存储结构（物理）与数据逻辑结构（逻辑）的变化而影响应用程序</p>

        <h3 id="2-3-数据库系统的运行与应用结构"   >
          <a href="#2-3-数据库系统的运行与应用结构" class="heading-link"><i class="fas fa-link"></i></a>2.3 数据库系统的运行与应用结构</h3>
      
        <h4 id="2-3-1-客户-服务器（Client-Server-C-S-模式"   >
          <a href="#2-3-1-客户-服务器（Client-Server-C-S-模式" class="heading-link"><i class="fas fa-link"></i></a>2.3.1 客户/服务器（Client/Server,C/S)模式</h4>
      <p><code>例: 微信、桌面客户端游戏</code></p>

        <h4 id="2-3-2-浏览器-服务器（Browser-Server-B-S）模式"   >
          <a href="#2-3-2-浏览器-服务器（Browser-Server-B-S）模式" class="heading-link"><i class="fas fa-link"></i></a>2.3.2 浏览器/服务器（Browser/Server,B/S）模式</h4>
      <p><code>例: 网络、在线web游戏</code></p>

        <h2 id="三、数据模型"   >
          <a href="#三、数据模型" class="heading-link"><i class="fas fa-link"></i></a>三、数据模型</h2>
      
        <h3 id="3-1-数据特征与数据模型组成要素"   >
          <a href="#3-1-数据特征与数据模型组成要素" class="heading-link"><i class="fas fa-link"></i></a>3.1 数据特征与数据模型组成要素</h3>
      
        <h4 id="3-1-1-数据结构"   >
          <a href="#3-1-1-数据结构" class="heading-link"><i class="fas fa-link"></i></a>3.1.1 数据结构</h4>
      <p>数据结构描述的是系统的<strong>静态特性</strong>，即数据对象的数据类型、内容、属性以及数据对象之间的联系。</p>
<p><code>数据结构例：家谱的结构-树状结构，火车站排队买票-队列结构</code><br><code>数据结构例：地铁线路图-图结构</code></p>

        <h4 id="3-1-2-数据操作"   >
          <a href="#3-1-2-数据操作" class="heading-link"><i class="fas fa-link"></i></a>3.1.2 数据操作</h4>
      <p>数据操作描述的是系统的<strong>动态特性</strong>，是对各种对象的实例允许执行的操作的集合，包括操作及有关的操作规则。</p>

        <h4 id="3-1-3-数据的约束条件"   >
          <a href="#3-1-3-数据的约束条件" class="heading-link"><i class="fas fa-link"></i></a>3.1.3 数据的约束条件</h4>
      <p>数据约束描述数据结构中数据间的语法和语义关联，包括良好制约与依存关系以及数据动态变化规则，以保证数据的正确性、有效性和相容性。</p>
<p><code>约束条件例：高考中，考生的语文，老师只能录入0到150分，这就是约束条件，还有一个-1，-1表示缺考</code></p>

        <h3 id="3-2-数据模型的分类"   >
          <a href="#3-2-数据模型的分类" class="heading-link"><i class="fas fa-link"></i></a>3.2 数据模型的分类</h3>
      
        <h4 id="3-2-1-概念层数据模型（重点）"   >
          <a href="#3-2-1-概念层数据模型（重点）" class="heading-link"><i class="fas fa-link"></i></a>3.2.1 概念层数据模型（重点）</h4>
      <p>信息时间中的基本概念</p>

        <h5 id="实体（Entity）"   >
          <a href="#实体（Entity）" class="heading-link"><i class="fas fa-link"></i></a>实体（Entity）</h5>
      <p>客观存在并可相互区别的时候称为实体。可以是具体的人、事、物或者抽象的概念。</p>
<p><code>例子：工厂向客户供货，客户多种零部件，工厂、客户、零部件都是实体，所以实体是相互区分的。</code></p>

        <h5 id="属性（Attribute）"   >
          <a href="#属性（Attribute）" class="heading-link"><i class="fas fa-link"></i></a>属性（Attribute）</h5>
      <p>实体所具有的某一特性称为属性。一个实体可以有若干个属性来刻画。</p>
<p><code>例：比如一个人的性别、职业、居住地这些都是描述一个人的属性</code></p>

        <h5 id="码（Key）"   >
          <a href="#码（Key）" class="heading-link"><i class="fas fa-link"></i></a>码（Key）</h5>
      <p>唯一标识实体的属性集称为码</p>

        <h5 id="域（Domain）"   >
          <a href="#域（Domain）" class="heading-link"><i class="fas fa-link"></i></a>域（Domain）</h5>
      <p>属性的取值范围称为该属性的域<br><code>例：域属性月份只能1到12月</code></p>

        <h5 id="实体型（Entity-Type）"   >
          <a href="#实体型（Entity-Type）" class="heading-link"><i class="fas fa-link"></i></a>实体型（Entity Type）</h5>
      <p>用实体名及其属性名计划来抽象和刻画，同类型实体的实体型。</p>
<blockquote>
<p>理解不了可以不理解 考试不考</p>
</blockquote>

        <h5 id="实体集（Entity-Set）"   >
          <a href="#实体集（Entity-Set）" class="heading-link"><i class="fas fa-link"></i></a>实体集（Entity Set）</h5>
      <p>同型实体的集合称为实体集</p>
<blockquote>
<p>理解不了可以不理解 考试不考</p>
</blockquote>

        <h5 id="联系（Relationship）"   >
          <a href="#联系（Relationship）" class="heading-link"><i class="fas fa-link"></i></a>联系（Relationship）</h5>
      <p>现实世界中事物内部以及事物之间的联系在信息时间中反映为实体内部的实体之间的联系。</p>
<p>实体型间联系：<br><strong>一对多 1:N</strong><br><strong>一对一 1:1</strong><br><strong>多对多 N:M</strong></p>
<p><code>例：身份证--手机   1对1</code><br><code>例：去商店买东西，顾客与产品   1对多</code><br><code>例：学生与课程之间关系 多对多</code></p>

        <h4 id="3-2-2-概念模型的表示方法"   >
          <a href="#3-2-2-概念模型的表示方法" class="heading-link"><i class="fas fa-link"></i></a>3.2.2 概念模型的表示方法</h4>
      <p>概念模型：用来描述现实时间的事物，与具体的计算机系统无关</p>
<p>最典型的概念模型是实体联系（E-R）</p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">表示方法</span><br><span class="line">&lt;矩形&gt;实体&lt;矩形&gt;</span><br><span class="line">&lt;棱形&gt;联系&lt;棱形&gt; </span><br><span class="line">&lt;椭圆&gt;属性&lt;椭圆&gt;</span><br></pre></td></tr></table></div></figure>

<p><img src="https://i.loli.net/2020/03/08/P3SLXFJ6RewtgVi.png" alt="er01.png"></p>

        <h4 id="3-2-3-逻辑层数据模型"   >
          <a href="#3-2-3-逻辑层数据模型" class="heading-link"><i class="fas fa-link"></i></a>3.2.3 逻辑层数据模型</h4>
      <p>(1)层次模型<br>(2)网状模型<br><strong>(3)关系模型</strong><br>(4)面向对象模型 //在关系模型上发展而来。</p>

        <h4 id="3-2-4-物理层数据模型"   >
          <a href="#3-2-4-物理层数据模型" class="heading-link"><i class="fas fa-link"></i></a>3.2.4 物理层数据模型</h4>
      <p>物理层数据模型，也称为数据的物理模型（Physical Model）,其描述数据在存储介质上的组织结构，是逻辑模型的物理实现，即每一种逻辑模型在实现时都有与其相应的物理模型。</p>
<p>概念（外模式）-&gt;逻辑（模式）-&gt;物理（内模式）</p>

        <h2 id="四、本章小结"   >
          <a href="#四、本章小结" class="heading-link"><i class="fas fa-link"></i></a>四、本章小结</h2>
      <p>本章概述了数据库相关的基本概念，<br>并通过对数据管理技术发展历程的介绍，<br>阐述了数据库技术产生和发展的背景，以及数据库系统的特点，<br>同时详细介绍了数据库的三级模式结构和运行与应用结构，<br>最后终点介绍了数据模式的概念，组成要素与分类。</p>

        <h2 id="五、重点"   >
          <a href="#五、重点" class="heading-link"><i class="fas fa-link"></i></a>五、重点</h2>
      <ol>
<li>数据库系统的三级模式结构</li>
<li>数据模式中概念层模型（E-R模型）与逻辑层模型（关系模型）。</li>
</ol>
]]></content>
      <categories>
        <category>自考专升本</category>
      </categories>
      <tags>
        <tag>数据库系统原理</tag>
      </tags>
  </entry>
  <entry>
    <title>【数据库系统原理】第三章 数据库设计</title>
    <url>/2020/04/03/%E3%80%90%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86%E3%80%91%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/03/19/WUY6sSjGxBKiahA.png" alt="数据库系统原理-第三章-脑图-min.png"></p>

        <h2 id="一、数据库设计概述"   >
          <a href="#一、数据库设计概述" class="heading-link"><i class="fas fa-link"></i></a>一、数据库设计概述</h2>
      
        <h3 id="1-1-数据库的生命周期"   >
          <a href="#1-1-数据库的生命周期" class="heading-link"><i class="fas fa-link"></i></a>1.1 数据库的生命周期</h3>
      <ul>
<li>数据库的生命周期可分为两个阶段，分别是</li>
<li><code>数据库分析与设计阶段</code></li>
<li><code>数据库实现与操作阶段</code><ul>
<li>其中，数据库分析与设计阶段包括<ul>
<li>需求分析</li>
<li>概念设计</li>
<li>逻辑设计</li>
<li>物理设计四个环节；</li>
</ul>
</li>
<li>数据库实现与操作阶段包括<ul>
<li>数据库的实现、</li>
<li>操作与监督、</li>
<li>修改与调整三个子阶段</li>
</ul>
</li>
</ul>
</li>
</ul>
<a id="more"></a>


        <h3 id="1-2-数据库设计的目标"   >
          <a href="#1-2-数据库设计的目标" class="heading-link"><i class="fas fa-link"></i></a>1.2 数据库设计的目标</h3>
      <p>事实上，数据库设计具有两个十分重要的目标，即</p>
<ul>
<li><code>满足应用功能需求</code></li>
<li><code>良好的数据库性能</code></li>
</ul>

        <h3 id="1-3-数据库设计的内容"   >
          <a href="#1-3-数据库设计的内容" class="heading-link"><i class="fas fa-link"></i></a>1.3 数据库设计的内容</h3>
      <p>数据库设计是从用户对数据的需求出发，研究并构造数据库的过程，其包含两个方面的内容：</p>
<ol>
<li>数据库<code>结构</code>设计</li>
<li>数据库<code>行为</code>设计<code>(增删改查)</code></li>
</ol>

        <h3 id="1-4-数据库设计的方法"   >
          <a href="#1-4-数据库设计的方法" class="heading-link"><i class="fas fa-link"></i></a>1.4 数据库设计的方法</h3>
      <ol>
<li>直观设计法</li>
<li>规范设计法<ol>
<li>新奥尔良（New Orleans）设计方法</li>
<li>基于E-R模型的数据库设计方法</li>
<li>基于第三范式的设计方法</li>
</ol>
</li>
<li>计算机辅助设计法</li>
</ol>
<p><code>UNNL建模工具（Rose、visio、powerdessigne）</code></p>

        <h3 id="1-5-数据库设计的过程"   >
          <a href="#1-5-数据库设计的过程" class="heading-link"><i class="fas fa-link"></i></a>1.5 数据库设计的过程</h3>
      <p><img src="https://i.loli.net/2020/03/17/9y3bJdGj87XDVqc.png" alt="数据库02-min.png"></p>

        <h2 id="二、数据库设计的基本步骤（考试重点）"   >
          <a href="#二、数据库设计的基本步骤（考试重点）" class="heading-link"><i class="fas fa-link"></i></a>二、数据库设计的基本步骤（考试重点）</h2>
      
        <h3 id="2-1-需求分析"   >
          <a href="#2-1-需求分析" class="heading-link"><i class="fas fa-link"></i></a>2.1 需求分析</h3>
      
        <h4 id="2-1-1-确定数据库范围"   >
          <a href="#2-1-1-确定数据库范围" class="heading-link"><i class="fas fa-link"></i></a>2.1.1 确定数据库范围</h4>
      <p>数据库设计的第一项工作就是要确定数据库范围，即确定数据库应支持哪些应用功能。</p>

        <h4 id="2-1-2-应用过程分析"   >
          <a href="#2-1-2-应用过程分析" class="heading-link"><i class="fas fa-link"></i></a>2.1.2 应用过程分析</h4>
      <p>应用过程分析是指了解并分析数据与数据处理间的关系在数据库范围确定之后，数据库设计人员应逐次地了解和分析每一部门或功能要用到哪些数据、数据使用的顺序、对数据作何处理和处理的策略以及处理的结果等。</p>

        <h4 id="2-1-3-收集与分析数据"   >
          <a href="#2-1-3-收集与分析数据" class="heading-link"><i class="fas fa-link"></i></a>2.1.3 收集与分析数据</h4>
      
        <h5 id="静态结果"   >
          <a href="#静态结果" class="heading-link"><i class="fas fa-link"></i></a>静态结果</h5>
      <p>数据的静态结构是指不施加应用操作与其上时数据的原始状况，这可通过数据分类表和数据元素表进行说明。</p>

        <h5 id="动态结构"   >
          <a href="#动态结构" class="heading-link"><i class="fas fa-link"></i></a>动态结构</h5>
      <p>动态结构是指将应用操作施加于数据之上数据的状态，可通过任务分类表和数据操作特征表进行说明。</p>

        <h5 id="数据约束"   >
          <a href="#数据约束" class="heading-link"><i class="fas fa-link"></i></a>数据约束</h5>
      <p>数据约束是指使用数据时的特殊要求。</p>

        <h5 id="编写需求分析报告"   >
          <a href="#编写需求分析报告" class="heading-link"><i class="fas fa-link"></i></a>编写需求分析报告</h5>
      <p>需求分析报告通常包含如下内容</p>
<ol>
<li>数据库的应用功能目标<code>(功能、性能要求)</code></li>
<li>标明不同用户视图范围<code>(学生不能有修改成绩的界面)</code></li>
<li>应用处理过程需求说明</li>
<li>数据字典</li>
<li>数据量</li>
<li>数据约束</li>
</ol>

        <h3 id="2-2-概念结构设计"   >
          <a href="#2-2-概念结构设计" class="heading-link"><i class="fas fa-link"></i></a>2.2 概念结构设计</h3>
      <p>概念结构设计的任务是在需求分析中产生的需求分析报告的基础上，按照特定的方法设计满足应用需求的用户信息结构，该信息结构通常称为概念模型。</p>
<p>其中是采用<code>E-R图</code>作为概念模型的描述工具。</p>

        <h3 id="2-3-逻辑结构设计"   >
          <a href="#2-3-逻辑结构设计" class="heading-link"><i class="fas fa-link"></i></a>2.3 逻辑结构设计</h3>
      <p> <img src="https://i.loli.net/2020/03/17/b6N9i5ZCIl7Vkny.png" alt="逻辑结构设计-min.png"></p>

        <h3 id="2-4-物理设计"   >
          <a href="#2-4-物理设计" class="heading-link"><i class="fas fa-link"></i></a>2.4 物理设计</h3>
      <p> 物理设计是指对于一个给定的数据库逻辑结构，研究并构造物理结构的过程，其具体任务主要是确定数据库在存储设备上的存储结构及存取方法，因DBMS的不同还可能包括建立索引和聚集，以及物理块大小、缓冲区个数和大小、数据压缩的选择等。</p>

        <h3 id="2-5-数据库实施"   >
          <a href="#2-5-数据库实施" class="heading-link"><i class="fas fa-link"></i></a>2.5 数据库实施</h3>
      <ol>
<li>加载数据</li>
<li>应用程序设计</li>
<li>数据库试运行</li>
</ol>

        <h3 id="2-6-数据库运行和维护"   >
          <a href="#2-6-数据库运行和维护" class="heading-link"><i class="fas fa-link"></i></a>2.6 数据库运行和维护</h3>
      <p>只有经过试运行之后，确定系统无故障或暂未发现故障时，系统才能投入到生产实际中运行。</p>
<p>数据库系统投入实际运行标志着数据库设计和应用开发的基本完成，但绝不意味着设计和应用开发工作的终止。</p>
<p>系统维护中最困难的工作是数据库重组与重构。</p>

        <h2 id="三、关系数据库设计方法"   >
          <a href="#三、关系数据库设计方法" class="heading-link"><i class="fas fa-link"></i></a>三、关系数据库设计方法</h2>
      
        <h3 id="3-1-关系数据库设计过程与各级模式"   >
          <a href="#3-1-关系数据库设计过程与各级模式" class="heading-link"><i class="fas fa-link"></i></a>3.1 关系数据库设计过程与各级模式</h3>
      <p>   <img src="https://i.loli.net/2020/03/17/CWTKzirBpZNRcx7.png" alt="关系数据库各级模式01-min.png"></p>

        <h3 id="3-2-概念结构设计方法"   >
          <a href="#3-2-概念结构设计方法" class="heading-link"><i class="fas fa-link"></i></a>3.2 概念结构设计方法</h3>
      
        <h4 id="3-2-1-E-R图的表示方法"   >
          <a href="#3-2-1-E-R图的表示方法" class="heading-link"><i class="fas fa-link"></i></a>3.2.1 E-R图的表示方法</h4>
      <p><img src="https://i.loli.net/2020/03/17/se1izZjHKTxQcEw.png" alt="E-R图的表示方法1-min.png"> </p>

        <h5 id="三个实体型之间的一对多联系"   >
          <a href="#三个实体型之间的一对多联系" class="heading-link"><i class="fas fa-link"></i></a>三个实体型之间的一对多联系</h5>
      <p><img src="https://i.loli.net/2020/03/17/9h4ufEkPIHCzRdZ.png" alt="两个以上的实体型之间的联系-min.png"> </p>

        <h5 id="三个实体型之间的多对多联系"   >
          <a href="#三个实体型之间的多对多联系" class="heading-link"><i class="fas fa-link"></i></a>三个实体型之间的多对多联系</h5>
      <p><img src="https://i.loli.net/2020/03/17/jAlfsBpqnREg2rb.png" alt="三个实体型-min.png"> </p>

        <h5 id="单个实体型内的联系"   >
          <a href="#单个实体型内的联系" class="heading-link"><i class="fas fa-link"></i></a>单个实体型内的联系</h5>
      <p><img src="https://i.loli.net/2020/03/17/uaNvAWSJrt4mROc.png" alt="单个实体型内的联系-min.png"></p>

        <h4 id="3-2-2-局部信息结构设计"   >
          <a href="#3-2-2-局部信息结构设计" class="heading-link"><i class="fas fa-link"></i></a>3.2.2 局部信息结构设计</h4>
      <ol>
<li>确定局部范围</li>
<li>选择实体</li>
<li>选择实体的关键字属性</li>
<li>确定实体间的联系</li>
<li>确定实体的属性</li>
</ol>
<p>  <img src="https://i.loli.net/2020/03/17/IzXm9NGUaWb75yt.png" alt="局部信息结构设计-min.png"></p>

        <h4 id="3-2-3-全局信息结构设计"   >
          <a href="#3-2-3-全局信息结构设计" class="heading-link"><i class="fas fa-link"></i></a>3.2.3 全局信息结构设计</h4>
      <ul>
<li>属性冲突</li>
<li>命名冲突</li>
<li>结构冲突</li>
</ul>
<ol>
<li>E-R图向关系模型的转换</li>
<li>数据模型的优化</li>
<li>设计用户子模式</li>
</ol>

        <h2 id="四、物理设计方法"   >
          <a href="#四、物理设计方法" class="heading-link"><i class="fas fa-link"></i></a>四、物理设计方法</h2>
      <ul>
<li>建立索引</li>
<li>建立聚集</li>
</ul>

        <h2 id="五、本章小结"   >
          <a href="#五、本章小结" class="heading-link"><i class="fas fa-link"></i></a>五、本章小结</h2>
      <p>本章首先概述了数据库设计相关的知识，包括数据库的生命周期、数据库设计的目标、内容、方法与过程。</p>
<p>然后具体介绍了数据库设计的几个基本步骤，即需求分析、概念结构设计、逻辑设计设计、物理结构设计、数据库实施、数据库的运行和维护。</p>
<p>最后重点介绍关系数据的概念结构设计与逻辑结构设计过程中所涉及的关系技术与方法。</p>

        <h3 id="5-1-本章学习重点"   >
          <a href="#5-1-本章学习重点" class="heading-link"><i class="fas fa-link"></i></a>5.1 本章学习重点</h3>
      <p>关系数据库设计的具体方法与步骤</p>

        <h3 id="5-2-本章学习难点"   >
          <a href="#5-2-本章学习难点" class="heading-link"><i class="fas fa-link"></i></a>5.2 本章学习难点</h3>
      <p>使用E-R图进行数据库概念设计的过程，以及其向关系模型转换的方法。</p>
]]></content>
      <categories>
        <category>自考专升本</category>
      </categories>
      <tags>
        <tag>数据库系统原理</tag>
      </tags>
  </entry>
  <entry>
    <title>【数据库系统原理】第二章 关系数据库</title>
    <url>/2020/04/03/%E3%80%90%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86%E3%80%91%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[
        <h2 id="一、关系数据库概述"   >
          <a href="#一、关系数据库概述" class="heading-link"><i class="fas fa-link"></i></a>一、关系数据库概述</h2>
      
        <h3 id="1-1-关系数据库的历史"   >
          <a href="#1-1-关系数据库的历史" class="heading-link"><i class="fas fa-link"></i></a>1.1 关系数据库的历史</h3>
      <ul>
<li>1970 提出关系数据模型</li>
<li>之后 提出了关系代数和关系演算的概念</li>
<li>1972 提出了关系的第一、第二、第三范式</li>
<li>1974 提出了关系的BC范式</li>
<li>80年代后，关系数据库系统成为最重要、最流行的数据库系统。</li>
</ul>
<p>典型实验系统：<br>System R、University INGRES</p>
<p>典型商用系统<br>ORACLE、SYBASE、INFORMIX、IBM DB2</p>
<a id="more"></a>


        <h2 id="二、关系数据模型"   >
          <a href="#二、关系数据模型" class="heading-link"><i class="fas fa-link"></i></a>二、关系数据模型</h2>
      
        <h3 id="2-1-关系数据模型的定义"   >
          <a href="#2-1-关系数据模型的定义" class="heading-link"><i class="fas fa-link"></i></a>2.1 关系数据模型的定义</h3>
      <p>关系模型的数据结构非常简单、只包含单一的数据结构，即关系<code>(二维表)</code>。</p>
<p>例如一张记录学生基本信息的二维表格</p>
<div class="table-container"><table>
<thead>
<tr>
<th>学号</th>
<th>姓名</th>
<th>班级</th>
<th>性别</th>
</tr>
</thead>
<tbody><tr>
<td>001</td>
<td>小明</td>
<td>计算机一班</td>
<td>男</td>
</tr>
<tr>
<td>002</td>
<td>小红</td>
<td>计算机二班</td>
<td>女</td>
</tr>
</tbody></table></div>

        <h3 id="2-2-关系数据模型的基本术语"   >
          <a href="#2-2-关系数据模型的基本术语" class="heading-link"><i class="fas fa-link"></i></a>2.2 关系数据模型的基本术语</h3>
      <p><code>记录===行===元组</code><br><code>属性===列===字段</code></p>

        <h4 id="2-2-1-表（Table）"   >
          <a href="#2-2-1-表（Table）" class="heading-link"><i class="fas fa-link"></i></a>2.2.1 表（Table）</h4>
      <p>表，也称为关系，是一个二维的数据结构，它由表名、构成表的各个列<code>(属性)</code>（如学号、姓名等）及若干行<code>(记录/元组)</code>数据（各个学生的具体信息）组成。</p>
<p>每个表有一个唯一的表名，表中每一行数据描述一条具体的记录值，如一个学生的基本信息。</p>

        <h4 id="2-2-2-关系（Relation）"   >
          <a href="#2-2-2-关系（Relation）" class="heading-link"><i class="fas fa-link"></i></a>2.2.2 关系（Relation）</h4>
      <p>一个关系逻辑上对应一张二维表，可以为每个关系取一个名称进行标识</p>

        <h4 id="2-2-3-列（Column）"   >
          <a href="#2-2-3-列（Column）" class="heading-link"><i class="fas fa-link"></i></a>2.2.3 列（Column）</h4>
      <ul>
<li>表中的列，也称作字段（Field）或者属于（Attitude）。</li>
<li>表中每一列有一个名称，称为列名、字段名或属性。</li>
<li>每一列表示实体的一个属性，具有相同的数据类型。</li>
</ul>

        <h4 id="2-2-4-属性-Attribute"   >
          <a href="#2-2-4-属性-Attribute" class="heading-link"><i class="fas fa-link"></i></a>2.2.4 属性 (Attribute)</h4>
      <ul>
<li>表中的一列即为一个属性，给每一个属性起一个名称即属性名。</li>
<li>与之同义的术语是”列”。</li>
<li>表中属性的个数称为关系的<strong>元</strong>或度。</li>
<li>列的值称为属性值；</li>
<li>属性值的取值范围称为值域。</li>
</ul>

        <h4 id="2-2-5-Row"   >
          <a href="#2-2-5-Row" class="heading-link"><i class="fas fa-link"></i></a>2.2.5 (Row)</h4>
      <p>表中的行（Row），也称作元组（Tuple）或记录（Record）</p>

        <h4 id="2-2-6（Tuple）"   >
          <a href="#2-2-6（Tuple）" class="heading-link"><i class="fas fa-link"></i></a>2.2.6（Tuple）</h4>
      <p>表中的一行即为一个元组。</p>

        <h4 id="2-2-7-分量（Component）"   >
          <a href="#2-2-7-分量（Component）" class="heading-link"><i class="fas fa-link"></i></a>2.2.7.分量（Component）</h4>
      <p>元组中的一个属性值，称为分量。</p>

        <h4 id="2-2-8-码或键（Key）"   >
          <a href="#2-2-8-码或键（Key）" class="heading-link"><i class="fas fa-link"></i></a>2.2.8.码或键（Key）</h4>
      <p>如果在一个关系中，存在这样的属性（或属性组）,使得到该关系的任何一个关系状态中的两个元组，在该属性（或属性组）上值的组合都不相同，即这些属（属性组）的值都能用来唯一的标识该关系的元组，则称此属性（或属性组）为该关系的码或键。</p>

        <h4 id="2-2-9-超码或超键（Super-Key）"   >
          <a href="#2-2-9-超码或超键（Super-Key）" class="heading-link"><i class="fas fa-link"></i></a>2.2.9 超码或超键（Super Key）</h4>
      <p>如果在关系的一个码中移去某个属性，它仍然是这个关系的码，则称这样的码或键位该关系的超码或超键。</p>

        <h4 id="2-2-10-候选码或候选键（Candidate-Key）"   >
          <a href="#2-2-10-候选码或候选键（Candidate-Key）" class="heading-link"><i class="fas fa-link"></i></a>2.2.10 候选码或候选键（Candidate Key）</h4>
      <p>如果在关系的一个码或键中，不能从中移去任何一个属性，否则它就不是这个关系的码或键，则称这样的码或键为关系的候选码或候选键。</p>

        <h4 id="2-2-11-主码或主键（Primary-Key）"   >
          <a href="#2-2-11-主码或主键（Primary-Key）" class="heading-link"><i class="fas fa-link"></i></a>2.2.11 主码或主键（Primary Key）</h4>
      <p>在一个关系的若干个候选码或候选键中指定一个用来唯一标识关系的元组，则称这个被指定的候选码或候选键为该关系的主码或主键。<code>(一个表尽量保证只有一个主键和一个候选码)</code></p>

        <h4 id="2-2-12-全码或全键（All-Key）"   >
          <a href="#2-2-12-全码或全键（All-Key）" class="heading-link"><i class="fas fa-link"></i></a>2.2.12 全码或全键（All-Key）</h4>
      <p>一个关系模式的所以属性集合是这个关系的主码或主键则称这样的主码或主键为全码或全键。</p>

        <h4 id="2-2-13-主属性（Primary-Attribute）和非主属性（Nonprimary-Attribute）"   >
          <a href="#2-2-13-主属性（Primary-Attribute）和非主属性（Nonprimary-Attribute）" class="heading-link"><i class="fas fa-link"></i></a>2.2.13 主属性（Primary Attribute）和非主属性（Nonprimary Attribute）</h4>
      <p>关系中包含在任何一个候选码中的属性称为主属性或码属性，不包含在任何一个候选码中的属性称为飞主属性或非码属性。</p>

        <h4 id="2-2-14-外码或外键（Foreign-Key）重点"   >
          <a href="#2-2-14-外码或外键（Foreign-Key）重点" class="heading-link"><i class="fas fa-link"></i></a>2.2.14 外码或外键（Foreign Key）重点</h4>
      <p>当关系中的某个属性（或属性组）不是这个关系的主码或候选码，而是另一关系的主码时，称该属性（或属性组）为这个关系的外码或外键。</p>
<p><code>两个表之间</code></p>

        <h4 id="2-2-15-参照关系（Referencing-Relation）和被参照关系（Referenced-Relation）"   >
          <a href="#2-2-15-参照关系（Referencing-Relation）和被参照关系（Referenced-Relation）" class="heading-link"><i class="fas fa-link"></i></a>2.2.15 参照关系（Referencing Relation）和被参照关系（Referenced Relation）</h4>
      <ul>
<li>参照关系也称为从关系，被参照关系也称为主关系，它们是指以外码相关联的两个关系。</li>
<li>以外码作为主码的关系称为被参照关系；</li>
<li>外码所在的关系称为参照关系。</li>
<li>被参照关系与参照关系是通过外码相联系的，这种联系通常是一对多的联系。</li>
</ul>

        <h4 id="2-2-16-域（Domain）"   >
          <a href="#2-2-16-域（Domain）" class="heading-link"><i class="fas fa-link"></i></a>2.2.16 域（Domain）</h4>
      <p>域表示属性的取值范围</p>

        <h4 id="2-2-17-数据类型（Data-Type）"   >
          <a href="#2-2-17-数据类型（Data-Type）" class="heading-link"><i class="fas fa-link"></i></a>2.2.17 数据类型（Data Type）</h4>
      <ul>
<li>表中每个列都是有相应的数据类型，它用于限制（或容许）该列中存储的数据。</li>
<li>每个字段表示同一类信息，具有相同的数据类型。</li>
</ul>

        <h4 id="2-2-18-关系模式（Relation-Schema）"   >
          <a href="#2-2-18-关系模式（Relation-Schema）" class="heading-link"><i class="fas fa-link"></i></a>2.2.18 关系模式（Relation Schema）</h4>
      <ul>
<li>同数据模型一样，数据库也有“型”（type）和“值”（value）之分。</li>
<li>在关系数据库中，关系模式是型，关系是值，即关系模式是对关系的描述。</li>
<li>关系模式是静态的、稳定的、而关系是动态的、随时间不断变化的。</li>
</ul>
<p><code>表名（_____）这就是关系模式</code></p>

        <h4 id="2-2-19-关系数据库（Relation-Database）"   >
          <a href="#2-2-19-关系数据库（Relation-Database）" class="heading-link"><i class="fas fa-link"></i></a>2.2.19 关系数据库（Relation Database）</h4>
      <p>关系数据库是以关系模型作为数据的逻辑模型，并采用关系作为数据组织方式的一类数据组织方式的一类数组库，其数据库操作的建立在关系代数的基础上。</p>
<p>1对1<br>1对多<br>多对多</p>

        <h3 id="2-3-表（关系）的结构定义"   >
          <a href="#2-3-表（关系）的结构定义" class="heading-link"><i class="fas fa-link"></i></a>2.3 表（关系）的结构定义</h3>
      <p>例如：表<code>tb_student</code>的结构定义</p>
<div class="table-container"><table>
<thead>
<tr>
<th>含义</th>
<th>字段名</th>
<th>数据类型</th>
<th>宽度</th>
</tr>
</thead>
<tbody><tr>
<td>学号</td>
<td>studentNO</td>
<td>字符型</td>
<td>10</td>
</tr>
<tr>
<td>姓名</td>
<td>studentName</td>
<td>字符型</td>
<td>20</td>
</tr>
<tr>
<td>性别</td>
<td>sex</td>
<td>字符型</td>
<td>3</td>
</tr>
<tr>
<td>出生日期</td>
<td>birthday</td>
<td>日期型</td>
<td></td>
</tr>
<tr>
<td>籍贯</td>
<td>native</td>
<td>字符型</td>
<td>20</td>
</tr>
<tr>
<td>民族</td>
<td>nation</td>
<td>字符型</td>
<td>30</td>
</tr>
<tr>
<td>班级编号</td>
<td>classNo</td>
<td>字符型</td>
<td>8</td>
</tr>
<tr>
<td>身份证号</td>
<td>studentID</td>
<td>字符型</td>
<td>18</td>
</tr>
</tbody></table></div>

        <h4 id="2-3-1-问题"   >
          <a href="#2-3-1-问题" class="heading-link"><i class="fas fa-link"></i></a>2.3.1 问题</h4>
      <p>关系模型中，候选码（可由一个或多个其值能唯一标识该关系模式中任何元组的属性组成）</p>

        <h2 id="三、关系操作集合"   >
          <a href="#三、关系操作集合" class="heading-link"><i class="fas fa-link"></i></a>三、关系操作集合</h2>
      
        <h3 id="3-1-基本的关系操作"   >
          <a href="#3-1-基本的关系操作" class="heading-link"><i class="fas fa-link"></i></a>3.1 基本的关系操作</h3>
      
        <h4 id="3-1-1-查询（考试重点）"   >
          <a href="#3-1-1-查询（考试重点）" class="heading-link"><i class="fas fa-link"></i></a>3.1.1 查询（考试重点）</h4>
      <p>选择、投影、连接、除、并、交、差、笛卡尔积</p>

        <h4 id="3-1-2-数据更新"   >
          <a href="#3-1-2-数据更新" class="heading-link"><i class="fas fa-link"></i></a>3.1.2 数据更新</h4>
      <p>插入、删除、修改<br>查询的表达能力很强，是其中最主要的部分</p>

        <h4 id="3-1-3-关系操作的特点"   >
          <a href="#3-1-3-关系操作的特点" class="heading-link"><i class="fas fa-link"></i></a>3.1.3 关系操作的特点</h4>
      <p>集合操作方式，即操作的对象和结果都是集合</p>

        <h3 id="3-2-关系数据语言的分类"   >
          <a href="#3-2-关系数据语言的分类" class="heading-link"><i class="fas fa-link"></i></a>3.2 关系数据语言的分类</h3>
      <ul>
<li>关系操作的能力可以用两种方式来表示：<strong>代数方式</strong>和<strong>逻辑方式</strong><ul>
<li>代数方式主要有<strong>关系代数</strong>，它是通过对关系的操作来表达查询要求的方式</li>
<li>逻辑方式主要有<strong>关系演算</strong>，它是用谓词来表达查询要求的方式。</li>
</ul>
</li>
<li>具有后关系代数的和关系演算双重特点的语言。典型代表是<strong>SQL</strong></li>
</ul>

        <h3 id="3-3-关系代数"   >
          <a href="#3-3-关系代数" class="heading-link"><i class="fas fa-link"></i></a>3.3 关系代数</h3>
      
        <h4 id="3-3-1-集合运算符和专门的关系运算符"   >
          <a href="#3-3-1-集合运算符和专门的关系运算符" class="heading-link"><i class="fas fa-link"></i></a>3.3.1 集合运算符和专门的关系运算符</h4>
      <p><img src="https://i.loli.net/2020/03/10/RdsBeoW5ZCNYmcO.png" alt="dataBase01-min.png"></p>
<p>笛卡尔积是一种特殊的运算</p>
<p>例子<br>有个集合a={1,2,3,4}<br>有个集合b={3,4,5,6}</p>
<p>a并b 1,2,3,4,5,6<br>a交b 3,4<br>a差b 1，2<br>b差a 5，6</p>
<p>(笛卡尔乘积)a*b 一维变成二维的操作 在a集合中取一个元素跟b集合的各元素进行组合 {<br>1,3; 1,4; 1,5; 1,6;<br>2,3; 2,4; 2,5; 2,6;<br>3,3; 3,4; 3,5; 3,6;<br>4,3; 4,4; 4,5; 3,6;<br>}</p>

        <h4 id="3-3-2-比较操作符与逻辑操作符"   >
          <a href="#3-3-2-比较操作符与逻辑操作符" class="heading-link"><i class="fas fa-link"></i></a>3.3.2 比较操作符与逻辑操作符</h4>
      <p><img src="https://i.loli.net/2020/03/10/OVmFulT6UcBSAIL.png" alt="database02-min.png"></p>

        <h4 id="3-3-3-传统的集合运算"   >
          <a href="#3-3-3-传统的集合运算" class="heading-link"><i class="fas fa-link"></i></a>3.3.3 传统的集合运算</h4>
      <p>并、差、交、广义笛卡尔积<br>并（UNION）<br>交（INTERSECTION）<br>差（DIFFERENCE）<br>笛卡尔积 （CARTESIAN PRODUCT）</p>

        <h4 id="3-3-4-专门的关系运算"   >
          <a href="#3-3-4-专门的关系运算" class="heading-link"><i class="fas fa-link"></i></a>3.3.4 专门的关系运算</h4>
      <p>选择、投影、连接、除</p>

        <h5 id="选择（SELECT）"   >
          <a href="#选择（SELECT）" class="heading-link"><i class="fas fa-link"></i></a>选择（SELECT）</h5>
      <pre><code>SELECT 关系名 WHERE 条件</code></pre><p>其中，条件是由常数、属性名或列名、比较操作符及逻辑操作符组成的条件表达式。<br>比较操作符：<code>&gt;、&gt;=、&lt;、&lt;=、=、！=</code><br>逻辑操作符<code>^、V、¬</code></p>

        <h5 id="投影-PEOJECTION"   >
          <a href="#投影-PEOJECTION" class="heading-link"><i class="fas fa-link"></i></a>投影(PEOJECTION)</h5>
      <p>投影操作表示为：πA(R)</p>
<p>其中，R为被运算关系名，A为属性序列<br>PROJECTION 关系名（属性名1,属性名2,…,属性名n）</p>
<p><code>列数变了,行数没有变===&gt;投影</code></p>
<p>例如<br>关系名叫R</p>
<div class="table-container"><table>
<thead>
<tr>
<th>A</th>
<th>B</th>
<th>C</th>
<th>D</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table></div>
<p>我们要A与C列叫做πA,C(R) <code>叫A与C投影在关系R上</code></p>

        <h5 id="连接-JOIN"   >
          <a href="#连接-JOIN" class="heading-link"><i class="fas fa-link"></i></a>连接(JOIN)</h5>
      <p>连接运算表示为：</p>
<p><img src="https://i.loli.net/2020/03/11/XgT24YBjEZQJucW.png" alt="database03-min.png"></p>
<p>R和S代表 两个不同的关系；<br>i和j分别代表R的第i列和S的第j列属性；<br><code>Θ</code>代表比较运算符&gt;、&gt;=、&lt;、&lt;、==、 !=、</p>
<p><strong>JOIN 关系名1 AND 关系名2 WHERE 条件</strong></p>
<p>例子如下</p>
<p>下表是：R关系</p>
<div class="table-container"><table>
<thead>
<tr>
<th>A</th>
<th>B</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>2</td>
</tr>
<tr>
<td>3</td>
<td>4</td>
</tr>
</tbody></table></div>
<p>下表是：S关系</p>
<div class="table-container"><table>
<thead>
<tr>
<th align="center">B</th>
<th align="center">C</th>
<th align="center">D</th>
</tr>
</thead>
<tbody><tr>
<td align="center">2</td>
<td align="center">1</td>
<td align="center">7</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">3</td>
<td align="center">8</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">5</td>
<td align="center">9</td>
</tr>
</tbody></table></div>
<p>现在要将R与S做一个连接。R的B列等于S的B列，在这里连接是一个笛卡尔乘积，是一个限定了条件的笛卡尔乘积</p>
<p>首先，因为是笛卡尔乘积，列数会变多 由原来的变成了五列,然后选择出R与S共同的元素2那一排。得出结果</p>
<div class="table-container"><table>
<thead>
<tr>
<th align="center">A</th>
<th align="center">R.B</th>
<th align="center">S.B</th>
<th align="center">C</th>
<th align="center">D</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">2</td>
<td align="center">2</td>
<td align="center">1</td>
<td align="center">7</td>
</tr>
</tbody></table></div>
<p>3.3.4.4 除（DIVISION）<br>除关系表示为：R÷S<br>其中R和S代表两个不同的关系。在除运算中，若被除关系为m元关系，除关系为n元关系，则运算结果为一个m-n元关系</p>
<blockquote>
<p>除操作是乘操作的逆运算</p>
</blockquote>
<p>例如</p>
<p>s</p>
<div class="table-container"><table>
<thead>
<tr>
<th>A</th>
<th>B</th>
<th>C</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>2</td>
<td>3</td>
</tr>
<tr>
<td>4</td>
<td>5</td>
<td>6</td>
</tr>
</tbody></table></div>
<p>R</p>
<div class="table-container"><table>
<thead>
<tr>
<th>D</th>
<th>E</th>
</tr>
</thead>
<tbody><tr>
<td>7</td>
<td>8</td>
</tr>
<tr>
<td>9</td>
<td>10</td>
</tr>
</tbody></table></div>
<p>S*R组成下表    乘积</p>
<div class="table-container"><table>
<thead>
<tr>
<th align="center">A</th>
<th align="center">B</th>
<th align="center">C</th>
<th align="center">D</th>
<th align="center">E</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">2</td>
<td align="center">3</td>
<td align="center">7</td>
<td align="center">8</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">2</td>
<td align="center">3</td>
<td align="center">9</td>
<td align="center">10</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">5</td>
<td align="center">6</td>
<td align="center">7</td>
<td align="center">8</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">5</td>
<td align="center">6</td>
<td align="center">9</td>
<td align="center">10</td>
</tr>
</tbody></table></div>
<p>如果用上表除于R的话，可以得到的结果是S</p>

        <h5 id="问题-关系运算中花费时间可能最长的运算是"   >
          <a href="#问题-关系运算中花费时间可能最长的运算是" class="heading-link"><i class="fas fa-link"></i></a>问题 关系运算中花费时间可能最长的运算是</h5>
      <p>答：笛卡尔积</p>
<p>因为:投影、选择和除都是一个“裁剪”的意思，而笛卡尔积是增加</p>
<p>笛卡尔积是两个表进行交叉合并的运算，随着表的规模增大，笛卡尔积运算时间越长。</p>

        <h4 id="3-3-5-关系的完整性约束"   >
          <a href="#3-3-5-关系的完整性约束" class="heading-link"><i class="fas fa-link"></i></a>3.3.5 关系的完整性约束</h4>
      
        <h5 id="实体完整性约束（Entity-Integrity-Constraint）—-一个表"   >
          <a href="#实体完整性约束（Entity-Integrity-Constraint）—-一个表" class="heading-link"><i class="fas fa-link"></i></a>实体完整性约束（Entity Integrity Constraint）— 一个表</h5>
      <p><strong>实体完整性约束是指关系的<code>主属性</code>，即主码的组成不能为空，也就是关系的主属性不能是<code>空值NULL</code></strong></p>

        <h5 id="参照完整性约束（Referential-Integrity-Constraint）—表和表之间"   >
          <a href="#参照完整性约束（Referential-Integrity-Constraint）—表和表之间" class="heading-link"><i class="fas fa-link"></i></a>参照完整性约束（Referential Integrity Constraint）—表和表之间</h5>
      <p>现实世界中的实体之间往往存在着某钟联系</p>
<p>教师（职工号，姓名，性别，职称，<code>系编号</code>）<br>系（<code>系编号</code>，系名，办公地点，办公电话）</p>

        <h5 id="用户定义完整性约束（User-defined-Integrity-Constraint）—自己定义的"   >
          <a href="#用户定义完整性约束（User-defined-Integrity-Constraint）—自己定义的" class="heading-link"><i class="fas fa-link"></i></a>用户定义完整性约束（User-defined Integrity Constraint）—自己定义的</h5>
      <p>用户定义的完整性约束是针对某一应用环境的完整性约束条件，它反馈了某一个具体应用所涉及的数据应满足的要求。</p>

        <h5 id="关系模型完整性约束的检验"   >
          <a href="#关系模型完整性约束的检验" class="heading-link"><i class="fas fa-link"></i></a>关系模型完整性约束的检验</h5>
      <ol>
<li>执行插入操作</li>
<li>执行删除操作</li>
<li>执行更新操作</li>
</ol>

        <h5 id="问题"   >
          <a href="#问题" class="heading-link"><i class="fas fa-link"></i></a>问题:</h5>
      <p>关系模型的参照完整性要求关系中【不允许引用不存在的属性】</p>
<ul>
<li>A.不允许引用不存在的元组</li>
<li>B. 允许引用不存在的元组</li>
<li>C. 不允许引用不存在的属性</li>
<li>D. 允许引用不存在的属性</li>
</ul>
<p>[解析]参照完整性主要保证表与表之间的数据正确，限制属性关系。</p>
<p><code>例子：学校新生入学，但还没有登记相关信息，但相关表还没有登记，这是允许的，比如选了什么课，可以为空，因为无法判断元组（行）的情况，所以AB错的</code><br><code>又因为选课不能选没有的课的编号，所以D是错的</code></p>

        <h2 id="四、关系数据库的规范化理论（考试重点难点）"   >
          <a href="#四、关系数据库的规范化理论（考试重点难点）" class="heading-link"><i class="fas fa-link"></i></a>四、关系数据库的规范化理论（考试重点难点）</h2>
      
        <h3 id="4-1-关系模式中可能存在的冗余和异常问题"   >
          <a href="#4-1-关系模式中可能存在的冗余和异常问题" class="heading-link"><i class="fas fa-link"></i></a>4.1 关系模式中可能存在的冗余和异常问题</h3>
      <ol>
<li>数据冗余</li>
<li>更新异常</li>
<li>插入异常</li>
<li>删除异常</li>
</ol>

        <h4 id="4-1-1-例子"   >
          <a href="#4-1-1-例子" class="heading-link"><i class="fas fa-link"></i></a>4.1.1 例子</h4>
      <div class="table-container"><table>
<thead>
<tr>
<th align="center">编号</th>
<th align="center">供应商</th>
<th align="center">产品名</th>
<th align="center">数量</th>
<th align="center">产地</th>
<th align="center">价格</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">ATO</td>
<td align="center">产品A</td>
<td align="center">10</td>
<td align="center">北京</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">ATO</td>
<td align="center">产品B</td>
<td align="center">10</td>
<td align="center">北京</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">ATO</td>
<td align="center">产品C</td>
<td align="center">10</td>
<td align="center">上海</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">DF</td>
<td align="center">产品D</td>
<td align="center">12</td>
<td align="center">广州</td>
<td align="center">3</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">DF</td>
<td align="center">产品E</td>
<td align="center">13</td>
<td align="center">广州</td>
<td align="center">3</td>
</tr>
</tbody></table></div>

        <h4 id="4-1-2-例子-数据冗余"   >
          <a href="#4-1-2-例子-数据冗余" class="heading-link"><i class="fas fa-link"></i></a>4.1.2 例子 数据冗余</h4>
      <p>就是供应商ATO、供应商DF、产地北京、产地广州、数量10</p>
<div class="table-container"><table>
<thead>
<tr>
<th>供应商</th>
</tr>
</thead>
<tbody><tr>
<td>ATO</td>
</tr>
<tr>
<td>ATO</td>
</tr>
<tr>
<td>ATO</td>
</tr>
</tbody></table></div>

        <h4 id="4-1-3-例子-插入异常"   >
          <a href="#4-1-3-例子-插入异常" class="heading-link"><i class="fas fa-link"></i></a>4.1.3 例子 插入异常</h4>
      <p>比如一个新的供应商GEA，还没有提供产品，但是产品名不允许为NULL，这这样供应商GEA信息就不能插入表中，这就是插入异常</p>

        <h4 id="4-1-4-例子删除异常"   >
          <a href="#4-1-4-例子删除异常" class="heading-link"><i class="fas fa-link"></i></a>4.1.4 例子删除异常</h4>
      <p>假如今天不再使用ATO的产品，但是ATO还是公司的签约产品提供商，这时要删除表中ATO的行，删除后再也找不到ATO的相关信息，这也就有删除异常</p>

        <h4 id="4-1-5-例子修改异常"   >
          <a href="#4-1-5-例子修改异常" class="heading-link"><i class="fas fa-link"></i></a>4.1.5 例子修改异常</h4>
      <p>假如ATO公司改名了，现在要修改表中ATO的名字，若ATO在表中有1000条数据，修改起来是非常麻烦的。</p>

        <h4 id="4-1-6-总结"   >
          <a href="#4-1-6-总结" class="heading-link"><i class="fas fa-link"></i></a>4.1.6 总结</h4>
      <p>针对上面的问题，所以我们要对表制定规范化。</p>

        <h3 id="4-2-函数依赖与关键字"   >
          <a href="#4-2-函数依赖与关键字" class="heading-link"><i class="fas fa-link"></i></a>4.2 函数依赖与关键字</h3>
      
        <h4 id="4-2-1-定义"   >
          <a href="#4-2-1-定义" class="heading-link"><i class="fas fa-link"></i></a>4.2.1 定义</h4>
      <p>设R为任一给定关系，如果对于R中属性X的每一个值，R中的属性Y只有唯一值与之对应，则称X函数决定Y或称函数依赖与X，记作X-&gt;Y。其中，X称为决定因素。</p>
<blockquote>
<p>例如：有关学生住宿登记的关系S1中存在</p>
<p>如下函数依赖：<br>SNO-&gt;SNAME<br>SNO-SSEX<br>SNO-SBOOM（假定一个学生仅住一个宿舍）</p>
</blockquote>

        <h4 id="4-2-2-完全函数依赖"   >
          <a href="#4-2-2-完全函数依赖" class="heading-link"><i class="fas fa-link"></i></a>4.2.2 完全函数依赖</h4>
      <p>设R为任一给定关系，X、Y为其属下集，若X-&gt;Y，且对X中的任何真子集X’都有x’≯Y，则称Y完全函数依赖于X。</p>
<p><code>比如出生日期与性别决定了姓名这一列，可以说姓名依赖于出生日期与性别</code></p>

        <h4 id="4-2-3-部分函数依赖"   >
          <a href="#4-2-3-部分函数依赖" class="heading-link"><i class="fas fa-link"></i></a>4.2.3 部分函数依赖</h4>
      <p>设R为任一给定关系，X、Y为其属性集，若X-&gt;Y,且X中存在一个真子集X’满足X’-&gt;Y,则称Y部分函数依赖于X。</p>
<p><code>学号、身份证号 与 学生的姓名之间，姓名可以依赖于学号或者身份证号，这时我们可以称它为部分函数依赖</code></p>

        <h4 id="4-2-4-传递函数依赖"   >
          <a href="#4-2-4-传递函数依赖" class="heading-link"><i class="fas fa-link"></i></a>4.2.4 传递函数依赖</h4>
      <p>设R为任一给定关系，X、Y、Z为其不同属性子集，若X-&gt;Y,Y≯X，Y-&gt;Z，则有X-&gt;Z，则称为Z传递函数依赖于X。</p>
<p><code>学生学号的前两位决定了专业，但是专业不一定能决定学号，专业决定了所在的系，也就是说学号也能决定系，这也就是传递函数依赖</code></p>

        <h4 id="4-2-5-关键字"   >
          <a href="#4-2-5-关键字" class="heading-link"><i class="fas fa-link"></i></a>4.2.5 关键字</h4>
      <p>设R为任一给定关系，U为其所含的全部属性集合，X为U的子集，若有完全函数依赖X-&gt;U,则X为R的一个候选关键字。</p>
<div class="table-container"><table>
<thead>
<tr>
<th>学号</th>
<th>姓名</th>
<th>年龄</th>
<th>专业</th>
</tr>
</thead>
</table></div>
<p><code>现在把学号定为关键字，U就是等于学号、姓名、年龄、专业的集合；
X等于学号；X-&gt;U;也就是全部属性依赖于学号,这时我们称x是候选关键字</code></p>

        <h3 id="4-3-范式与关系规范化过程"   >
          <a href="#4-3-范式与关系规范化过程" class="heading-link"><i class="fas fa-link"></i></a>4.3 范式与关系规范化过程</h3>
      <ul>
<li>满足最低要求的称为第一范式，简称（1NF），这是最基本的范式；</li>
<li>在第一范式的基础上进一步满足一些新要求的称为第二范式（2NF）；</li>
<li>以此类推，再进一步的范式是称为第三范式（3NF）及其改进形式BCNF（Boyce-Codd<br>Normal Form）;<code>(考试最高要求)</code></li>
<li>当然，还有更进一步的高级范式第四范式（4NF）、第五范式（5NF）</li>
</ul>

        <h4 id="4-3-1-第一范式"   >
          <a href="#4-3-1-第一范式" class="heading-link"><i class="fas fa-link"></i></a>4.3.1 第一范式</h4>
      <p>第一范式要求行列都不能出现数据合并。简称行列不可再分。</p>

        <h4 id="4-3-2-第二范式"   >
          <a href="#4-3-2-第二范式" class="heading-link"><i class="fas fa-link"></i></a>4.3.2 第二范式</h4>
      <p>就是把一个数据冗余的表，切割成多个数据不冗余的表，然后关联它们起来。</p>

        <h4 id="4-3-3-第三范式、BCNF"   >
          <a href="#4-3-3-第三范式、BCNF" class="heading-link"><i class="fas fa-link"></i></a>4.3.3 第三范式、BCNF</h4>
      
        <h4 id="4-3-4-范式与关系规范化过程"   >
          <a href="#4-3-4-范式与关系规范化过程" class="heading-link"><i class="fas fa-link"></i></a>4.3.4 范式与关系规范化过程</h4>
      <ul>
<li>1NF</li>
<li>↓消除非主属性对码的部分函数依赖</li>
<li>2NF</li>
<li>↓消除非主属性对码的传递函数依赖</li>
<li>3NF</li>
<li>↓消除主属性对码的部分和传递函数依赖<code>(保证主键的唯一性)</code></li>
<li>BCNF</li>
</ul>

        <h4 id="4-3-5-总结"   >
          <a href="#4-3-5-总结" class="heading-link"><i class="fas fa-link"></i></a>4.3.5 总结</h4>
      <ul>
<li>新建表的时候，先创建一个id列，然后让电脑控制，这样一下子就可以到达第三范式</li>
<li>在每次关系规范化时，要尽量表不要出现多对多，表尽量不要两个关系糅合在一起。<code>比如一个表中有开课信息又有成绩信息还有选课信息，这时我们要把表切割成三个表</code></li>
</ul>

        <h3 id="4-4-关系规范化理论的应用"   >
          <a href="#4-4-关系规范化理论的应用" class="heading-link"><i class="fas fa-link"></i></a>4.4 关系规范化理论的应用</h3>
      <p>关系规范化理论主要应用于数据库设计中的概念设计阶段，对所产生的概念设计，可用它来分析其实划分是否适合，判断属性分配到哪个实体中更为合理。</p>
<p>在实现设计中当将E-R图向关系模型转换时，还可以用它分析并发现概念设计中可能存在的遗漏或不当之处，特别是联系实体是否不单独转换为一独立关系而集成到与之相联的基本实体中去处理时，规范化理论是最有效的评价准则。</p>

        <h2 id="五、第二章小结"   >
          <a href="#五、第二章小结" class="heading-link"><i class="fas fa-link"></i></a>五、第二章小结</h2>
      <p>本章首先概述了关系数据库的基本特征、产生和发展历程，然后分别介绍了关系数据模型的三个要素，即关系数据结构、关系操作集合和关系完整性约束，最后详细介绍了关系数据库的规范化理论。</p>

        <h3 id="5-1-本章学习重点："   >
          <a href="#5-1-本章学习重点：" class="heading-link"><i class="fas fa-link"></i></a>5.1 本章学习重点：</h3>
      <ol>
<li>关系数据库的相关概念；</li>
<li>关系规范化理论，各个范式之间的转化关系。</li>
</ol>
]]></content>
      <categories>
        <category>自考专升本</category>
      </categories>
      <tags>
        <tag>数据库系统原理</tag>
      </tags>
  </entry>
  <entry>
    <title>【数据库系统原理】第六章 数据库安全与保护</title>
    <url>/2020/04/03/%E3%80%90%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86%E3%80%91%E7%AC%AC%E5%85%AD%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E5%85%A8%E4%B8%8E%E4%BF%9D%E6%8A%A4/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/04/02/kOul6Q8wiXJeUMv.png" alt="数据库系统原理-第六章数据库安全保护-脑图-min.png"></p>

        <h2 id="一、-数据库完整性"   >
          <a href="#一、-数据库完整性" class="heading-link"><i class="fas fa-link"></i></a>一、 数据库完整性</h2>
      
        <h3 id="1-1-完整性约束条件的作用对象"   >
          <a href="#1-1-完整性约束条件的作用对象" class="heading-link"><i class="fas fa-link"></i></a>1.1 完整性约束条件的作用对象</h3>
      <ul>
<li>列级约束<ul>
<li>列级约束主要指对列的类型、取值范围、精度等约束。</li>
</ul>
</li>
<li>元组约束<ul>
<li>元组约束指元组中各个字段直接的相互约束，<code>例如某个活动的开始日期小于结束日期</code></li>
</ul>
</li>
<li>表级约束<ul>
<li>表级约束指若干元组直接、关系直接的联系的约束。</li>
</ul>
</li>
</ul>
<a id="more"></a> 


        <h3 id="1-2-定义与实现完整性约束"   >
          <a href="#1-2-定义与实现完整性约束" class="heading-link"><i class="fas fa-link"></i></a>1.2 定义与实现完整性约束</h3>
      
        <h4 id="1-2-1-实体完整性"   >
          <a href="#1-2-1-实体完整性" class="heading-link"><i class="fas fa-link"></i></a>1.2.1 实体完整性</h4>
      <p>实体完整性：保证记录不重复，其中至少有一列值不重复，用PRIMARY KEY添加约束</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line">如：列级约束StuNo CHAR(10) PRIMARY KEY</span><br><span class="line">表级约束<span class="keyword">CREATE</span> <span class="keyword">TABLE</span> db_student</span><br><span class="line">(</span><br><span class="line">    StuNo <span class="built_in">CHAR</span>(<span class="number">10</span>),</span><br><span class="line">    StuName <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span>(StuNO)</span><br><span class="line">)</span><br></pre></td></tr></table></div></figure>

<p>候选键约束用关键字UNIQUE进行约束<br>MySQL中候选键与主键之间存在以下几点区别</p>
<ul>
<li>一个表中只能创建一个主键，但可以定义若干个候选键。</li>
<li>定义主键约束时，系统会自动产生PRIMARY KEY索引，而定义候选键约束时，系统自动产生UNIQUE索引。</li>
</ul>

        <h4 id="1-2-2-参照完整性"   >
          <a href="#1-2-2-参照完整性" class="heading-link"><i class="fas fa-link"></i></a>1.2.2 参照完整性</h4>
      <p>参照完整性:主要指两个表之间的关系，<code>比如课程开设依赖于教师表，没有教师，就不应该有教师的,就不应该有教师的课。保证数据组的正确性。</code></p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line">语法格式如下</span><br><span class="line">REDERNCES tbl_name [(index_col_name,...)]</span><br><span class="line">放于最后</span><br></pre></td></tr></table></div></figure>


        <h4 id="1-2-3-自定义完整性"   >
          <a href="#1-2-3-自定义完整性" class="heading-link"><i class="fas fa-link"></i></a>1.2.3 自定义完整性</h4>
      
        <h5 id="非空约束"   >
          <a href="#非空约束" class="heading-link"><i class="fas fa-link"></i></a>非空约束</h5>
      <p>在MySQL中，非空约束可以通过在CRETE TABLE或ALTER TABLE语句中的某个列定义后面，加上关键字“NOT NULL”作为限定词。</p>
<p>用户自己定义的约束，比如分数0到100分，不是这个范围就保存。</p>

        <h3 id="1-3-命名完整性约束"   >
          <a href="#1-3-命名完整性约束" class="heading-link"><i class="fas fa-link"></i></a>1.3 命名完整性约束</h3>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line">语法格式为：</span><br><span class="line">CONSTRINT [symbol]</span><br></pre></td></tr></table></div></figure>


        <h3 id="1-4-更新完整性约束"   >
          <a href="#1-4-更新完整性约束" class="heading-link"><i class="fas fa-link"></i></a>1.4 更新完整性约束</h3>
      
        <h4 id="1-4-1-删除约束"   >
          <a href="#1-4-1-删除约束" class="heading-link"><i class="fas fa-link"></i></a>1.4.1 删除约束</h4>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span>  <span class="keyword">TABLE</span> &lt;表名&gt; <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> LEY &lt;约束名&gt;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> &lt;表名&gt; <span class="keyword">DROP</span> PRIMARY <span class="keyword">KEY</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> &lt;表名&gt; <span class="keyword">DROP</span> &#123;约束名| 候选键字段名&#125;</span><br></pre></td></tr></table></div></figure>


        <h4 id="1-4-2-添加约束"   >
          <a href="#1-4-2-添加约束" class="heading-link"><i class="fas fa-link"></i></a>1.4.2 添加约束</h4>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> &lt;表名&gt; <span class="keyword">ADD</span> [<span class="keyword">CONSTRAINT</span>] &lt;约束名&gt;</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (主键字段);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> &lt;表名&gt; <span class="keyword">ADD</span> [<span class="keyword">CONSTRAINT</span>] &lt;约束名&gt;</span><br><span class="line"><span class="keyword">FOREIGN</span> <span class="keyword">KEY</span>(外键字段名) REFERNCES 被参照表</span><br><span class="line">(主键字段名)</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> &lt;表名&gt; <span class="keyword">ADD</span> [<span class="keyword">CONSTRAINT</span>] &lt;约束名&gt;</span><br><span class="line"><span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> (主键字段)</span><br></pre></td></tr></table></div></figure>


        <h2 id="二、触发器"   >
          <a href="#二、触发器" class="heading-link"><i class="fas fa-link"></i></a>二、触发器</h2>
      <p>触发器是保护表数据的数据库对象，当指定的表发生INSERT(插入数据),UPDATE(修改数据)，DELETE（删除数据）时间被触发，进行相应的动作。</p>

        <h3 id="2-1-创建触发器"   >
          <a href="#2-1-创建触发器" class="heading-link"><i class="fas fa-link"></i></a>2.1 创建触发器</h3>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line">语法格式</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> <span class="keyword">trigger</span> <span class="keyword">name</span> trigger_time <span class="keyword">trigger</span> <span class="keyword">event</span></span><br><span class="line">    <span class="keyword">ON</span> tbl_name <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> trigger_body</span><br></pre></td></tr></table></div></figure>


        <h3 id="2-2-删除触发器"   >
          <a href="#2-2-删除触发器" class="heading-link"><i class="fas fa-link"></i></a>2.2 删除触发器</h3>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line">语法格式:</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> [<span class="keyword">IF</span> EXIST ][schema_name]trigger_name</span><br></pre></td></tr></table></div></figure>


        <h3 id="2-3-使用触发器"   >
          <a href="#2-3-使用触发器" class="heading-link"><i class="fas fa-link"></i></a>2.3 使用触发器</h3>
      <p>INSERT、UPDATE、DELETE都会触发。</p>

        <h2 id="三、安全性与访问控制"   >
          <a href="#三、安全性与访问控制" class="heading-link"><i class="fas fa-link"></i></a>三、安全性与访问控制</h2>
      
        <h3 id="3-1-用户账号管理"   >
          <a href="#3-1-用户账号管理" class="heading-link"><i class="fas fa-link"></i></a>3.1 用户账号管理</h3>
      
        <h4 id="3-1-1-创建用户账号"   >
          <a href="#3-1-1-创建用户账号" class="heading-link"><i class="fas fa-link"></i></a>3.1.1 创建用户账号</h4>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line">语法格式</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="keyword">user</span> [<span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span></span><br><span class="line">[<span class="keyword">PASSWORD</span>]<span class="string">'password'</span>]</span><br><span class="line">    [,<span class="keyword">user</span>[<span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> [<span class="keyword">PASSWORD</span>]]]</span><br><span class="line">其中,<span class="keyword">user</span>的格式为:</span><br><span class="line"><span class="string">'user_name'</span>@<span class="string">'host name'</span></span><br></pre></td></tr></table></div></figure>


        <h5 id="格式说明"   >
          <a href="#格式说明" class="heading-link"><i class="fas fa-link"></i></a>格式说明</h5>
      <ul>
<li>使用自选的IDENTIFIED BY子句，可以为账号给定一个密码。</li>
<li>特别是要在纯文本中指定密码，需忽略PASSWORD关键词。</li>
<li>如果不想以明文发送密码，而且知道PASSWORD()函数返回给密码的混编值，则可以指定该混编值，但要加关键字PASSWORD。</li>
</ul>

        <h4 id="3-1-2-查看用户信息"   >
          <a href="#3-1-2-查看用户信息" class="heading-link"><i class="fas fa-link"></i></a>3.1.2 查看用户信息</h4>
      <blockquote>
<p>SELECT user,  password from mysql.user</p>
</blockquote>

        <h4 id="3-1-3-删除用户"   >
          <a href="#3-1-3-删除用户" class="heading-link"><i class="fas fa-link"></i></a>3.1.3 删除用户</h4>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line">语法格式</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="keyword">user</span> [,user_name]...</span><br></pre></td></tr></table></div></figure>

<ul>
<li>DROP USER 语句用于删除一个或多个MySQL账户,并取消其权限。</li>
<li>要使用DROP USER,必须拥有mysql数据库的全局CREATE USER权限或DELETE权限</li>
</ul>

        <h4 id="3-1-4-修改用户账户"   >
          <a href="#3-1-4-修改用户账户" class="heading-link"><i class="fas fa-link"></i></a>3.1.4 修改用户账户</h4>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line">语法格式:</span><br><span class="line"><span class="keyword">RENAME</span> <span class="keyword">USER</span> old_user <span class="keyword">TO</span> new_user,</span><br><span class="line">    [,old_user <span class="keyword">TO</span> new_user]...</span><br></pre></td></tr></table></div></figure>

<ul>
<li>RENAME USER 语句用于对原有MySQL账号进行重明名。</li>
<li>要使用RENAME USER,<code>必须拥有全局CREATE USER权限或mysql数据库URDATE权限。</code></li>
<li>如果旧账号不存在或者新户已存在，则会出现错误。</li>
</ul>

        <h4 id="3-1-5-修改用户账户口令"   >
          <a href="#3-1-5-修改用户账户口令" class="heading-link"><i class="fas fa-link"></i></a>3.1.5 修改用户账户口令</h4>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line">语法格式</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">PASSWORD</span> [<span class="keyword">FOR</span> <span class="keyword">user</span>] = <span class="keyword">PASSWORD</span>(<span class="string">'newpassword'</span>)</span><br></pre></td></tr></table></div></figure>


        <h5 id="说明"   >
          <a href="#说明" class="heading-link"><i class="fas fa-link"></i></a>说明:</h5>
      <ul>
<li>如果不加FOR user,表示修改当前用户的密码。</li>
<li>加了FOR user则是修改当前主机上的特定用户的密码user为用户名。</li>
<li>user的值必须以‘user_name’@’host_name’的格式给定。</li>
</ul>

        <h2 id="四、账户权限管理"   >
          <a href="#四、账户权限管理" class="heading-link"><i class="fas fa-link"></i></a>四、账户权限管理</h2>
      
        <h3 id="4-1-权限的授予"   >
          <a href="#4-1-权限的授予" class="heading-link"><i class="fas fa-link"></i></a>4.1 权限的授予</h3>
      <p>新的SQL用户不允许访问属于其他SQL用户的表，也不能立即创建自己的表，它必须被授权。可以授予的权限有以下几组。</p>
<ol>
<li>列权限:和表中的一个具体列相关。<code>例如，使用UPDATE语句更新表XS学号列的值和权限</code></li>
<li>表权限:和一个具体表中的所有数据相关。<code>例如,使用SELECT语句查询表XS的所有数据的权限</code></li>
<li>数据库权限:和一个具体的数据库中所有表相关。<code>例如：在已有的XSCJ数据库中创建新表的</code></li>
<li>用户权限:和MySQL所有的数据库相关。<code>例如:删除已有的数据库或者创建一个新的数据库的权限</code></li>
</ol>

        <h3 id="4-2-账号权限管理"   >
          <a href="#4-2-账号权限管理" class="heading-link"><i class="fas fa-link"></i></a>4.2 账号权限管理</h3>
      
        <h4 id="4-2-1-给某用户授予权限可以使用GRANT语句。使用SHOW-GRANTS语句可以查看当前账户拥有什么权限。"   >
          <a href="#4-2-1-给某用户授予权限可以使用GRANT语句。使用SHOW-GRANTS语句可以查看当前账户拥有什么权限。" class="heading-link"><i class="fas fa-link"></i></a>4.2.1 给某用户授予权限可以使用GRANT语句。使用SHOW GRANTS语句可以查看当前账户拥有什么权限。</h4>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span>语法格式</span><br><span class="line"><span class="keyword">GRANT</span> priv_type [(column_list)]</span><br><span class="line">    [,priv_type[(column_list)]]...</span><br><span class="line"><span class="keyword">ON</span> [object_type]</span><br><span class="line">&#123;tbl_name | * | *.* | db_name. *&#125;</span><br><span class="line"><span class="keyword">TO</span> <span class="keyword">user</span> [<span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> [<span class="keyword">PASSWORD</span>]<span class="string">'password'</span>]</span><br><span class="line">    [,<span class="keyword">user</span>[<span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> [<span class="keyword">PASSWORD</span>]<span class="string">'password'</span>]]...</span><br><span class="line">    [<span class="keyword">WITH</span> <span class="keyword">with</span> <span class="keyword">option</span> [<span class="keyword">with</span> <span class="keyword">option</span>]...]</span><br></pre></td></tr></table></div></figure>

<ul>
<li>priv_type为权限的名称，如SELECT、UPDATE等，给不同的对象授予权限priv_type的值也不相同。</li>
<li>TO子句用来设定用户的密码。</li>
<li>ON关键字后面给出的是要授予权限的数据库或表名。</li>
</ul>

        <h4 id="4-2-2-授予表权限和列权限"   >
          <a href="#4-2-2-授予表权限和列权限" class="heading-link"><i class="fas fa-link"></i></a>4.2.2 授予表权限和列权限</h4>
      
        <h5 id="授予表权限时-priv-type可以是以下值："   >
          <a href="#授予表权限时-priv-type可以是以下值：" class="heading-link"><i class="fas fa-link"></i></a>授予表权限时,priv_type可以是以下值：</h5>
      <ol>
<li><code>SELECT</code>:给予用户使用SELECT语句访问特定的表的权力。用户也可以在一个视图公式中包含表。然而，用户必须对视图公式中指定的每个表（或视图）都有SELECT权限。</li>
<li><code>INSERT</code>:给予用户使用INSERT语句向一个特定的添加表中添加行的权力。</li>
<li><code>DELETE</code>: 给予用户使用DELETE语句向一个特定表中删除行的权力。</li>
<li><code>UPDATE</code>:给予用户使用UPDATE语句修改特定表中值的权力。</li>
<li><code>REFERENCSE</code>:给予用户创建一个外键来参照特定的表的权力。</li>
<li><code>CREATE</code>:给予用户使用特定的名字创建一个表的权力。</li>
<li><code>ALTER</code>:给予用户使用ALTER TABLE 语句修改表的权力</li>
<li><code>INDEX</code>:给予用户在表上定义索引的权力。</li>
<li><code>DROP</code>:给予用户删除表的权力。</li>
<li><code>ALL或ALL PRIVILEGES</code>:表示所有权限名。</li>
</ol>
<p>在授予表权限时,<code>ON关键字后面跟tb1_name, tb1_name为表名或视图名。</code></p>

        <h5 id="授予列权限"   >
          <a href="#授予列权限" class="heading-link"><i class="fas fa-link"></i></a>授予列权限</h5>
      <p>只能赋予SELECT、INSERT和UPDATE,同时权限后面需加上列名列表column_list。</p>

        <h4 id="4-2-3-授予数据库权限"   >
          <a href="#4-2-3-授予数据库权限" class="heading-link"><i class="fas fa-link"></i></a>4.2.3 授予数据库权限</h4>
      <p>表权适用于一个特定的表。MySQL还支持针对整个数数据库的权限。<code>例如：在一个特定的数据中创建表和视图图的权限。</code><br>授予数据库权限时，priv_type可以是以下值。</p>
<ol>
<li><code>SELECT</code>:给予用户使用SELECT语句访问特定数据库中所有表的视图的权力。</li>
<li><code>INSERT</code>:给予要换哪个好使用INSERT语句特定数据库中</li>
<li><code>DELETE</code>:给予用户使用DELETE语句删除特定数据库中所有表的行的权力。</li>
<li><code>UPDATE</code>:给予用户使用UPDATE语句更新特定数据库中所有表的值的权力。</li>
<li><code>REFERENCS</code>:给予用户创建指向特定的数据库中的表外键的权力。</li>
<li><code>CREATE ROUTINE</code>:给予用户为特定的数据库创建存储过程和存储函数等权力。</li>
<li><code>ALTER ROUTINE</code>:给予用户更新和删除数据库中已有的存储过程和存储函数等权力。</li>
<li><code>EXECUTE ROUTINE</code>:给予用户调用特定数据库存储过程和存储函数的权力。</li>
<li><code>LOCK TABLES</code>:给予用户锁定数据的已有表的权力。</li>
<li><code>ALL 或 ALL PRIVILEGES</code>:表示以上所有权限名</li>
</ol>
<ul>
<li>在GRANT语法格式中，授予数据库权限时ON关键字后面跟<code>“*”和“db_name”</code>。</li>
<li><code>&quot;*&quot;</code>表示当前数据库中的所有表；</li>
<li><code>“db_name.*”</code>表示某个数据库中的所有表。</li>
</ul>

        <h4 id="4-2-4-授予用户权限"   >
          <a href="#4-2-4-授予用户权限" class="heading-link"><i class="fas fa-link"></i></a>4.2.4 授予用户权限</h4>
      <p>最有效率的权限就是用户权限，对于需要授予数据库权限的所有语句，也可以定义在用户权限上。</p>
<p>MySQL授予用户权限时priv_type还可以是以下值:</p>
<ol>
<li><code>CREATE USER</code>:给予用户创建和删除新的用户的权力。</li>
<li><code>SHOW DATABASES</code>:给予用户使用SHOW DATABASES语句查看所有已有的数据库的定义的权力。<ul>
<li>在GRANT语法格式中，授予用户权限时ON子句中使用。</li>
</ul>
</li>
</ol>

        <h3 id="4-3-权限转移与限制"   >
          <a href="#4-3-权限转移与限制" class="heading-link"><i class="fas fa-link"></i></a>4.3 权限转移与限制</h3>
      <p>GRANT语句的最后可以使用WITH子句。如果指定为WITH GRANT OPTION,则表示TO子句中指定的所有用户都有把子句所拥有的权限授予其他用户权利，而不管其他用户是否拥有该权限。</p>
<p>WITH子句也可以对一个用户授予使用限制，其中 </p>
<ul>
<li>MAX_QUERIES_PER_HOUR count表示每小时可以查询数据库的次数；</li>
<li>MAX_CONNECTIONS_PER_HOUR count表示每小时可以连接数据库的次数</li>
<li>MAX_UPDATES_PER_HOUR count表示每小时可以修改数据库的次数。<code>例如，某人每小时可以查询数据多少次。</code></li>
<li>MAX_USER_CONNECTIONS count表示同时连接MySQL的最大用户数。</li>
</ul>

        <h3 id="4-4-权限的撤销"   >
          <a href="#4-4-权限的撤销" class="heading-link"><i class="fas fa-link"></i></a>4.4 权限的撤销</h3>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line">语法格式</span><br><span class="line"><span class="keyword">REVOKE</span> priv_type [(column_list)][,priv_type[column_list]]...</span><br><span class="line">    <span class="keyword">ON</span> &#123;tbl_name | * | *.* | db_name *&#125;</span><br><span class="line">    <span class="keyword">FROM</span> <span class="keyword">user</span>[,<span class="keyword">user</span>]...</span><br></pre></td></tr></table></div></figure>


<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line">REVOLE ALL PRIVILEGES,<span class="keyword">GRANT</span> <span class="keyword">OPTION</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">user</span> [,<span class="keyword">user</span>]...</span><br><span class="line">说明:第一种格式用来回收某些特定的权限，第二种格式回收所以该用户的权限</span><br></pre></td></tr></table></div></figure>

<p>注意<br><code>要使用REVOKE,用户必须拥有mysql数据库的全局CREATE USER权限或UPDATE权限.</code></p>

        <h2 id="五、事务与并发控制"   >
          <a href="#五、事务与并发控制" class="heading-link"><i class="fas fa-link"></i></a>五、事务与并发控制</h2>
      
        <h3 id="5-1-事务的概念"   >
          <a href="#5-1-事务的概念" class="heading-link"><i class="fas fa-link"></i></a>5.1 事务的概念</h3>
      <p>事务（Transaction）是用户定义的一个数据库操作序列，这些操作<code>要么全做，要么全部做</code>，是一个不可分割的工作单位。</p>

        <h4 id="事务和程序是两个概念"   >
          <a href="#事务和程序是两个概念" class="heading-link"><i class="fas fa-link"></i></a>事务和程序是两个概念</h4>
      <ul>
<li>在关系数据库中，一个事务可以是一条SQL语句，一组SQL语句或整个程序。</li>
<li>一个应用程序通常包含多个事务</li>
<li>事务是恢复和并发控制的基本单位。</li>
</ul>

        <h3 id="5-2-事务的特征"   >
          <a href="#5-2-事务的特征" class="heading-link"><i class="fas fa-link"></i></a>5.2 事务的特征</h3>
      
        <h4 id="5-2-1-事务的ACID特性"   >
          <a href="#5-2-1-事务的ACID特性" class="heading-link"><i class="fas fa-link"></i></a>5.2.1 事务的ACID特性</h4>
      
        <h5 id="原子性（Atomicity）"   >
          <a href="#原子性（Atomicity）" class="heading-link"><i class="fas fa-link"></i></a>原子性（Atomicity）</h5>
      <p>一组更新操作是原子不可分。</p>

        <h5 id="一致性（Consistency）"   >
          <a href="#一致性（Consistency）" class="heading-link"><i class="fas fa-link"></i></a>一致性（Consistency）</h5>
      <p>事务必须满足数据库的完整性约束，数据库由一致性状态转变到另一个一致性状态</p>

        <h5 id="隔离性（Isolation）"   >
          <a href="#隔离性（Isolation）" class="heading-link"><i class="fas fa-link"></i></a>隔离性（Isolation）</h5>
      <p>隔离性要求事务是彼此独立的、隔离的。</p>

        <h5 id="持续性（Durability）"   >
          <a href="#持续性（Durability）" class="heading-link"><i class="fas fa-link"></i></a>持续性（Durability）</h5>
      <p>持续性也称为永久性（Permanence）,是指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。</p>

        <h3 id="5-3-并发操作问题"   >
          <a href="#5-3-并发操作问题" class="heading-link"><i class="fas fa-link"></i></a>5.3  并发操作问题</h3>
      
        <h4 id="5-3-1-丢失更新"   >
          <a href="#5-3-1-丢失更新" class="heading-link"><i class="fas fa-link"></i></a>5.3.1 丢失更新</h4>
      <p>设有两个事务T1和T2，当它们同时读入同一数据并加以修改时，事务T2的提交结果会破坏事务T1提交的结构，由此导致事务T1的修改被丢失。</p>

        <h4 id="5-3-2-不可重复读"   >
          <a href="#5-3-2-不可重复读" class="heading-link"><i class="fas fa-link"></i></a>5.3.2 不可重复读</h4>
      <p>设有两个事务T1和T2，不可重复读是指事务T1读取数据后，事务T2执行更新操作，使事务T1无法再现前一次读取结果</p>

        <h4 id="5-3-3-读”脏”数据"   >
          <a href="#5-3-3-读”脏”数据" class="heading-link"><i class="fas fa-link"></i></a>5.3.3 读”脏”数据</h4>
      <p>设有两个事务T1和T2，读”脏”数据是指，事务T1修改某一数据，并将其写会磁盘，事务T2读取同一数据后，事务T1由于某种原因被撤销，这时事务T1已修改过的数据恢复原值，事务T2读到的数据就与数据库中的数据不一致，则事务T2读到的数据就为”脏”数据，即不正确的数据</p>

        <h4 id="5-3-4-封锁"   >
          <a href="#5-3-4-封锁" class="heading-link"><i class="fas fa-link"></i></a>5.3.4 封锁</h4>
      <p>封锁是最常用的并发控制技术，它的基本思想是：需要时，事务通过向系统请求对它所希望的数据对象（如数据库中的记录）加锁，以确保它不被非预期改变。</p>

        <h5 id="锁"   >
          <a href="#锁" class="heading-link"><i class="fas fa-link"></i></a>锁</h5>
      <p>一个锁实质上就是允许或阻止一个事务对一个数据对象的存取特权。</p>
<p>基本的封锁类型有两种:排他锁（Exclusive Lock , x锁）和共享锁（SHaredLock,S锁）</p>

        <h5 id="用封锁进行并发控制"   >
          <a href="#用封锁进行并发控制" class="heading-link"><i class="fas fa-link"></i></a>用封锁进行并发控制</h5>
      <ol>
<li>若事务T对数据D加了X锁，则所有别的事务对数据D的锁请求都必须等待直到事务T释放锁。</li>
<li>若事务T对数据D加了S锁，则别的事务还可对数据D请求S锁，而对数据D的X锁请求必须等待直到事务T释放锁。</li>
<li>事务执行数据库操作时都要先请求相应的锁，即对读请求S锁，对更新（插入、删除、修改）请求X锁。</li>
<li>事务一直占用获得的锁直到结束（COMMIT或ROLLBACK）时释放。</li>
</ol>

        <h5 id="封锁的粒度"   >
          <a href="#封锁的粒度" class="heading-link"><i class="fas fa-link"></i></a>封锁的粒度</h5>
      <p>通常以粒度来描述封锁的数据单元的大小<br>DBMS可以决定不同粒度的锁。由最底层的数据元素到最高层的整个数据库，粒度越细，并发性就越大，软件复杂性和系统开销也就越大。</p>

        <h5 id="封锁的级别"   >
          <a href="#封锁的级别" class="heading-link"><i class="fas fa-link"></i></a>封锁的级别</h5>
      <ul>
<li><p>0级封锁<br>封锁的事务不重写其他非0级封锁事务的未提交的更新数据。这种状态实际上实用价值不大。</p>
</li>
<li><p>1级封锁<br>被封锁的事务部允许重写未提交的更新数据。这防止了丢失更新的发生。</p>
</li>
<li><p>2级封锁<br>被封锁的事务既不重写也不读未提交的更新数据。这除了1级封锁的效果外还防止了读脏数据。</p>
</li>
<li><p>3级封锁<br>被封锁的事务不读未提交的更新数据，不写任何（包括读操作的）未提交数据。</p>
</li>
</ul>

        <h5 id="活锁与死锁"   >
          <a href="#活锁与死锁" class="heading-link"><i class="fas fa-link"></i></a>活锁与死锁</h5>
      <p>封锁带来的一个重要问题是可能引起“活锁”与“死锁”。</p>
<p><code>活锁</code>：级别低的事务无法执行。<br>避免方法：采用先来先服务的策略<br>当多个事务请求封锁同一数据对象时，按请求封锁的先后次序对这些事务排队。该数据对象上的锁一旦释放首先批准申请队列中第一个事务获得锁。</p>
<p><code>死锁</code>:两个以上事务循环等待被同组中另一事务锁住的数据单元的情况，称为“死锁”。</p>
<ol>
<li>一次性锁请求</li>
<li>锁请求排序</li>
<li>序列化处理</li>
<li>资源剥夺</li>
</ol>
<p>对待死锁的另一种办法是不去防止，而让其发生并随时进行检测，一旦检测到系统已发生了死锁再进行解除处理。</p>

        <h5 id="可串行性"   >
          <a href="#可串行性" class="heading-link"><i class="fas fa-link"></i></a>可串行性</h5>
      <p>一组事务的一个调度就是它们的基本操作的一种排序。<br>通常，在数据库系统中，可串行性就是并发执行的正确性准则，即当且仅当一组事务的并发执行调度是可串行化的，才认为它们是正确的。</p>

        <h5 id="两端封锁法"   >
          <a href="#两端封锁法" class="heading-link"><i class="fas fa-link"></i></a>两端封锁法</h5>
      <p>事务划分成如下连个阶段</p>
<ol>
<li>发展（Growing）或加锁阶段<ul>
<li>在此段期间，对任一数据对象进行任何操作之前，事务都要获得对该对象的一个相应的锁</li>
</ul>
</li>
<li>收缩（Shrinkig）或释放锁阶段<ul>
<li>一旦事务释放了一个锁，则标明它已进入了此结点，此后它就不能再请求任何另外的锁。</li>
</ul>
</li>
</ol>

        <h5 id="定理"   >
          <a href="#定理" class="heading-link"><i class="fas fa-link"></i></a>定理</h5>
      <p><code>遵循两段锁协议的事务的任何并发调度都是可串行化的。</code></p>

        <h2 id="六、备份与恢复"   >
          <a href="#六、备份与恢复" class="heading-link"><i class="fas fa-link"></i></a>六、备份与恢复</h2>
      <p>数据库中数据丢失或被破坏可能是由于以下原因：</p>
<ol>
<li><code>计算机硬件故障</code>。由于使用不当或产品质量等原因，计算机硬件可能会出现故障，不能使用。如硬盘损坏会使得存储与其上的数据丢失。</li>
<li><code>软件故障</code>。由于软件设计上的失误或用户使用的不当，软件系统可能会误操作数据引起数据破坏。</li>
<li><code>病毒</code>。破坏性病毒会破坏系统软件、硬件和数据。</li>
<li><code>误操作</code>。如用户误使用了诸如DELETE、UPDATE等。</li>
<li><code>自然灾害</code>。如火灾、洪水或地震等，它们会造成的破坏，会毁坏计算机系统及其数据</li>
<li><code>盗窃</code>。一些重要数据可能会遭窃</li>
</ol>

        <h3 id="6-1-使用SELECT-INTO-…-OUTFILE语句备份数据"   >
          <a href="#6-1-使用SELECT-INTO-…-OUTFILE语句备份数据" class="heading-link"><i class="fas fa-link"></i></a>6.1 使用SELECT INTO … OUTFILE语句备份数据</h3>
      <p>用户可以使用SELECT INTO…OUTFILE语句把表数据导出到一个文本文件中,并用LOAD DATA…INFILE语句恢复数据。<code>但是这种方法只能导出或导入数据的内容，不包括表的结构，如果表的结构文件损坏，则必须先恢复原来的表的结构</code></p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> INTO...OUTFILE格式</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">INTO</span> <span class="keyword">OUTFILE</span> <span class="string">'file_name'</span></span><br><span class="line">export_options</span><br><span class="line">    |  <span class="keyword">DUMPFILE</span> <span class="string">'file_name'</span></span><br><span class="line">其中,export_options为:</span><br><span class="line">[<span class="keyword">FIELDS</span></span><br><span class="line">    [<span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">'string'</span>]</span><br><span class="line">    [[<span class="keyword">OPTIONALLY</span>] <span class="keyword">ENCLOSED</span> <span class="keyword">BY</span> <span class="string">'char'</span>]</span><br><span class="line">    [<span class="keyword">ESCAPED</span> <span class="keyword">BY</span> <span class="string">'char'</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></div></figure>

<p>说明:</p>
<ul>
<li><p>这个语句的作用是将表中的SELECT语句选中的行写入到一个文件中，file_name是文件的名称。</p>
</li>
<li><p>文件默认在服务器主机上创建，并且文件名不能是已经存在的（这可能将原文件覆盖）。</p>
</li>
<li><p>如果要将该文件写入到一个特定的位置，则要在文件名前加上具体的路径。</p>
</li>
<li><p>在文件中，数据行一一定的形式存放，空值用”\n”表示。</p>
<p>使用OUTFILE时，可以在export_option中加入以下两个<br>自选的子句，它们的作用是决定数据行在文件中存放的格式：</p>
<p>FIELDS子句：在FIELDS子句中有三个亚子句：</p>
<ul>
<li>TEMINATED BY、</li>
<li>[OPTIONALLY] ENCLOSED BY</li>
<li>和ESCAPED BY。</li>
</ul>
<p><code>如果指定了FIELDS子句，则这三个亚子句至少要指定一个。</code></p>
</li>
</ul>

        <h4 id="说明-1"   >
          <a href="#说明-1" class="heading-link"><i class="fas fa-link"></i></a>说明</h4>
      <ol>
<li><code>TERMINATED BY</code>用来指定字段值之间的符号，例如，“TERMINATED BY ‘,’” 指定了逗号作为两个字段值之间的标志。</li>
<li><code>ENCLOSED BY</code>子句用来指定包裹文件中字符值的符号，例如，“ENCLOSED BY ‘’”表示文件中字符值放在双引号之间，若加上关键字OPTIONALLY表示所有的值都放在双引号之间。</li>
<li><code>ESCAPED BY</code>子句用来指定转义字符，例如，“ESCAPED BY <code>‘*’” 将“*”</code>指定为转义字符，取代“\”，如空格将表示为“*N”。</li>
<li><code>LINES子句</code>在LINES子句中使用TERMINATED BY指定一行结束的标志，如“LINES TERMINATED BY ‘？’”表示一行以“？”作为结束标志。<ul>
<li>如果FIELDS和LINES子句都不指定。则默认声明以下子句:</li>
<li><code>FIELDS TERMINATED BY &#39;\t&#39; ENCLOSED BY &#39;&#39; ESCAPED BY &#39;\\&#39; LINES TERMINATED BY &#39;\n&#39;</code></li>
<li>如果使用DUMPFILE而不是使用OUTFILE,导出的文件里所有的行都彼此紧挨着放置，值和行之间没有任何标记。</li>
</ul>
</li>
</ol>

        <h3 id="6-2-使用LOAD-DATA…INFILE语句恢复数据"   >
          <a href="#6-2-使用LOAD-DATA…INFILE语句恢复数据" class="heading-link"><i class="fas fa-link"></i></a>6.2 使用LOAD DATA…INFILE语句恢复数据</h3>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">LOAD</span> <span class="keyword">DATA</span> ...INFILE 格式</span><br><span class="line"><span class="keyword">LOAD</span> <span class="keyword">DATA</span> [<span class="keyword">LOW_PRIORITY</span>|<span class="keyword">CONCURRENT</span>][<span class="keyword">LOCAL</span>]<span class="keyword">INFILE</span> <span class="string">'file_name.text'</span></span><br><span class="line">    [<span class="keyword">REPLACE</span> | <span class="keyword">IGNORE</span>]</span><br><span class="line">    <span class="keyword">INTO</span> <span class="keyword">TABLE</span> tbl_name</span><br><span class="line">    [<span class="keyword">FIELDS</span></span><br><span class="line">        [<span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">'string'</span>]</span><br><span class="line">        [[<span class="keyword">OPTIONALLY</span>]<span class="keyword">ENCLOSED</span> <span class="keyword">BY</span> <span class="string">'char'</span>]</span><br><span class="line">        [<span class="keyword">ESCAPED</span> <span class="keyword">BY</span> <span class="string">'char'</span>]</span><br><span class="line">    ]</span><br><span class="line">    [<span class="keyword">LINES</span></span><br><span class="line">        [<span class="keyword">STARTING</span> <span class="keyword">BY</span> <span class="string">'string'</span>]</span><br><span class="line">        [<span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">'string'</span>]</span><br><span class="line">    ]</span><br><span class="line">    [IGNRE <span class="built_in">number</span> <span class="keyword">LINES</span>]</span><br><span class="line">    [(col_name <span class="keyword">or</span> <span class="keyword">user</span> var...)]</span><br></pre></td></tr></table></div></figure>


        <h3 id="说明-2"   >
          <a href="#说明-2" class="heading-link"><i class="fas fa-link"></i></a>说明</h3>
      
        <h4 id="LOW-PRIORITY-CONCURRENT"   >
          <a href="#LOW-PRIORITY-CONCURRENT" class="heading-link"><i class="fas fa-link"></i></a>LOW_PRIORITY | CONCURRENT:</h4>
      <p>若指定LOW_PRIORITY,则延迟语句的执行。若指定CONCURRENT,则当LOAD DATA正在执行的时候，其他线程可以同时使用该表的数据.</p>

        <h4 id="LOCAL"   >
          <a href="#LOCAL" class="heading-link"><i class="fas fa-link"></i></a>LOCAL</h4>
      <p>若指定了LOCAL,则文件会被客户主机上的客户端读取，并被发送到服务器。文件会被给予一个完整的路径名称，以指定确切的位置。</p>

        <h4 id="tb-name"   >
          <a href="#tb-name" class="heading-link"><i class="fas fa-link"></i></a>tb_name</h4>
      <p>需要导入数据的表名，该表在数据库中必须存在，表结构必须与导入文件的数据行一直。</p>

        <h4 id="PEPLACE-IGNORE"   >
          <a href="#PEPLACE-IGNORE" class="heading-link"><i class="fas fa-link"></i></a>PEPLACE | IGNORE</h4>
      <p>如果指定了PEPLACE,则当文件中出现与原有行相同的唯一关键字值时，输入行会替换原有行。如果指定了IGNORE,则把与原有相同的唯一关键字值的输入行跳过。</p>

        <h4 id="FIELDS子句"   >
          <a href="#FIELDS子句" class="heading-link"><i class="fas fa-link"></i></a>FIELDS子句</h4>
      <p>此处的FIELDS子句和SELECT INTO…OUTFILE语句中类似。用于判断字段之间和数据行之间的符号。</p>

        <h4 id="LINES子句"   >
          <a href="#LINES子句" class="heading-link"><i class="fas fa-link"></i></a>LINES子句</h4>
      <p>TERMINATED BY亚子句用来指定一行结束的标志。STARTING  BY亚子句则指定一个前缀，导入数据行时，忽略行中的该前缀之前的内容。如果某行不包括该前缀，则整个行被跳过。</p>

        <h4 id="IGNORE-number-LINES"   >
          <a href="#IGNORE-number-LINES" class="heading-link"><i class="fas fa-link"></i></a>IGNORE number LINES</h4>
      <p>这个选项可以用于忽略文件的前几行。例如，可以使用IGNORE 1 LINES来跳过第一行。</p>

        <h4 id="col-name-or-user-var"   >
          <a href="#col-name-or-user-var" class="heading-link"><i class="fas fa-link"></i></a>col_name_or_user_var</h4>
      <p>如果需要载入一个表的部分列或文件中字段值顺序与表中列的顺序不同，就必须制定一个列清单，其中可以包含列名或用户变量。</p>

        <h2 id="七、本章小结"   >
          <a href="#七、本章小结" class="heading-link"><i class="fas fa-link"></i></a>七、本章小结</h2>
      <ul>
<li>数据库的主要目标是数据集成以提供共享。</li>
<li>由数据的集成共享引出了数据安全和数据保护问题，即保护数据不受各种可能（有意或无意）的威胁和伤害，保证数据中数据的完整性、安全性、一致性和可靠性。</li>
<li>本章结合MySQL数据库的使用，介绍了四种常用的数据库安全与保护机制，即完整性约束（包括触发器）、访问控制，事务与并发控制以及备份与恢复。</li>
</ul>

        <h3 id="本章学习重点"   >
          <a href="#本章学习重点" class="heading-link"><i class="fas fa-link"></i></a>本章学习重点</h3>
      <ul>
<li>理解完整性约束（包括触发器）、访问控制、事务与并发控制，</li>
<li>以及备份与恢复四种数据库安全与保护机制的概念与作用，</li>
<li>且能够在数据库（例如MySQL）中使用SQL语句实现相应的数据库保护，</li>
<li>以保证数据库中数据的完整性、安全性、一致性和可靠性。</li>
</ul>

        <h3 id="本章学习难点"   >
          <a href="#本章学习难点" class="heading-link"><i class="fas fa-link"></i></a>本章学习难点</h3>
      <p>数据库（例如MySQL）中触发器的编写与使用，事务及其相关技术的理解。</p>
]]></content>
      <categories>
        <category>自考专升本</category>
      </categories>
      <tags>
        <tag>数据库系统原理</tag>
      </tags>
  </entry>
  <entry>
    <title>【数据库系统原理】第五章 数据库编程</title>
    <url>/2020/04/03/%E3%80%90%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86%E3%80%91%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/03/30/7pZnGimY9uRlOV3.png" alt="数据库系统原理-第五章数据库编程-脑图-min.png"></p>

        <h2 id="一、-存储过程"   >
          <a href="#一、-存储过程" class="heading-link"><i class="fas fa-link"></i></a>一、 存储过程</h2>
      
        <h3 id="1-1-存储过程的基本概念"   >
          <a href="#1-1-存储过程的基本概念" class="heading-link"><i class="fas fa-link"></i></a>1.1 存储过程的基本概念</h3>
      <p>存储过程是一组为了完成某项特定功能的SQL语句集，其实质上就是一端存储在数据库中代码，它可以由声明式的SQL语句（如CREATE、UPDATE和SELECT等语句）和过程式SQL语句(如IF…THEN…ELSE控制结构语句)组成。</p>

        <h4 id="1-1-1-使用存储过程的优点（考试简答题）"   >
          <a href="#1-1-1-使用存储过程的优点（考试简答题）" class="heading-link"><i class="fas fa-link"></i></a>1.1.1 使用存储过程的优点（考试简答题）</h4>
      <ol>
<li>提高运行速度</li>
<li>增强了SQL的功能和灵活性</li>
<li>可以降低网络的通信量</li>
<li>减轻了程序编写的工作量</li>
<li>间接实现安全控制功能</li>
</ol>
<a id="more"></a>



        <h3 id="1-2-创建存储过程"   >
          <a href="#1-2-创建存储过程" class="heading-link"><i class="fas fa-link"></i></a>1.2 创建存储过程</h3>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line">语法格式</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> sp_name</span><br><span class="line">([proc_parameter[,...]])</span><br><span class="line">    [characteristic...]routine_body[BEGIN...END]</span><br><span class="line">其中，proc_parameter的参数如下</span><br><span class="line">[<span class="keyword">IN</span> | <span class="keyword">OUT</span> | INOUT]  param_name <span class="keyword">type</span></span><br></pre></td></tr></table></div></figure>


<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line">characteristic特征如下:</span><br><span class="line">LANGUAGE SQL</span><br><span class="line">| [NOT] DETERMINISTIC</span><br><span class="line">| &#123;CONTAINS SQL | NO SQL | READS SQL DATA |</span><br><span class="line">MODIFIES SQL DATE&#125;</span><br><span class="line">|SQL SECURITY &#123;DEFINER | INVOKEFR</span><br><span class="line">|<span class="keyword">COMMENT</span> <span class="string">'string'</span>&#125;</span><br></pre></td></tr></table></div></figure>

<p>DELIMITER 语法格式</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line">DELIMITER $$</span><br><span class="line">修改结束符为$$</span><br></pre></td></tr></table></div></figure>
<p>说明：<br>因为MySQL运行命令中结束符号为分号，便行行行存储过程中为了避免冲突，修改结束符号。</p>

        <h3 id="1-3-存储过程体"   >
          <a href="#1-3-存储过程体" class="heading-link"><i class="fas fa-link"></i></a>1.3 存储过程体</h3>
      
        <h4 id="1-3-1-局部变量"   >
          <a href="#1-3-1-局部变量" class="heading-link"><i class="fas fa-link"></i></a>1.3.1 局部变量</h4>
      <p> 在存储过程中可以声明局部变量，它们可以用来存储临时结构。要声明局部变量必须使用DECLATRE语句。在声明局部变量的同时也可以其赋一个初始值。</p>
<p> DECLARE语法格式如下:<br> <code>DECLARE var_name[,...]type[DEFAULT value]</code></p>
<p> 说明: var_name 为变量名；type为变量类型</p>
<p> DEFAULT子句给变量指定一个默认值，如果不指定默认为NULL的话。</p>
<blockquote>
<p>例如：DECLARE sno CHAR(10)</p>
</blockquote>

        <h4 id="1-3-2-SET语句"   >
          <a href="#1-3-2-SET语句" class="heading-link"><i class="fas fa-link"></i></a>1.3.2 SET语句</h4>
      <p> 要给局部变量赋值可以使用SET语句，SET语句也是SQL本身的一部分。</p>
<p> 语法格式为:</p>
<p> <code>SET var_name = expr[,var_name= expr]...</code></p>

        <h4 id="1-3-3-SELECT…INTO语句"   >
          <a href="#1-3-3-SELECT…INTO语句" class="heading-link"><i class="fas fa-link"></i></a>1.3.3 SELECT…INTO语句</h4>
      <p> 使用这个SELECT…INTO语法可以把选定的列值直接存储到变量中。因此，<code>返回的结果只能有一行</code>。</p>
<p> 语法格式为<br> <code>SELECGT col_name[,...]INTO var_name[,...] table_expr</code></p>
<p> 说明:col_name是列名，var_name是要赋值的变量名。<br> table_expr是SELECT语句中的FROM子句和后面的部分。</p>

        <h4 id="1-3-4-流程控制语句"   >
          <a href="#1-3-4-流程控制语句" class="heading-link"><i class="fas fa-link"></i></a>1.3.4 流程控制语句</h4>
      
        <h5 id="IF语句"   >
          <a href="#IF语句" class="heading-link"><i class="fas fa-link"></i></a>IF语句</h5>
      <p>IF-THEN-ESLE语句可根据不同的条件执行不同的操作。</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line">语法格式为</span><br><span class="line">IF search_condition THEN statement_list</span><br><span class="line">[ELSEIT search_condition THEN statement_list]...</span><br><span class="line">[ELSE statement_list]</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span></span><br></pre></td></tr></table></div></figure>

<p>说明:search_condition是判断的条件，statement_list中包含一个或多个SQL语句。当search_condition的条件为真时,就执行相应的SQL语句。<code>区别IF（）函数,不要混淆。</code></p>

        <h5 id="CASE语句"   >
          <a href="#CASE语句" class="heading-link"><i class="fas fa-link"></i></a>CASE语句</h5>
      <p>说明:一个CASE语句经常可以充当一个IF-THEN-ELSE语句。</p>
<p><img src="https://i.loli.net/2020/03/28/QWsO7DU5jb3q6Ad.png" alt="数据库系统原理-数据库编程-流程控制语句1-min.png"></p>
<p> <img src="https://i.loli.net/2020/03/28/2Yqf1s3XaWdy7pv.png" alt="数据库系统原理-数据库编程-流程控制语句2-min.png"></p>

        <h5 id="循环语句"   >
          <a href="#循环语句" class="heading-link"><i class="fas fa-link"></i></a>循环语句</h5>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line">MySQL支持3条用创建循环的语句：</span><br><span class="line">WHELE、REPEAT和LOOP语句。</span><br><span class="line">在存储过程中可以定义0个、1个或多个循环语句。</span><br></pre></td></tr></table></div></figure>

<p><img src="https://i.loli.net/2020/03/28/l3KU5hdQ4WMEbJn.png" alt="数据库系统原理-数据库编程-循环语句-min.png"></p>
<p><img src="https://i.loli.net/2020/03/28/aUfG4kdDnFP2jT6.png" alt="数据库系统原理-数据库编程-循环语句1-min.png"></p>
<p>循环语句说明：</p>
<ol>
<li>WHILE先判断，REPEAT后判断，WHILE条件为真进行循环,REPEAT条件为真结束循环。</li>
<li>在LOOP循环内的语句一直重复至循环被退出，退出时通常伴随一个LEAVE语句。</li>
<li>LEAVE语句经常和BEGIN…END或循环一起使用。</li>
<li>LEAVE label</li>
</ol>

        <h4 id="1-3-5-游标-数据集合"   >
          <a href="#1-3-5-游标-数据集合" class="heading-link"><i class="fas fa-link"></i></a>1.3.5 游标(数据集合)</h4>
      <p>一条SELECT…INFO语句返回的是带有值的一行，这样可以把数据读取到存储过程中。但是常规的SELECT语句返回的是多行数据，如果要处理它需要引入游标这一概念。</p>
<p>MySQL支持简单的游标。在MySQL 游标一定要在存储过程或函数中使用，不能单独在查询中使用。<code>名字要唯一，游标本身是执行SELECT检索出来的结果集。</code></p>

        <h5 id="声明游标"   >
          <a href="#声明游标" class="heading-link"><i class="fas fa-link"></i></a>声明游标</h5>
      <p>语法格式</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> cursor_name <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> select_statement</span><br></pre></td></tr></table></div></figure>

<p>说明:cursor_name是游标的名称，游标名称使用与表 名同样的规则。select_statement是一个SELECT语句,返回的是一行或多行的数据。</p>

        <h5 id="打开游标"   >
          <a href="#打开游标" class="heading-link"><i class="fas fa-link"></i></a>打开游标</h5>
      <p>声明游标后，要使用游标从中提取数据，就必须先打开游标。在MySQL中，使用OPEN语句打开游标，其格式为:</p>
<p><code>OPEN cursor_neme</code></p>
<p>在程序中，一个游标可以打开多次。由于其他的用户或 程序本身已经更新了表，所以每次打开结果可能不同。</p>

        <h5 id="读取数据"   >
          <a href="#读取数据" class="heading-link"><i class="fas fa-link"></i></a>读取数据</h5>
      <p>游标打开后，就可以使用FETCH…INTO语从中读取数据。</p>
<p>语法格式<br><code>FETCH cursor_name INTO var_name[,var_name]...</code></p>
<p>说明:FETCH…INTO语句与SELECT…INTO语句具有相同的意义，FETCH语句是将游标指向的一行数据付给一些变量，<code>子句中变量的数目必须等于声明游标 SELECT子句中列的数目。var_name是存放数据的变量名</code></p>

        <h5 id="关闭游标"   >
          <a href="#关闭游标" class="heading-link"><i class="fas fa-link"></i></a>关闭游标</h5>
      <p>游标使用完以后,要及时关闭。关闭游标使用CLOSE语句，格式为:<br>CLOSE cursor_name<br>语句参数的含义与OPEN语句中相同。</p>

        <h3 id="1-4-调用存储过程"   >
          <a href="#1-4-调用存储过程" class="heading-link"><i class="fas fa-link"></i></a>1.4 调用存储过程</h3>
      <p>存储过程创建完后，可以在程序、触发器或者存储过程中被调用，但是都必须使用到CALL语句。</p>
<p>语法格式<br><code>CALL sp_name([parameter[,...]])</code></p>
<p>说明:sp_name为存储过程的名称,如果要调用某个特定数据库的存储过程，则需要在前面加上该数据库的名称。</p>
<p><code>parameter为调用该存储过程使用的参数，这条语句中的参数个数必须总是等于存储过程的参数个数</code></p>

        <h3 id="1-5-删除存储过程"   >
          <a href="#1-5-删除存储过程" class="heading-link"><i class="fas fa-link"></i></a>1.5 删除存储过程</h3>
      <p>存储过程创建后需要删除使用DROP PROCEDURE语句。在此之前，<code>必须确定该存储过程没有任何依赖关系</code>,否则会导致其他与之关联的存储过程无法运行。</p>
<p>语法格式为:<br><code>DROP PROCEDURE [IF EXISTS] sp_name</code></p>
<p>说明:sp_name是要删除的存储过程的名称，IF EXISTS子句是MySQL的扩展，如果程序或函数不存在,它防止发生错误。</p>

        <h2 id="二、存储函数"   >
          <a href="#二、存储函数" class="heading-link"><i class="fas fa-link"></i></a>二、存储函数</h2>
      
        <h3 id="2-1-创建存储函数"   >
          <a href="#2-1-创建存储函数" class="heading-link"><i class="fas fa-link"></i></a>2.1 创建存储函数</h3>
      <p>创建存储函数使用CREATE FUNCTION语句。要查看数据库中有哪些存储函数，可以使用SHOW FUNCTION STATUS命令</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> 语法格式</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> sp_name([function_parameter[,...]])</span><br><span class="line">    <span class="keyword">RETURNS</span> <span class="keyword">type</span></span><br><span class="line">    [characteristic...] routine_body</span><br></pre></td></tr></table></div></figure>
<p>说明:存储函数的定义格式和存储过程相差不大。</p>

        <h3 id="2-2-调用存储函数"   >
          <a href="#2-2-调用存储函数" class="heading-link"><i class="fas fa-link"></i></a>2.2 调用存储函数</h3>
      <p>存储函数创建完后，就如同系统提供的内置函数（如VERSION（））,所以调用存储函数的方法也差不多，都是使用SELECT关键字</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line">语法格式为:</span><br><span class="line"><span class="keyword">SELECT</span> sp_name([function_parameter[,...]])</span><br></pre></td></tr></table></div></figure>


        <h3 id="2-3-删除存储函数"   >
          <a href="#2-3-删除存储函数" class="heading-link"><i class="fas fa-link"></i></a>2.3 删除存储函数</h3>
      <p>删除存储函数的方法与删除存储过程的方法基本一样，使用DROP FUNCTION语句</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> [<span class="keyword">IF</span> <span class="keyword">EXISTS</span>]sp_name</span><br></pre></td></tr></table></div></figure>


        <h2 id="三、本章小结"   >
          <a href="#三、本章小结" class="heading-link"><i class="fas fa-link"></i></a>三、本章小结</h2>
      <p>本章结合MySQL数据库的使用，具体介绍了常用的两种数据库编程技术，即存储过程与存储函数，特别是详细介绍了在存储过程的编写过程中常用的几个构造存储过程体的语法元素。</p>

        <h3 id="3-1-本章学习重点"   >
          <a href="#3-1-本章学习重点" class="heading-link"><i class="fas fa-link"></i></a>3.1 本章学习重点</h3>
      <ol>
<li>存储过程的概念，创建、修改、删除、调用；</li>
<li>存储函数的概念，创建、修改、删除、调用。</li>
</ol>
]]></content>
      <categories>
        <category>自考专升本</category>
      </categories>
      <tags>
        <tag>数据库系统原理</tag>
      </tags>
  </entry>
  <entry>
    <title>【数据结构】 3.时间复杂度和空间复杂度</title>
    <url>/2020/04/03/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%203.%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
    <content><![CDATA[<p>算法效率的度量方法</p>

        <h2 id="一、问：如何来度量一个算法的执行时间？"   >
          <a href="#一、问：如何来度量一个算法的执行时间？" class="heading-link"><i class="fas fa-link"></i></a>一、问：如何来度量一个算法的执行时间？</h2>
      
        <h3 id="运行后统计方法"   >
          <a href="#运行后统计方法" class="heading-link"><i class="fas fa-link"></i></a>运行后统计方法</h3>
      <p>主要是通过设计好的测试程序和数据，利用计算机计时器对不同算法编制的程序的运行时间进行比较，从而确定算法效率的高低。</p>
<blockquote>
<p>当时这种方法有缺陷。需要提前编制好测试程序，花费大量时间与精力。</p>
</blockquote>

        <h3 id="事前分析估算方法"   >
          <a href="#事前分析估算方法" class="heading-link"><i class="fas fa-link"></i></a>事前分析估算方法</h3>
      <p>在计算机程序编写前，依据统计方法对算法进行估算。</p>
<p>经过总结，我们发现一个高级程序编写的程序在计算机上<strong>运行时所消耗的时间取决于下列因素</strong></p>
<ol>
<li>算法采用的策略、方案</li>
<li>编译产生的代码质量</li>
<li>问题的输入规模</li>
<li>机器执行指令的速度</li>
</ol>
<p>所以，抛开与计算机硬软件因素，一个程序的运行时间依赖于算法的好坏和问题的输入规模。<code>(所谓的问题输入规模就是指输入量的多少)</code></p>
<a id="more"></a>


        <h4 id="例子1-2-100-？"   >
          <a href="#例子1-2-100-？" class="heading-link"><i class="fas fa-link"></i></a>例子1+2+..+100 = ？</h4>
      <figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一种算法</span></span><br><span class="line"><span class="keyword">int</span> i ,sum = <span class="number">0</span>;n = <span class="number">100</span>;<span class="comment">//执行1次</span></span><br><span class="line"><span class="keyword">for</span>（i=<span class="number">1</span>;i&lt;=n;i++）<span class="comment">//执行了n+1次</span></span><br><span class="line">&#123;</span><br><span class="line">    sum = sum + i <span class="comment">//执行n次 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种算法</span></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;n = <span class="number">100</span><span class="comment">//执行1次</span></span><br><span class="line">sum = （<span class="number">1</span>+n）*<span class="number">2</span>/<span class="number">2</span> <span class="comment">//执行1次</span></span><br></pre></td></tr></table></div></figure>

<p>第一种算法执行了1+（n+1）+n = 2n +2次<br>第二种算法，是1+1=2次</p>
<p>如果把循环看成一个整体，忽略头尾判断开销，那么两个算法其实就是n和1的差距。</p>

        <h4 id="问：循环判断在算法1里面执行了n-1次，看起来是个不小的数量，为什么可以忽略？"   >
          <a href="#问：循环判断在算法1里面执行了n-1次，看起来是个不小的数量，为什么可以忽略？" class="heading-link"><i class="fas fa-link"></i></a>问：循环判断在算法1里面执行了n+1次，看起来是个不小的数量，为什么可以忽略？</h4>
      <figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i , j ,x = <span class="number">0</span>, sum = <span class="number">0</span>;n = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>;i&lt;=n;i++) <span class="comment">//外循环每次增1，内循环就要循环100次</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n; j++)&#123;</span><br><span class="line">        x++;</span><br><span class="line">        sum = sum + x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">因为循环条件i从1到100，每次都要让j循环100次，如果要非常较真的研究总执行次数，是非常累的。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></div></figure>


        <h2 id="二、研究算法的复杂度的侧重点"   >
          <a href="#二、研究算法的复杂度的侧重点" class="heading-link"><i class="fas fa-link"></i></a>二、研究算法的复杂度的侧重点</h2>
      <p>研究算法的复杂度，侧重点是研究算法随着输入规模扩大增长量的一个抽象，而不是精确地定位需要执行多少次。</p>
<p>不计那些循环索引的递增和循环终止条件、变量声明、打印结构等操作。</p>
<p>最终，在分析程序的运行时间时，最重要的是把程序看成是独立于程序设计语言的算法或一系列步骤。</p>
<p>在分析一个算法的运行时间时，重要的是把基本操作的数量和输入模式关联起来。</p>

        <h2 id="三、函数的渐近增长"   >
          <a href="#三、函数的渐近增长" class="heading-link"><i class="fas fa-link"></i></a>三、函数的渐近增长</h2>
      <p>给定两个函数f（n）和g(n)，如果存在一个整数N，使得对于随意的n&gt;N，f（n）总是比g(n)大，那么，我们说f（n）的增长渐近快于g（n）</p>
<p>最高此项的指数大的，函数随着n的增长，结果也会变得特别快。</p>
<p>结论：判断一个算法的效率时，函数中的常数和其他次要项常常可以忽略，而更应该关注<strong>主项（最高项）</strong>的阶数。 </p>

        <h2 id="四、算法时间复杂度的定义"   >
          <a href="#四、算法时间复杂度的定义" class="heading-link"><i class="fas fa-link"></i></a>四、算法时间复杂度的定义</h2>
      <p>在进行算法分析时，语句总的执行次数T(n)是关于问题规模n的函数进而分析T(n)随n的变化情况并确定T(n)的数量级。</p>
<p>算法的时间复杂度，也就是算法的时间量，记作：<strong>T(n) =O(f(n))</strong>。</p>
<p>它表示随问题规模n的增大，算法执行时间的增长率和f(n)的增长率相同，<br>称作算法的渐近时间复杂度，简称为时间复杂度。其中f(n)是问题规模n的某个函数。</p>
<p>关系需要知道执行次数 == 时间</p>
<p>用大写O()来体现算法时间复制度的记法，称之为大O记法</p>
<p>一般情况下，随着输入规模n的增大，T(n)增长最慢的算法为最优算法。</p>

        <h2 id="五、如何分析一个算法的时间复杂度？"   >
          <a href="#五、如何分析一个算法的时间复杂度？" class="heading-link"><i class="fas fa-link"></i></a>五、如何分析一个算法的时间复杂度？</h2>
      <ol>
<li>用常数1取代运行时间中的所有加法常数</li>
<li>在修改后的运行次数函数中，只保留最高阶项</li>
<li>如果最高阶项存在且不是1，则去除与这个项相乘的常数</li>
<li>得到的最后结果就是大O阶</li>
</ol>

        <h2 id="六、时间复杂度例子"   >
          <a href="#六、时间复杂度例子" class="heading-link"><i class="fas fa-link"></i></a>六、时间复杂度例子</h2>
      
        <h3 id="常数阶"   >
          <a href="#常数阶" class="heading-link"><i class="fas fa-link"></i></a>常数阶</h3>
      <figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span> ,n = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"hello world!\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"hello world!\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"hello world!\n"</span>);</span><br><span class="line">sum = (<span class="number">1</span>+n)*n/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//大O是O(1)</span></span><br></pre></td></tr></table></div></figure>


        <h3 id="线性阶"   >
          <a href="#线性阶" class="heading-link"><i class="fas fa-link"></i></a>线性阶</h3>
      <p>一般含有非嵌套循环涉及线性阶，线性阶就是随着问题规模n的扩大，对应计算次数呈直线增长。</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i,n = <span class="number">100</span>,sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    sum = sum + i </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上面代码，它的循环的时间复杂度为O(n),因为循环体重的代码需要执行n次。</span></span><br></pre></td></tr></table></div></figure>


        <h3 id="平方阶"   >
          <a href="#平方阶" class="heading-link"><i class="fas fa-link"></i></a>平方阶</h3>
      <figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i, j,n = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n; j++)&#123;</span><br><span class="line">        printf('hello world!\n');</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>n等于100，也就是说外层循环每执行一次，内层循环就执行100次，那总共程序想要从这两个循环出来，需要执行100*100次，也就是n的平方。所以这段代码的时间复杂度为O（n^2）。</p>
<p>如果有三个嵌套就是n^3.</p>
<p>总结：循环的时间复杂度等于循环体的复杂度乘以该循环运行的次数。</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i , j , n = <span class="number">100</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(j=i; j&lt;n; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf('hello world!\n');</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>上面代码分析：<br>    由于当i = 0 时，内循环执行了n次，当i=1时，内循环则执行n-1次…当i = n -1 时，内循环执行1次，所以总的执行次数应该是：</p>
<p><code>-n+(n-1)+(n-2)+...+1 = n(n+1)/2</code><br>===<code>n(n+1)/2 = n^2/2+n/2</code></p>
<p>所以得O(n^2)</p>

        <h3 id="对数阶"   >
          <a href="#对数阶" class="heading-link"><i class="fas fa-link"></i></a>对数阶</h3>
      <figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>, n = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;n)</span><br><span class="line">&#123;</span><br><span class="line">    i = i * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>由于每次i*2之后，就距离n更近一步，假设有x个2相乘大于或等于n，则会退出循环。</p>
<p>于是有2^x = n得到x = log(2)n，所以这个循环时间复杂度为O(logn)</p>

        <h2 id="七、函数调用的时间复杂度分析"   >
          <a href="#七、函数调用的时间复杂度分析" class="heading-link"><i class="fas fa-link"></i></a>七、函数调用的时间复杂度分析</h2>
      <figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i , j;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    function(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function</span><span class="params">(<span class="keyword">int</span> count)</span></span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"%d"</span>,count);</span><br></pre></td></tr></table></div></figure>

<p>函数体是打印这个参数，function函数的时间复杂度是O(1),所以整体的时间赋值度是循环的次数O(n)。</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">function</span><span class="params">(<span class="keyword">int</span> count)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">for</span>(j=count; j&lt;n; j++)&#123;</span><br><span class="line">        printf('%d',j)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>function内部的循环次数随count的增加（接近n）而减少，所以算法的时间复杂度为O(n^2)</p>

        <h3 id="问：下面代码的时间复杂度是什么？"   >
          <a href="#问：下面代码的时间复杂度是什么？" class="heading-link"><i class="fas fa-link"></i></a>问：下面代码的时间复杂度是什么？</h3>
      <figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line">n++;   <span class="comment">//执行1次</span></span><br><span class="line">function(n);    <span class="comment">//执行n^2次</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;   <span class="comment">//执行n^2次</span></span><br><span class="line">    function(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;   <span class="comment">//执行n^2次</span></span><br><span class="line">    <span class="keyword">for</span>(j=i; j&lt;n; j++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为代码是并列关系，所以3n^2+1 === O(n^2)</span></span><br></pre></td></tr></table></div></figure>


        <h2 id="八、常见的时间复杂度"   >
          <a href="#八、常见的时间复杂度" class="heading-link"><i class="fas fa-link"></i></a>八、常见的时间复杂度</h2>
      <div class="table-container"><table>
<thead>
<tr>
<th align="center">例子</th>
<th align="center">时间复杂度</th>
<th align="center">术语</th>
</tr>
</thead>
<tbody><tr>
<td align="center">202013413124</td>
<td align="center">O(1)</td>
<td align="center">常数阶</td>
</tr>
<tr>
<td align="center">3n+4</td>
<td align="center">O(n)</td>
<td align="center">线性阶</td>
</tr>
<tr>
<td align="center"><code>3n^2+4n+5</code></td>
<td align="center">O(n^2)</td>
<td align="center">平方阶</td>
</tr>
<tr>
<td align="center"><code>3log(2)n+4</code></td>
<td align="center">O(logn)</td>
<td align="center">对数阶</td>
</tr>
<tr>
<td align="center"><code>2n+3nlog(2)n+14</code></td>
<td align="center">O(nlogn)</td>
<td align="center">nlogn阶</td>
</tr>
<tr>
<td align="center"><code>n^3+2n^2+4n+6</code></td>
<td align="center">O(n^3)</td>
<td align="center">立方阶</td>
</tr>
<tr>
<td align="center">2^n</td>
<td align="center">O(2^n)</td>
<td align="center">指数阶</td>
</tr>
</tbody></table></div>
<p><img src="https://i.loli.net/2020/03/09/CGShJTntI7vMalH.png" alt="timeO01.png"></p>
<p><img src="https://i.loli.net/2020/03/09/ETS4NmjCOWvsfJi.png" alt="timeO02-min.png"></p>
<p>常用的时间复杂度所耗费的时间从小到大依次是：<br><code>O(1)&lt;O(logn)&lt;(n)&lt;O(nlogn)&lt;O(n^2)&lt;O(n^3)&lt;O(2^n)&lt;O(n!)&lt;O(n^n)</code></p>

        <h2 id="九、最坏情况与平均情况"   >
          <a href="#九、最坏情况与平均情况" class="heading-link"><i class="fas fa-link"></i></a>九、最坏情况与平均情况</h2>
      <ul>
<li>查找一个有n个随机数字数组中的某个数字，最好的情况是第一个数字就是，那么算法的时间复杂度为O(1),但也有可能这个数字就在最后一个位置，那么时间复杂度为O(n)。</li>
<li>平均运行时间是期望的运行时间。</li>
<li>最坏运行时间是一种保证。在应用中，这是一种最重要的需求，通常除非特别指定，提到的<strong>运行时间都是最坏情况的运行时间。</strong></li>
</ul>

        <h2 id="十、算法的空间复杂度"   >
          <a href="#十、算法的空间复杂度" class="heading-link"><i class="fas fa-link"></i></a>十、算法的空间复杂度</h2>
      <p>算法的空间复杂度通过计算机算法所需的存储空间实现，算法的空间复杂度的计算公式记作<br><code>S(n)=O(f(n))</code><br>其中，n为问题的规模，f(n)为语句关于n所占存储空间的函数。</p>
<p>通常上，我们用“时间复杂度”来指运行时间的需求，是用“空间复杂度”指空间需求。</p>
]]></content>
      <categories>
        <category>自考专升本</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>【数据库系统原理】第四章 SQL与关系数据库基本操作</title>
    <url>/2020/04/03/%E3%80%90%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86%E3%80%91%E7%AC%AC%E5%9B%9B%E7%AB%A0%20SQL%E4%B8%8E%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/03/24/lrBmVZtfxq2KyET.png" alt="数据库系统原理-第四章SQL与关系数据库基本操作上-脑图-min.png"></p>
<p><img src="https://i.loli.net/2020/03/26/ymA1jkQ38JchiSP.png" alt="数据库系统原理-第四章下-脑图-min.png"></p>

        <h2 id="一、SQL概述"   >
          <a href="#一、SQL概述" class="heading-link"><i class="fas fa-link"></i></a>一、SQL概述</h2>
      
        <h3 id="1-1-SQL的发展"   >
          <a href="#1-1-SQL的发展" class="heading-link"><i class="fas fa-link"></i></a>1.1 SQL的发展</h3>
      <p> 全称：Structured Query Language<br> SQL语言不区分大小写</p>

        <h3 id="1-2-SQL的特点"   >
          <a href="#1-2-SQL的特点" class="heading-link"><i class="fas fa-link"></i></a>1.2 SQL的特点</h3>
      <ul>
<li>SQL不是某个特定数据库供应商专有的语言</li>
<li>SQL简单易学</li>
<li>SQL是一种强大的语言，灵活使用其语言元素，可以进行非常复杂和高级的 数据库操作。</li>
</ul>

        <h3 id="1-3-SQL的组成"   >
          <a href="#1-3-SQL的组成" class="heading-link"><i class="fas fa-link"></i></a>1.3 SQL的组成</h3>
      <ul>
<li><p><code>数据定义语言</code></p>
</li>
<li><p><code>数据操作语言</code></p>
</li>
<li><p><code>数据控制语言</code></p>
</li>
<li><p>嵌入式和动态SQL规则</p>
</li>
<li><p>SQL调用和会化规则</p>
<a id="more"></a>

</li>
</ul>

        <h2 id="二、MySQL预备知识"   >
          <a href="#二、MySQL预备知识" class="heading-link"><i class="fas fa-link"></i></a>二、MySQL预备知识</h2>
      
        <h3 id="2-1-MySQL使用基础"   >
          <a href="#2-1-MySQL使用基础" class="heading-link"><i class="fas fa-link"></i></a>2.1 MySQL使用基础</h3>
      <ol>
<li><span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/lamp/66952?fr=aladdin"  target="_blank" rel="noopener">LAMP</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
<li><span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/WAMP/7296769?fr=aladdin"  target="_blank" rel="noopener">WAMP</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></li>
</ol>

        <h3 id="2-2-MySQL中的SQL"   >
          <a href="#2-2-MySQL中的SQL" class="heading-link"><i class="fas fa-link"></i></a>2.2 MySQL中的SQL</h3>
      <p><img src="https://i.loli.net/2020/03/19/5TyBxkqah96feYp.png" alt="数据库系统原理-SQL-MySQL01-min.png"></p>

        <h4 id="2-2-1-常量"   >
          <a href="#2-2-1-常量" class="heading-link"><i class="fas fa-link"></i></a>2.2.1 常量</h4>
      
        <h5 id="字符串常量"   >
          <a href="#字符串常量" class="heading-link"><i class="fas fa-link"></i></a>字符串常量</h5>
      <p>字符串是指用单引号或双引号括起来的字符序列，分为ASCII字符串常量（<code>一个字节</code>）和Unicode字符串常量（<code>两个字节</code>）</p>
<blockquote>
<p>ASCII 例如: ‘Hello’,’How are you!’<br>Unicode字符串常量与ASCII字符串常量相似，但它前面有一个N标志符，例如：<code>N</code>‘hello’</p>
</blockquote>

        <h5 id="数值常量"   >
          <a href="#数值常量" class="heading-link"><i class="fas fa-link"></i></a>数值常量</h5>
      <p>数值常量可以分为<code>整数常量</code>和<code>浮点数常量</code></p>
<p>整数常量即<code>不带小数点的十进制数</code>，</p>
<blockquote>
<p>例如：1897，2，+1244551，—232144</p>
</blockquote>
<p>浮点数常量是<code>使用小数点的数值常量</code>，例如：</p>
<blockquote>
<p>5.26,-1.45,103.5E5,0.5E-2。</p>
</blockquote>

        <h5 id="十六进制常量"   >
          <a href="#十六进制常量" class="heading-link"><i class="fas fa-link"></i></a>十六进制常量</h5>
      <p>MySQL支持十六进制值。一个十六进制值通过制定为一个字符串常量，每对十六进制数字被转换为一个字符，<code>其最前面有一个大写字母“X&quot;或者小写字“x”</code>。在引导中只可以使用<code>数字“0”到“9”及字母“a”到“f” 或“A”到“F”。</code></p>
<blockquote>
<p>例如：x’41’表示大写字母A。 x’4D7953514C’表示字符串MySQL</p>
</blockquote>
<p>十六进制数值不区分大小写，其前缀“X”或“x”可以被“0x”取代而且不用引号。即X’41’可以替换为0x41,注意：“0x”中x一定要小写</p>
<p>十六进制值的默认类型是字符串。如果想要确保该值作为数字处理，可以使用CAST（..AS UNSIGNED）</p>

        <h5 id="日期时间常量"   >
          <a href="#日期时间常量" class="heading-link"><i class="fas fa-link"></i></a>日期时间常量</h5>
      <p>日期时间常量：用单引号将表示日期时间的字符串括起来构成。</p>
<p>日期型常量包括年、月、日，数据类型为<code>DATE</code>，表示为”2020-1-1”这样的值。</p>
<p>时间型常量包括小时数、分钟数、秒数及微秒数，数据类型为<code>TIME</code>,表示为“12:30:43.00013”这样的值。</p>

        <h5 id="位字段值（了解）"   >
          <a href="#位字段值（了解）" class="heading-link"><i class="fas fa-link"></i></a>位字段值（了解）</h5>
      <p>可以使用b’value’符号写位字段值。value是一个用0<br>和1写成的二进制，直接显示b’value’的值可能是一系列特殊的符号。</p>
<blockquote>
<p>例如,b’0’显示为空白,b’1’显示为一个笑脸图</p>
</blockquote>

        <h5 id="布尔值"   >
          <a href="#布尔值" class="heading-link"><i class="fas fa-link"></i></a>布尔值</h5>
      <p>布尔值只包含两个可能的值:<code>TRUE和FALSE</code>。FALSE的数字值为:”<code>0</code>“，TRUE的数字值为“<code>1</code>”。</p>

        <h5 id="NULL的值"   >
          <a href="#NULL的值" class="heading-link"><i class="fas fa-link"></i></a>NULL的值</h5>
      <p>NULL值可适用于个账号或或列类型，它通常用来表示“<code>没有
值</code>”，“<code>无数据</code>”等意义，并且不同于数字类型的”0“或字符串类型的空字符串。</p>

        <h4 id="2-2-2-变量"   >
          <a href="#2-2-2-变量" class="heading-link"><i class="fas fa-link"></i></a>2.2.2 变量</h4>
      <p>用户可以在表达式中使用自己定义的变量，这样的变量叫作<code>用户变量</code>。<br>用户可以先在用户变量中保存值，然后在以后引用它,这样可以将值从一个语句传递到另一个语句。在使用用户变量前必须定义和初始化。如果使用没有初始化的变量，<code>它的值为NULL</code>。</p>
<p>用户变量前加<code>@</code>用来区分列名。</p>

        <h4 id="2-2-3-运算符"   >
          <a href="#2-2-3-运算符" class="heading-link"><i class="fas fa-link"></i></a>2.2.3 运算符</h4>
      <ul>
<li>（1） 算术运算符在两个表达式上执行数学运算，这两个表达式可以是任何数字数据类型。算术运算符有：<code>+（加）-(减)、*（乘）、/(除)和%（求模）</code>5种运算。</li>
<li>（2）位运算符<code>(二进制的位)</code>有:&amp;(位与)、|(位或)、^ (异或)、~（位取反）、&gt;&gt; (位右移)、&lt;&lt;(位左移)</li>
<li>（3）<code>比较运算符</code>(又称关系运算符),用于比较两个表达式的值，其运算结果为逻辑值，可以为三种之一:1(真)、0(假)及NULL(不能确定)</li>
</ul>
<div class="table-container"><table>
<thead>
<tr>
<th align="center">运算符</th>
<th align="center">含义</th>
<th align="center">运算符</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">=</td>
<td align="center">等于</td>
<td align="center">&lt;=</td>
<td align="center">小于等于</td>
</tr>
<tr>
<td align="center">&gt;</td>
<td align="center">大于</td>
<td align="center">&lt;&gt;、!=</td>
<td align="center">不等于</td>
</tr>
<tr>
<td align="center">&lt;</td>
<td align="center">小于</td>
<td align="center">&lt;=&gt;</td>
<td align="center">相等或都等于空</td>
</tr>
<tr>
<td align="center">&gt;=</td>
<td align="center">大于等于</td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table></div>
<ul>
<li>(4)逻辑运算符</li>
</ul>
<div class="table-container"><table>
<thead>
<tr>
<th>运算符</th>
<th>运算规则</th>
<th>运算符</th>
<th>运算规则</th>
</tr>
</thead>
<tbody><tr>
<td>NOT或！</td>
<td>逻辑非</td>
<td>OR或</td>
<td></td>
</tr>
<tr>
<td>AND或&amp;&amp;</td>
<td>逻辑与</td>
<td>XOR</td>
<td>逻辑异或</td>
</tr>
</tbody></table></div>

        <h4 id="2-2-4-表达式"   >
          <a href="#2-2-4-表达式" class="heading-link"><i class="fas fa-link"></i></a>2.2.4 表达式</h4>
      <ul>
<li>表达式就是常量、变量、列名、复杂计算、运算符和函数的组合。</li>
<li>一个表达式通常可以得到一个值。</li>
<li>与常量和变量一样，表达式的值也具有某种数据类型，可能的数据类型有字符类型、数值类型、日期时间类型。</li>
<li>这样，根据表达式的值的类型，表达式可分为字符型表达式、数值型表达式和日期表达式。</li>
</ul>

        <h4 id="2-2-5-内置函数"   >
          <a href="#2-2-5-内置函数" class="heading-link"><i class="fas fa-link"></i></a>2.2.5 内置函数</h4>
      <p><img src="https://i.loli.net/2020/03/23/r8jslGHMOPDiEVo.png" alt="数据库系统原理-MySQL前置知识-内置函数-min.png"></p>

        <h2 id="三、数据结构定义"   >
          <a href="#三、数据结构定义" class="heading-link"><i class="fas fa-link"></i></a>三、数据结构定义</h2>
      
        <h3 id="3-1数据库模式定义"   >
          <a href="#3-1数据库模式定义" class="heading-link"><i class="fas fa-link"></i></a>3.1数据库模式定义</h3>
      
        <h4 id="3-1-1-创建数据库-CREATE"   >
          <a href="#3-1-1-创建数据库-CREATE" class="heading-link"><i class="fas fa-link"></i></a>3.1.1 创建数据库 CREATE</h4>
      <p>语法格式:</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> &#123;<span class="keyword">DATABASE</span> | <span class="keyword">SCHEMA</span>&#125;[<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> ] db_name</span><br><span class="line">[<span class="keyword">DEFAULT</span>]<span class="built_in">CHARACTER</span> <span class="keyword">SET</span> charset_name </span><br><span class="line">| [<span class="keyword">DEFAULT</span>] CONLLATE collation_name</span><br></pre></td></tr></table></div></figure>

<p>说明:语句中“[]”内为可选项</p>
<ul>
<li>db_name:数据库名</li>
<li>IF NOT EXISTS:在建数据库前进行判断，只有该数据库目前尚不存在时才执行CREATE DATABASE操作。</li>
<li>DEFAULT:指定默认值。</li>
<li>CHARCATER SET:指定数据库字符集（Charset）,charset_name为字符集名称。</li>
<li>COLLATE:指定字符集的校对规则,collation_name</li>
</ul>

        <h4 id="3-1-2-选择数据库"   >
          <a href="#3-1-2-选择数据库" class="heading-link"><i class="fas fa-link"></i></a>3.1.2 选择数据库</h4>
      <p>USE db_name;</p>

        <h4 id="3-1-3-修改数据库-ALTER"   >
          <a href="#3-1-3-修改数据库-ALTER" class="heading-link"><i class="fas fa-link"></i></a>3.1.3 修改数据库 ALTER</h4>
      <p>语法格式 </p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span>&#123;<span class="keyword">DATABASE</span> | <span class="keyword">SCHEMA</span>&#125; [db_name]</span><br><span class="line">alter_specification[,alter_specification]...</span><br><span class="line">其中alter_specification:</span><br><span class="line">[<span class="keyword">DEFAULT</span>]<span class="built_in">CHARACTER</span> <span class="keyword">SET</span> charset_name </span><br><span class="line">|[<span class="keyword">DEFAULT</span>]<span class="keyword">COLLATE</span> collation_name</span><br></pre></td></tr></table></div></figure>


        <h4 id="3-1-4-删除数据库-DROP"   >
          <a href="#3-1-4-删除数据库-DROP" class="heading-link"><i class="fas fa-link"></i></a>3.1.4 删除数据库 DROP</h4>
      <p>语法格式</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> [<span class="keyword">IF</span> <span class="keyword">EXISTS</span>] db_name</span><br><span class="line">db_name 是要删除的数据库名。</span><br><span class="line">可以使用<span class="keyword">IF</span> <span class="keyword">EXISTS</span>子句以避免删除不存在的数据库时出现的MySQL错误信息。</span><br></pre></td></tr></table></div></figure>


        <h4 id="3-1-5-查看数据库-SHOW"   >
          <a href="#3-1-5-查看数据库-SHOW" class="heading-link"><i class="fas fa-link"></i></a>3.1.5 查看数据库 SHOW</h4>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> [<span class="keyword">DATABASES</span>|SCHEMAS]</span><br></pre></td></tr></table></div></figure>



        <h3 id="3-2-表定义"   >
          <a href="#3-2-表定义" class="heading-link"><i class="fas fa-link"></i></a>3.2 表定义</h3>
      <p><img src="https://i.loli.net/2020/03/23/tpN93mgohybReKV.png" alt="数据库系统原理-MqSQL前置-表定义-min.png"></p>

        <h4 id="3-2-1-创建表"   >
          <a href="#3-2-1-创建表" class="heading-link"><i class="fas fa-link"></i></a>3.2.1 创建表</h4>
      <p>语法格式</p>
<figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>]tbl_name(</span><br><span class="line">字段名<span class="number">1</span> 数据类型 [列级完整性约束条件][默认值]</span><br><span class="line">[,字段名<span class="number">2</span> 数据类型 [列级完整性约束条件][默认值]]</span><br><span class="line">[,...]</span><br><span class="line">[表级完整性约束]</span><br><span class="line">)[<span class="keyword">ENGINE</span>=引擎类型]</span><br></pre></td></tr></table></div></figure>


        <h4 id="3-2-2-添加字段"   >
          <a href="#3-2-2-添加字段" class="heading-link"><i class="fas fa-link"></i></a>3.2.2 添加字段</h4>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb_name <span class="keyword">ADD</span> [<span class="keyword">COLUMN</span>]新字段名</span><br><span class="line">数据类型 [约束条件][<span class="keyword">FIRST</span> | <span class="keyword">AFTER</span> 已有字段名]</span><br></pre></td></tr></table></div></figure>


        <h4 id="3-2-3-修改字段"   >
          <a href="#3-2-3-修改字段" class="heading-link"><i class="fas fa-link"></i></a>3.2.3 修改字段</h4>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb_name <span class="keyword">CHANGE</span> [<span class="keyword">COLUMN</span>] 原字段名 </span><br><span class="line">新字段名 数据类型</span><br><span class="line">[约束条件]</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb_name <span class="keyword">ALTER</span> [<span class="keyword">COLUMN</span>] 字段名</span><br><span class="line">&#123;<span class="keyword">SET</span>|<span class="keyword">DROP</span>&#125; DEFUALT;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb_name <span class="keyword">MODIFY</span> [<span class="keyword">COLUMN</span>] 字段名</span><br><span class="line">数据类型 [约束条件] [<span class="keyword">FIRST</span>|<span class="keyword">AFTER</span>已有字段名]</span><br></pre></td></tr></table></div></figure>



        <h4 id="3-2-4-删除字段"   >
          <a href="#3-2-4-删除字段" class="heading-link"><i class="fas fa-link"></i></a>3.2.4 删除字段</h4>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tb_name <span class="keyword">DROP</span> [<span class="keyword">COLUMN</span>] 字段名</span><br></pre></td></tr></table></div></figure>

        <h4 id="3-2-5-重命名表"   >
          <a href="#3-2-5-重命名表" class="heading-link"><i class="fas fa-link"></i></a>3.2.5 重命名表</h4>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 原表名 <span class="keyword">RENAME</span> [<span class="keyword">TO</span>] 新表名</span><br><span class="line"></span><br><span class="line"><span class="keyword">RENAME</span> <span class="keyword">TABLE</span> 原表名<span class="number">1</span> <span class="keyword">TO</span> 新表名 [,原表名<span class="number">2</span> <span class="keyword">TO</span> 新表名<span class="number">2</span>] ...;</span><br></pre></td></tr></table></div></figure>


        <h4 id="3-2-6-删除表"   >
          <a href="#3-2-6-删除表" class="heading-link"><i class="fas fa-link"></i></a>3.2.6 删除表</h4>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">EXISTS</span>] 表<span class="number">1</span> [,表<span class="number">2</span>] ... ;</span><br></pre></td></tr></table></div></figure>



        <h4 id="3-2-7-查看表"   >
          <a href="#3-2-7-查看表" class="heading-link"><i class="fas fa-link"></i></a>3.2.7 查看表</h4>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line">查看表语法格式</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLES</span> [&#123;<span class="keyword">FROM</span>|<span class="keyword">IN</span>&#125;] db_name;</span><br></pre></td></tr></table></div></figure>


        <h4 id="3-2-8-查看表结构"   >
          <a href="#3-2-8-查看表结构" class="heading-link"><i class="fas fa-link"></i></a>3.2.8 查看表结构</h4>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line">查看表结构语法格式</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">COLUMNS</span> &#123;<span class="keyword">FROM</span>|<span class="keyword">IN</span>&#125; tb_name [&#123;<span class="keyword">FROM</span>|<span class="keyword">IN</span>&#125; db_name]</span><br></pre></td></tr></table></div></figure>


        <h3 id="3-3-索引定义"   >
          <a href="#3-3-索引定义" class="heading-link"><i class="fas fa-link"></i></a>3.3 索引定义</h3>
      <p>可以理解成<code>目录</code>，在查找时有目录查找速度会加快。</p>
<p> <img src="https://i.loli.net/2020/03/24/EnTFBhVJ7qS4m5K.png" alt="数据库系统原理-MySQL-索引-min.png"></p>

        <h4 id="3-3-1-索引的创建"   >
          <a href="#3-3-1-索引的创建" class="heading-link"><i class="fas fa-link"></i></a>3.3.1 索引的创建</h4>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line">(1)<span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tbl_name[col_name data_type]</span><br><span class="line">[<span class="keyword">CONSTRAINT</span> index_name]</span><br><span class="line">[UNIOUE][<span class="keyword">INDEX</span>][<span class="keyword">KEY</span>][index_name](ubdex_col_name</span><br><span class="line">[<span class="keyword">length</span>])[<span class="keyword">ASC</span>|<span class="keyword">DESC</span>]</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>)<span class="keyword">CREATE</span> <span class="keyword">INDEX</span>(常用)</span><br><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">UNIQUE</span>] <span class="keyword">INDEX</span> index_name <span class="keyword">ON</span></span><br><span class="line">tbl_name(col_name[(<span class="keyword">length</span>)][<span class="keyword">ASC</span>|<span class="keyword">DESC</span>],...)</span><br><span class="line"></span><br><span class="line">(<span class="number">3</span>)<span class="keyword">ALTER</span> <span class="keyword">TABLE</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name</span><br><span class="line"><span class="keyword">ADD</span>[<span class="keyword">UNIQUE</span>|DULLTEXT][<span class="keyword">INDEX</span>][<span class="keyword">KEY</span>][index_name]</span><br><span class="line">(col_name[<span class="keyword">length</span>][<span class="keyword">ASC</span>|<span class="keyword">DESC</span>],...)</span><br></pre></td></tr></table></div></figure>


        <h4 id="3-3-2-索引的查看"   >
          <a href="#3-3-2-索引的查看" class="heading-link"><i class="fas fa-link"></i></a>3.3.2 索引的查看</h4>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line">语法格式</span><br><span class="line"><span class="keyword">SHOW</span> &#123;<span class="keyword">INDEX</span>|INDEXS|<span class="keyword">KEYS</span>&#125;&#123;<span class="keyword">FROM</span>|<span class="keyword">IN</span>&#125; tbl_name </span><br><span class="line">[&#123;<span class="keyword">FROM</span>|<span class="keyword">IN</span>&#125; db_name]</span><br></pre></td></tr></table></div></figure>


        <h4 id="3-3-3-索引的删除"   >
          <a href="#3-3-3-索引的删除" class="heading-link"><i class="fas fa-link"></i></a>3.3.3 索引的删除</h4>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line">语法格式</span><br><span class="line">(1) <span class="keyword">DROP</span> <span class="keyword">INDEX</span> index_name <span class="keyword">ON</span> tbl_name</span><br><span class="line">(<span class="number">2</span>) <span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">DROP</span> <span class="keyword">INDEX</span> index_name</span><br></pre></td></tr></table></div></figure>


        <h2 id="四、数据更新"   >
          <a href="#四、数据更新" class="heading-link"><i class="fas fa-link"></i></a>四、数据更新</h2>
      
        <h3 id="4-1-插入数据"   >
          <a href="#4-1-插入数据" class="heading-link"><i class="fas fa-link"></i></a>4.1 插入数据</h3>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> 语法格式</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_name (column_list)</span><br><span class="line"><span class="keyword">VALUES</span>(value_list1)[,(value_list2)],...</span><br><span class="line"></span><br><span class="line">从数据查询中插入数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_name1(column_list1)</span><br><span class="line"><span class="keyword">SELECT</span>(column_list)</span><br><span class="line"><span class="keyword">FROM</span> tb_name2 <span class="keyword">WHERE</span>(condition)</span><br><span class="line">注意:column_list1与column_list2必须个数相同且数据</span><br></pre></td></tr></table></div></figure>


        <h4 id="4-1-1-使用INSERT…SET语句插入部分列值数据"   >
          <a href="#4-1-1-使用INSERT…SET语句插入部分列值数据" class="heading-link"><i class="fas fa-link"></i></a>4.1.1 使用INSERT…SET语句插入部分列值数据</h4>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> [<span class="keyword">INTO</span>] tbl-<span class="keyword">name</span></span><br><span class="line"><span class="keyword">SET</span> col_name = &#123;expr|<span class="keyword">DEFAULT</span>&#125;,***</span><br></pre></td></tr></table></div></figure>


        <h4 id="4-1-2-使用INSERT…SELECT语句插入子查询数据"   >
          <a href="#4-1-2-使用INSERT…SELECT语句插入子查询数据" class="heading-link"><i class="fas fa-link"></i></a>4.1.2 使用INSERT…SELECT语句插入子查询数据</h4>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> [<span class="keyword">INTO</span>] tbl_name [(<span class="keyword">col</span> <span class="keyword">name</span>,**-)]</span><br><span class="line"><span class="keyword">SELECT</span> ...</span><br></pre></td></tr></table></div></figure>



        <h3 id="4-2-删除数据"   >
          <a href="#4-2-删除数据" class="heading-link"><i class="fas fa-link"></i></a>4.2 删除数据</h3>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line">语法格式:</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tb_name [<span class="keyword">WHERE</span> &lt;codition&gt;];</span><br><span class="line">删除所有记录可以使用</span><br><span class="line"><span class="keyword">TRUNCATE</span> [<span class="keyword">TABLE</span>] tb_name</span><br></pre></td></tr></table></div></figure>


<p>注意:TRUNCATE 是删除整个表，重新建一个表，在删除全部数据时候效率高于DELETE,DELETE是逐条删除。TRUNCATE无法恢复，AUTO_INCREMENT计数器重置。</p>

        <h3 id="4-3-修改数据"   >
          <a href="#4-3-修改数据" class="heading-link"><i class="fas fa-link"></i></a>4.3 修改数据</h3>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line">语法格式</span><br><span class="line"><span class="keyword">UPDATE</span> tbl_name</span><br><span class="line"><span class="keyword">SET</span> col_name1=expr1 [,col_name2=expr2 ...]</span><br><span class="line">[<span class="keyword">WHERE</span> where_definition]</span><br></pre></td></tr></table></div></figure>


        <h2 id="五、数据查询（考试重点）"   >
          <a href="#五、数据查询（考试重点）" class="heading-link"><i class="fas fa-link"></i></a>五、数据查询（考试重点）</h2>
      
        <h3 id="5-1-SELECT语句"   >
          <a href="#5-1-SELECT语句" class="heading-link"><i class="fas fa-link"></i></a>5.1 SELECT语句</h3>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line">基本语法</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    [<span class="keyword">ALL</span> | <span class="keyword">DISTINCT</span> | <span class="keyword">DISTINCTROW</span>]</span><br><span class="line">select_expr,...</span><br><span class="line">[<span class="keyword">FROM</span> table_reference[, table_refernece]...]</span><br><span class="line">[<span class="keyword">WHERE</span> where_definition] <span class="comment">/*WHERE子句*/</span> </span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> <span class="keyword">sql</span></span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> &#123;col_name | expr | <span class="keyword">position</span>&#125; [<span class="keyword">ASC</span>]|</span><br><span class="line"><span class="keyword">DESC</span>],...[<span class="keyword">WITH</span> <span class="keyword">ROLLUP</span>] <span class="comment">/*GROUP BY子句*/</span></span><br><span class="line"></span><br><span class="line">[<span class="keyword">HAVING</span> where_definition] <span class="comment">/*HAVING 子句*/</span></span><br><span class="line"></span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> &#123;col_name | expr | <span class="keyword">position</span> &#125;[<span class="keyword">ASC</span> | </span><br><span class="line"><span class="keyword">DESC</span>],...] <span class="comment">/*ORDER BY子句*/</span></span><br><span class="line"></span><br><span class="line">[<span class="keyword">LIMIT</span> &#123;[<span class="keyword">offset</span>,]<span class="keyword">row_count</span> | <span class="keyword">row_count</span></span><br><span class="line"><span class="keyword">OFFSET</span> <span class="keyword">offset</span> &#125;] <span class="comment">/*LIMIT子句*/</span></span><br></pre></td></tr></table></div></figure>

<p>SELECT语句中各子句的使用次序及说明</p>
<div class="table-container"><table>
<thead>
<tr>
<th>子句</th>
<th>说明</th>
<th>是否必须使用</th>
</tr>
</thead>
<tbody><tr>
<td>SELECT</td>
<td>要返回的列或表达式</td>
<td>是</td>
</tr>
<tr>
<td>FROM</td>
<td>从中检索数据的表</td>
<td>仅在从表选择数据时使用</td>
</tr>
<tr>
<td>WHERE</td>
<td>行级过滤</td>
<td>否</td>
</tr>
<tr>
<td>GROUP BY</td>
<td>分组说明</td>
<td>仅在按组计算聚合</td>
</tr>
<tr>
<td>HAVING</td>
<td>组级过滤</td>
<td>否</td>
</tr>
<tr>
<td>ORDER BY</td>
<td>输出排序顺序</td>
<td>否</td>
</tr>
<tr>
<td>LIMIT</td>
<td>要检索行数</td>
<td>否</td>
</tr>
</tbody></table></div>

        <h3 id="5-2-列的选择与指定"   >
          <a href="#5-2-列的选择与指定" class="heading-link"><i class="fas fa-link"></i></a>5.2 列的选择与指定</h3>
      
        <h4 id="选择指定的列-投影类似"   >
          <a href="#选择指定的列-投影类似" class="heading-link"><i class="fas fa-link"></i></a>选择指定的列(投影类似)</h4>
      <blockquote>
<p>SELECT classNo , department, className<br>FROM tb_class; </p>
</blockquote>

        <h4 id="选择所有列"   >
          <a href="#选择所有列" class="heading-link"><i class="fas fa-link"></i></a>选择所有列</h4>
      <blockquote>
<p>SELECT * FROM tb_class;</p>
</blockquote>

        <h4 id="定义并使用列的别名"   >
          <a href="#定义并使用列的别名" class="heading-link"><i class="fas fa-link"></i></a>定义并使用列的别名</h4>
      <blockquote>
<p>SELECT studentName as 姓名 , sex as 性别, YEAR<br>(NOW())-YEAR(birthday) as 年龄  from tb_student；</p>
</blockquote>

        <h4 id="替换查询结果集中的数据"   >
          <a href="#替换查询结果集中的数据" class="heading-link"><i class="fas fa-link"></i></a>替换查询结果集中的数据</h4>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line">CASE</span><br><span class="line">WHEN 条件1 THEN 表达式1</span><br><span class="line">    WHEN 条件2 THEN 表达式2 </span><br><span class="line">    ...</span><br><span class="line">ELSE 表达式</span><br><span class="line"><span class="keyword">END</span>[<span class="keyword">AS</span>] column_alias</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#### 计算列值</span></span><br><span class="line"><span class="string">使用SELECT语句对列进行查询时，在结果集中可以输出对列值计算后的值，其具体使用方法是将SELECT语句的语法项“slect_expr” 指定为对应列参与计算的表达式。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#### 聚合函数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">![数据库系统原理-MySQL-数据查询-聚合函数-min.png](https://i.loli.net/2020/03/25/n6iwuVm4OEHNg3q.png)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 5.3 FROM子句与多表连接查询</span></span><br><span class="line"><span class="string">#### 交叉连接</span></span><br><span class="line"><span class="string">#### 内连接</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> <span class="keyword">sql</span></span><br><span class="line"><span class="keyword">FROM</span> table1 [<span class="keyword">INNER</span>] <span class="keyword">JOIN</span> table2 <span class="keyword">ON</span> 连接条件</span><br></pre></td></tr></table></div></figure>


        <h4 id="等值连接"   >
          <a href="#等值连接" class="heading-link"><i class="fas fa-link"></i></a>等值连接</h4>
      <figure class="highlight"><div class="table-container"><table><tr><td class="code"><pre><span class="line">FROM table1，[table2]...</span><br><span class="line">WHERE table1.字段 &lt;比较运算符&gt; table2.字段</span><br></pre></td></tr></table></div></figure>


        <h4 id="外连接"   >
          <a href="#外连接" class="heading-link"><i class="fas fa-link"></i></a>外连接</h4>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line">左连接</span><br><span class="line">FROM table1 [LEFT] JOIN table2 ON 连接条件</span><br><span class="line"></span><br><span class="line">右连接</span><br><span class="line">FROM table1 [RIGHT] JOIN table2 ON 连接条件</span><br></pre></td></tr></table></div></figure>


        <h3 id="5-4-WHERE子句与条件查询"   >
          <a href="#5-4-WHERE子句与条件查询" class="heading-link"><i class="fas fa-link"></i></a>5.4 WHERE子句与条件查询</h3>
      <div class="table-container"><table>
<thead>
<tr>
<th>查询条件</th>
<th>操作符</th>
</tr>
</thead>
<tbody><tr>
<td>比较</td>
<td>=、&lt;&gt;、！=、&lt;、&lt;=、&gt;=、!&lt;、！&gt; 、 NOT + 比较运算符表达式</td>
</tr>
<tr>
<td>确定范围</td>
<td>BETWEEN AND,NOT BETWEEN AND</td>
</tr>
<tr>
<td>确定集合</td>
<td>IN,NOT IN</td>
</tr>
<tr>
<td>字符匹配</td>
<td>LIKE,NOT LIKE</td>
</tr>
<tr>
<td>空值</td>
<td>IS NULL,IS NOT NULl</td>
</tr>
</tbody></table></div>

        <h4 id="子查询"   >
          <a href="#子查询" class="heading-link"><i class="fas fa-link"></i></a>子查询</h4>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line">IN语法：</span><br><span class="line">WHERE 列名 IN (值列表或者子<span class="keyword">SELECT</span>[但必须只有一列])</span><br><span class="line"></span><br><span class="line">比较运算符：</span><br><span class="line"><span class="keyword">WHERE</span> 列名 &lt;比较运算符&gt;（值或者子<span class="keyword">SELECT</span>[但必须只有一值]）</span><br></pre></td></tr></table></div></figure>


        <h4 id="EXIST查询"   >
          <a href="#EXIST查询" class="heading-link"><i class="fas fa-link"></i></a>EXIST查询</h4>
      
        <h3 id="5-5-GROUP-BY-子句与分组数据"   >
          <a href="#5-5-GROUP-BY-子句与分组数据" class="heading-link"><i class="fas fa-link"></i></a>5.5 GROUP BY 子句与分组数据</h3>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line">语法:[GROUP BY字段列表][HAVING&lt;条件表达式&gt;]</span><br><span class="line">含义:按照某一列的值相同的分成一组，进行聚会计算</span><br></pre></td></tr></table></div></figure>


        <h3 id="5-6-HAVING子句"   >
          <a href="#5-6-HAVING子句" class="heading-link"><i class="fas fa-link"></i></a>5.6 HAVING子句</h3>
      <p>在SLEECT语句中，除了能使用GROUP BY子句分组数据之外，还可以使用HAVING子句来过滤分组，即在结果集中规定包含哪些分组和排除哪些分组。</p>

        <h3 id="5-7-ORDER-BY-子句"   >
          <a href="#5-7-ORDER-BY-子句" class="heading-link"><i class="fas fa-link"></i></a>5.7 ORDER BY 子句</h3>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line">语法:[ORDER BY 字段1[ASC|DESC][,字段2[ASC|DESC]]...</span><br></pre></td></tr></table></div></figure>

        <h3 id="5-8-LIMIT子句"   >
          <a href="#5-8-LIMIT子句" class="heading-link"><i class="fas fa-link"></i></a>5.8 LIMIT子句</h3>
      <p>LIMIT[位置偏移量,]行数</p>

        <h2 id="六、视图"   >
          <a href="#六、视图" class="heading-link"><i class="fas fa-link"></i></a>六、视图</h2>
      <p>视图是从一个或多个表（或视图）导出的表。<code>(外模式)</code></p>
<p>视图是数据库的用户使用数据库的观点。</p>
<p>例如，对于一个学校，其学生的情况存于数据库的一个或多个表中，而作为学校的不同职能部门，所关心的学生数据的内容是不同的。</p>
<p><strong><em>视图是一张虚表</em></strong></p>
<p>视图一经定义以后，就可以像表一样被查询，修改、删除和更新</p>

        <h3 id="6-1-创建视图"   >
          <a href="#6-1-创建视图" class="heading-link"><i class="fas fa-link"></i></a>6.1 创建视图</h3>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line">语法格式</span><br><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">OR</span> <span class="keyword">REPLACE</span>][ALGORITHM = </span><br><span class="line">&#123;UNDEFINED | <span class="keyword">MERGE</span> | TEMPTABLE &#125;]</span><br><span class="line">    <span class="keyword">VIEW</span> view_name[(column_list)]</span><br><span class="line">    <span class="keyword">AS</span> select_statement</span><br><span class="line">    [<span class="keyword">WITH</span>[<span class="keyword">CASCADED</span> | <span class="keyword">LOCAL</span>] <span class="keyword">CHECK</span> <span class="keyword">OPTION</span>]</span><br></pre></td></tr></table></div></figure>


        <h3 id="6-2-删除视图"   >
          <a href="#6-2-删除视图" class="heading-link"><i class="fas fa-link"></i></a>6.2 删除视图</h3>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line">语法格式:</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> [<span class="keyword">IF</span> EXIST]</span><br><span class="line">    view_name [,view_name]...</span><br></pre></td></tr></table></div></figure>


        <h3 id="6-3-修改视图定义"   >
          <a href="#6-3-修改视图定义" class="heading-link"><i class="fas fa-link"></i></a>6.3 修改视图定义</h3>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line">语法格式</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> view_name [(column_list)]</span><br><span class="line"><span class="keyword">AS</span> select_statement</span><br><span class="line">[<span class="keyword">WITH</span>[<span class="keyword">CASCADED</span> | <span class="keyword">LOCAL</span>] <span class="keyword">CHECK</span> <span class="keyword">OPTION</span>]</span><br></pre></td></tr></table></div></figure>


        <h3 id="6-4-查看视图定义"   >
          <a href="#6-4-查看视图定义" class="heading-link"><i class="fas fa-link"></i></a>6.4 查看视图定义</h3>
      <figure class="highlight sql"><div class="table-container"><table><tr><td class="code"><pre><span class="line">语法格式</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> view_name</span><br></pre></td></tr></table></div></figure>


        <h3 id="6-5-更新视图数据"   >
          <a href="#6-5-更新视图数据" class="heading-link"><i class="fas fa-link"></i></a>6.5 更新视图数据</h3>
      <p>要通过视图更新基本表数据，必须保证视图是可更新视图，即可以再INSERT、UPDATE或DELETE等语句当中使用它们。</p>
<p>对于可更新的视图，在视图中的行和基本中的行之间必须具有一对一的关系。</p>
<p>还有一些特定的其他结构，这类结构会使得视图不可更新。</p>

        <h3 id="6-6-查询视图数据"   >
          <a href="#6-6-查询视图数据" class="heading-link"><i class="fas fa-link"></i></a>6.6 查询视图数据</h3>
      <p>视图一经定义后，就可以如同查询数据库中的真实表一样，对视图进行数据查询检索，这也是对视图使用最多的一种操作。</p>

        <h2 id="七、本章小结"   >
          <a href="#七、本章小结" class="heading-link"><i class="fas fa-link"></i></a>七、本章小结</h2>
      <ul>
<li>本章首先概述了SQL的发展历程、特点和语言组成，</li>
<li>然后简单介绍了MySQL的使用基础，并说明了MySQL中SQL的组成要素与扩展，</li>
<li>最后结合MySQL的使用，详细地介绍了实现关系数据库各种基本操作的SQL语句，</li>
<li>主要包括书籍的定义、数据的更新、数据的查询的视图的使用等内容。</li>
</ul>

        <h3 id="本章学习重点"   >
          <a href="#本章学习重点" class="heading-link"><i class="fas fa-link"></i></a>本章学习重点</h3>
      <p>使用SQL语言实现数据定义、数据更新和数据查询三类数据库基本操作，具体包括数据库模式定义、表定义、视图定义、索引定义、插入数据、删除数据、修改数据、SELECT语句及相关各类子句等。</p>

        <h3 id="本章学习难点"   >
          <a href="#本章学习难点" class="heading-link"><i class="fas fa-link"></i></a>本章学习难点</h3>
      <p>数据查询中各种表连接的方式、GROUP BY子句的使用方法、HAVING子句的使用方法、ORDER BY子句的使用方法和LIMIT子句的使用方法，以及视图定义各种使用方法。</p>
]]></content>
      <categories>
        <category>自考专升本</category>
      </categories>
      <tags>
        <tag>数据库系统原理</tag>
      </tags>
  </entry>
  <entry>
    <title>【数据结构】4.线性表-线性表的定义&amp;&amp;抽象数据类型&amp;&amp;线性表的抽象数据类型</title>
    <url>/2020/04/03/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%204.%E7%BA%BF%E6%80%A7%E8%A1%A8-%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E5%AE%9A%E4%B9%89&amp;&amp;%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B&amp;&amp;%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[
        <h2 id="一、线性表的定义"   >
          <a href="#一、线性表的定义" class="heading-link"><i class="fas fa-link"></i></a>一、线性表的定义</h2>
      <p>具有线一样的性质的结构</p>
<p>线性表（List）：有零个或多个数据元素组成的有限序列。</p>

        <h3 id="1-1-线性表的定义的注意点"   >
          <a href="#1-1-线性表的定义的注意点" class="heading-link"><i class="fas fa-link"></i></a>1.1 线性表的定义的注意点</h3>
      <ol>
<li>首先线性表是一个序列，也就是说元素之间是有个先来后到。</li>
<li>若元素存在多个，则第一个元素无前驱，而最后一个元素无后继，其他元素都有且只有一个前驱和后继</li>
<li>线性表强调是有限的。</li>
</ol>
<a id="more"></a>


        <h3 id="1-2-用数学语言来定义线性表"   >
          <a href="#1-2-用数学语言来定义线性表" class="heading-link"><i class="fas fa-link"></i></a>1.2 用数学语言来定义线性表</h3>
      <p>若将线性表记为<code>（a1,...,ai-1,ai,ai+1,...an)</code>,则表中ai-1领先ai-1领先于ai，ai领先于ai+1,称为ai-1是ai的直接前驱元素，ai+1是ai的直接后继元素。</p>

        <h3 id="1-3-空表"   >
          <a href="#1-3-空表" class="heading-link"><i class="fas fa-link"></i></a>1.3 空表</h3>
      <p>线性表元素的个数n（n&gt;=0）定义为线性表的长度，当n=0时，称为空表。</p>

        <h2 id="二、抽象数据类型"   >
          <a href="#二、抽象数据类型" class="heading-link"><i class="fas fa-link"></i></a>二、抽象数据类型</h2>
      
        <h3 id="2-1-数据类型"   >
          <a href="#2-1-数据类型" class="heading-link"><i class="fas fa-link"></i></a>2.1 数据类型</h3>
      <p>数据类型：是指一组性质相同的值的集合及定义在此集合上的一些操作的总称。</p>
<blockquote>
<p>例如：编程语言上的整型，浮点型，字符型这些就是数据类型</p>
</blockquote>
<p>在计算机中，内存也不是无限大的，计算1+1 = 2这样的整形数字的加减乘除运算，显然不需要开辟很大的内存空间。</p>
<p>但是要计算<code>1.2345677342+2.5667235212323</code>这样带大量小数的，就需要开辟比较大的空间才存放的下。</p>
<p>所以要对数据类型进行分类，分出多种数据类型来适合各种不同的计算条件差异。</p>

        <h4 id="2-1-1-C语言的数据类型分类"   >
          <a href="#2-1-1-C语言的数据类型分类" class="heading-link"><i class="fas fa-link"></i></a>2.1.1 C语言的数据类型分类</h4>
      <p>按取值的不同分</p>
<ol>
<li>原子类型：不可以再分解的基本类型，例如整型、浮点型、字符型等。</li>
<li>结构类型：由若干个类型组合而成，是可以再分解的，例如整型数组是由若干整型数据组成的。</li>
</ol>

        <h3 id="2-2-抽象"   >
          <a href="#2-2-抽象" class="heading-link"><i class="fas fa-link"></i></a>2.2 抽象</h3>
      <ul>
<li>抽象是指抽取出事物具有的普遍性的本质。</li>
<li>它要求抽出问题的特征而忽略非 本质的细节。</li>
<li>是对具体事物的一个概括。</li>
<li>抽象是一种思考问题的方式，它隐藏了繁杂的细节。</li>
</ul>
<p>“抽象”的意义在于数据类型的数学抽象特性。</p>

        <h3 id="2-3-抽象数据类型（ADT"   >
          <a href="#2-3-抽象数据类型（ADT" class="heading-link"><i class="fas fa-link"></i></a>2.3 抽象数据类型（ADT)</h3>
      <p>抽象数据类型(Abstract Data Type,ADT)是指一个数字模型及定义在该模型上的一组操作。<code>(类似我们编程语言的类)</code></p>
<p>抽象数据类型的定义仅取决于它的一组逻辑特性，而与其在计算机内部如果表示和实现无关。</p>
<p>抽象数据类类型不仅仅指那些已经定义并实现的数据类型，还可以是计算机编程者在设计软件程序时自己定义的数据类型。</p>
<blockquote>
<p>例如一个3D游戏中，要定位角色的位置。那么总会出现x,y,z三个整型数据组合在一起的坐标。就可以定义一个point的抽象数据类型，它拥有x,y,z三个整型变量，这样就可以方便的对一个角色的位置进行操作。</p>
</blockquote>

        <h4 id="2-3-2-抽象数据类型的标准格式"   >
          <a href="#2-3-2-抽象数据类型的标准格式" class="heading-link"><i class="fas fa-link"></i></a>2.3.2 抽象数据类型的标准格式</h4>
      <figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line">ADT 抽象数据类型名</span><br><span class="line">Data</span><br><span class="line">    数据元素之间逻辑关系的定义</span><br><span class="line">Operation</span><br><span class="line">    操作</span><br><span class="line">endADT</span><br></pre></td></tr></table></div></figure>



        <h2 id="三、线性表的抽象数据类型"   >
          <a href="#三、线性表的抽象数据类型" class="heading-link"><i class="fas fa-link"></i></a>三、线性表的抽象数据类型</h2>
      <p>抽象数据类型是就是数据类型和相关操作捆绑在一起。</p>

        <h3 id="3-1-线性表的抽象数据类型的定义："   >
          <a href="#3-1-线性表的抽象数据类型的定义：" class="heading-link"><i class="fas fa-link"></i></a>3.1 线性表的抽象数据类型的定义：</h3>
      <ul>
<li>ADT 线性表（List）</li>
<li>Data <ul>
<li>线性表的的数据对象集合为{a1,a2,…an},每个元素的类型均为DataType。其中，除第一个元素a1外，每一个元素有且只有一个直接前驱元素，除了最后一个元素an外，每一个元素有且只有一个直接后继元素。数据元素之间的关系是一对一的关系。</li>
</ul>
</li>
<li>Operation<ul>
<li>InitList（*L）：初始化操作，建立一个空的线性表L 。</li>
<li>ListEmpty(L):判断线性表是否为空表，若线性表为空，返回true，否则返回false</li>
<li>ClearList（*L）: 将线性表清空。</li>
<li>GetElem（L，i，*e）：将线性表L中的第i个位置元素值返回给e。</li>
<li>LocateElem（L,e）:在线性表L中查找与给定值e相等的元素，如果查找成功，返回该元素在表中序号表示成功；否则，放回0表示失败。</li>
<li>ListInsert（*L，i，e）：在线性表L中第i个位置插入新元素e。</li>
<li>ListDelete（<code>*L，i，*e</code>）:删除线性表L中第i个位置元素，并用e返回其值。</li>
<li>ListLength（L）:返回线性表L的元素个数。</li>
</ul>
</li>
<li>endADT</li>
</ul>
<blockquote>
<p>对于不同的应用，线性表的基本操作是不同的，上述操作是最基本的，对于实际问题中涉及的关于线性表的更复杂操作，完全可以用这些基本操作的组合来实现。</p>
</blockquote>

        <h3 id="3-2-例子"   >
          <a href="#3-2-例子" class="heading-link"><i class="fas fa-link"></i></a>3.2 例子</h3>
      <p>问题：实现两个线性表A、B并集操作，即要使得集合A=AUB</p>
<blockquote>
<p>A=AUB,就是把存在集合B中但不存在集合A中的元素插入到A中即可。</p>
</blockquote>
<p>解题思路：我们只需要循环遍历集合B中的每个元素，判断当前元素是否存在A中，若不存在，则插入A中即可。</p>
<p>运用到几个操作组合如下</p>
<ul>
<li>ListLength（L）;</li>
<li>GetElem(L,i,*e);</li>
<li>LocateElem(L，e)；</li>
<li>ListInsert(*L,i,e);</li>
</ul>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//伪代码</span></span><br><span class="line">void unionL(List *La,list Lb)'</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> La_len,Lb_len,i;</span><br><span class="line">    ElemType e;</span><br><span class="line">    La_len = ListLength(*La);</span><br><span class="line">    Lb_len = ListLength(Lb);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=Lb_len;i++)&#123; <span class="comment">//迭代</span></span><br><span class="line">        GetElem(Lb,i,&amp;e);</span><br><span class="line">        <span class="keyword">if</span>(!LocateElem(*La,e))</span><br><span class="line">        &#123;</span><br><span class="line">            ListInsert(*La,++La_len,e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>
]]></content>
      <categories>
        <category>自考专升本</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>【数据结构】1.数据结构和算法绪论</title>
    <url>/2020/04/03/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%911.%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E7%BB%AA%E8%AE%BA/</url>
    <content><![CDATA[
        <h2 id="一、什么是数据结构？"   >
          <a href="#一、什么是数据结构？" class="heading-link"><i class="fas fa-link"></i></a>一、什么是数据结构？</h2>
      
        <h3 id="官方意思"   >
          <a href="#官方意思" class="heading-link"><i class="fas fa-link"></i></a>官方意思</h3>
      <p>数据结构是一门研究非数值计算的程序设计问题中的操作对象，以及它们之间的关系和操作等相关问题的学科。</p>

        <h3 id="通俗意思"   >
          <a href="#通俗意思" class="heading-link"><i class="fas fa-link"></i></a>通俗意思</h3>
      <p>程序设计 = 数据结构 + 算法</p>
<p>数据结构就是关系，数据元素相互之间存在的一种或多种特定关系的集合。</p>
<a id="more"></a>


        <h2 id="二、-逻辑结构和物理结构的定义"   >
          <a href="#二、-逻辑结构和物理结构的定义" class="heading-link"><i class="fas fa-link"></i></a>二、 逻辑结构和物理结构的定义</h2>
      <p>传统上，我们把数据结构分为逻辑结构与物理结构。</p>

        <h3 id="逻辑结构的定义"   >
          <a href="#逻辑结构的定义" class="heading-link"><i class="fas fa-link"></i></a>逻辑结构的定义</h3>
      <p>逻辑结构就是数据对象中数据元素之间的相互关系。</p>

        <h3 id="物理结构的定义"   >
          <a href="#物理结构的定义" class="heading-link"><i class="fas fa-link"></i></a>物理结构的定义</h3>
      <p>物理结构是指数据的逻辑结构在计算机中的存储形式。物理结构就是如何把数据元素存储到计算机的存储器中。</p>
<p>如像硬盘、软盘等外部存储器的数据组织通常用文件结构来描述。</p>

        <h2 id="三、逻辑结构中的四大结构"   >
          <a href="#三、逻辑结构中的四大结构" class="heading-link"><i class="fas fa-link"></i></a>三、逻辑结构中的四大结构</h2>
      
        <h3 id="集合结构"   >
          <a href="#集合结构" class="heading-link"><i class="fas fa-link"></i></a>集合结构</h3>
      <p>集合结构中的数据元素除了属于一个集合外，他们之间没有其他关系。</p>

        <h3 id="线性结构"   >
          <a href="#线性结构" class="heading-link"><i class="fas fa-link"></i></a>线性结构</h3>
      <p>线性结构中的数据元素之间是一对一的关系。</p>

        <h3 id="树形结构"   >
          <a href="#树形结构" class="heading-link"><i class="fas fa-link"></i></a>树形结构</h3>
      <p>树形结构中的数据元素之间存在一种一对多的层次关系。</p>

        <h3 id="图形结构"   >
          <a href="#图形结构" class="heading-link"><i class="fas fa-link"></i></a>图形结构</h3>
      <p>图形结构的数据元素是多对多的关系</p>

        <h2 id="四、物理结构"   >
          <a href="#四、物理结构" class="heading-link"><i class="fas fa-link"></i></a>四、物理结构</h2>
      <p>数据元素中的存储结构形式有两种，顺序存储和链式存储</p>

        <h3 id="顺序存储结构"   >
          <a href="#顺序存储结构" class="heading-link"><i class="fas fa-link"></i></a>顺序存储结构</h3>
      <p>顺序存储结构：是把数据元素存放在地址练习的存储单元里，其数据间的逻辑关系和物理关系是一致。</p>
<p>例如：编程语言中数组结构</p>

        <h3 id="链式存储结构"   >
          <a href="#链式存储结构" class="heading-link"><i class="fas fa-link"></i></a>链式存储结构</h3>
      <p>因为若有时常要变化的结构，顺序存储是不科学的，因此有了链式存储结构。</p>
<p>链式存储结构：是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的。也可以是不连续的。</p>
<p>但是链式存储结构的数据元素存储关系并不能反映其逻辑关系，因此需要用一个指针存放数据元素的地址。这样子通过地址就可以找到相关联系数据元素的位置。</p>
<p>指针就是链着数据的一条链子。</p>
<p>例如：银行的排队系统。</p>
]]></content>
      <categories>
        <category>自考专升本</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>【数据结构】5.线性表-顺序存储结构</title>
    <url>/2020/04/03/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%205.%E7%BA%BF%E6%80%A7%E8%A1%A8-%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p>线性表有两种物理存储结构:顺序存储结构和链式存储结构。</p>
<p>线性表的顺序存储结构，指的是用一段地址练习的存储单元依次存储线性表的数据元素。</p>
<p>物理上的存储方式事实上就是在内存中找个初始地址，然后通过占位的形式，把一定的内存空间给占了，然后把相同数据类型的数据元素依次放在这块空地中。</p>

        <h2 id="1-线性表顺序存储的结构代码"   >
          <a href="#1-线性表顺序存储的结构代码" class="heading-link"><i class="fas fa-link"></i></a>1. 线性表顺序存储的结构代码</h2>
      <figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 20</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data[MAXSIZE];</span><br><span class="line">    <span class="keyword">int</span> length;<span class="comment">//线性表当前长度</span></span><br><span class="line">&#125;SqList；</span><br></pre></td></tr></table></div></figure>

<a id="more"></a>


        <h2 id="2-顺序存储结构封装需要三个属性："   >
          <a href="#2-顺序存储结构封装需要三个属性：" class="heading-link"><i class="fas fa-link"></i></a>2. 顺序存储结构封装需要三个属性：</h2>
      <ol>
<li>存储空间的起始位置，数组data，它的存储位置就是线性表存储空间的存储位置。</li>
<li>线性表的最大存储容量：数组的长度MaxSize</li>
<li>线性表的当前长度：length</li>
</ol>

        <h3 id="注意"   >
          <a href="#注意" class="heading-link"><i class="fas fa-link"></i></a>注意</h3>
      <p>数组的长度与线性表的当前长度需要区分一下：</p>
<ul>
<li>数组的长度是存放线性表的存储空间的总长度，一般初始化后不变。</li>
<li>而线性表的当前长度是线性表中元素的个数，是会变化的。</li>
</ul>

        <h2 id="3-地址计算方法"   >
          <a href="#3-地址计算方法" class="heading-link"><i class="fas fa-link"></i></a>3. 地址计算方法</h2>
      <p>假设ELemType 占用的是C个存储单元（字节），那么线性表中第i+1个数据元素和第i个数据元素的存储位置的关系是（LOC表示获得存储位置的函数）</p>
<p><code>LOC(ai+1) = LOC(ai) + c</code></p>
<p>所以对于第i个数据元素ai的存储位置可以由a1推算得出：<br><code>LOC(ai) = LOC(ai) + (i-1)*a</code></p>
<p>通过这个公式，我们可以随时计算出线性表中任意位置的地址，不管它是第一个还是最后一个，都是相同的时间。那么它的存储时间性能当然就为O（1）。我们通常称为随机存储结构。</p>

        <h2 id="4-获取元素操作"   >
          <a href="#4-获取元素操作" class="heading-link"><i class="fas fa-link"></i></a>4. 获取元素操作</h2>
      <p>实现GetElem的具体操作，即将线性表L中的第i个位置元素值返回。只需要把数组第i-1下标的值返回即可。</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//伪代码</span></span><br><span class="line"><span class="comment">//getElem</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> ERROR 0 </span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> FALSE 0</span></span><br><span class="line"></span><br><span class="line">typedeof <span class="keyword">int</span> Status;</span><br><span class="line"><span class="comment">//Staus是函数的类型，其值是函数结构状态代码，如OK等。</span></span><br><span class="line"><span class="comment">//初始条件：顺序线性表L已存在，1&lt;=i&lt;=ListLength(L)</span></span><br><span class="line"><span class="comment">//操作结果:用e返回L中第i个数据元素的值。</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">GetElem</span><span class="params">(SqList L,<span class="keyword">int</span> i,ELemType * e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L.length == <span class="number">0</span> || i&lt;<span class="number">1</span> || i&gt;L.length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    *e = L.data[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里返回值类型Status是一个整型，约定返回1代表OK，返回0代表ERROR。</span></span><br></pre></td></tr></table></div></figure>


        <h2 id="5-插入操作"   >
          <a href="#5-插入操作" class="heading-link"><i class="fas fa-link"></i></a>5. 插入操作</h2>
      <p>线性表的顺序存储结构具有随机存储结构的特点，时间复杂度为O(1)。</p>

        <h3 id="插入算法的思路"   >
          <a href="#插入算法的思路" class="heading-link"><i class="fas fa-link"></i></a>插入算法的思路</h3>
      <ul>
<li>如果插入位置不合理，抛出异常；</li>
<li>如果线性表长度大于等于数组长度，则抛出异常或动态增加数组容量；</li>
<li>从最后一个元素开始向前遍历到第i个位置。分别将它们都向后移动一个位置。</li>
<li>将要插入元素填入位置i处；</li>
<li>线性表长+1。</li>
</ul>

        <h3 id="问题："   >
          <a href="#问题：" class="heading-link"><i class="fas fa-link"></i></a>问题：</h3>
      <p>实现ListInsert（*L，i，e）,即在线线性表L中的第i个位置插入新元素e，代码如何写？</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//伪代码</span></span><br><span class="line"><span class="comment">// 初始条件：顺序线性表L已存在，1&lt;=i=ListLength(L)。</span></span><br><span class="line"><span class="comment">// 操作结构:在L中第i个位置之前插入新元素e，L长度+1</span></span><br><span class="line"></span><br><span class="line">Status ListInsert（SqList *L，<span class="keyword">int</span> i,ELemType e）&#123;</span><br><span class="line">    <span class="keyword">int</span> k ;</span><br><span class="line">    <span class="keyword">if</span>(L -&gt; length == MAXSIZE )<span class="comment">//顺序线性表已经满了</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span> || i&gt;L-&gt; length+<span class="number">1</span>) <span class="comment">//当i不在范围内时</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i &lt;= L-&gt;length) <span class="comment">//若插入数据位置不在表尾</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//将要插入位置后数据元素向后移动一位</span></span><br><span class="line">        <span class="keyword">for</span>（k = L-&gt;length<span class="number">-1</span>;k&gt;=i<span class="number">-1</span>;k--）</span><br><span class="line">        &#123;</span><br><span class="line">            L-data[k+<span class="number">1</span>]=L-&gt;data[k]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    L -&gt; data [i_1] = e <span class="comment">// 将新元素插入</span></span><br><span class="line">    L -&gt; length ++</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> OK；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h2 id="6-删除操作"   >
          <a href="#6-删除操作" class="heading-link"><i class="fas fa-link"></i></a>6. 删除操作</h2>
      
        <h3 id="删除算法的思路"   >
          <a href="#删除算法的思路" class="heading-link"><i class="fas fa-link"></i></a>删除算法的思路</h3>
      <ul>
<li>如果删除位置不合理，抛出异常</li>
<li>取出删除元素</li>
<li>从删除元素位置开始遍历到最后一个元素位置，分别将它们都向前移动一个位置；</li>
<li>表长-1</li>
</ul>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始条件：顺序线性表L已存在，1&lt;=i&lt;=ListLength(L)</span></span><br><span class="line"><span class="comment">//操作结构:删除L的第i个数据元素，并用e返回其值，L的长度-1</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">ListDelete</span><span class="params">(SqList *L, <span class="keyword">int</span> i，ElemType *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k,</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;length == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span> || i&gt;L-length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ERRPR</span><br><span class="line">    &#125;</span><br><span class="line">    *e = L-&gt; data[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">if</span>(i &lt; L-&gt; Length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(k=i; k&lt;L-length; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            L -&gt; data[k<span class="number">-1</span>] = L -&gt; data[k]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    L -&gt; length --;</span><br><span class="line">    <span class="keyword">return</span> OK</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

        <h2 id="7-插入与删除操作的时间复杂度"   >
          <a href="#7-插入与删除操作的时间复杂度" class="heading-link"><i class="fas fa-link"></i></a>7. 插入与删除操作的时间复杂度</h2>
      <p>最好的情况：插入和删除操作刚好要求在最后一个位置操作，因为不需要移动任何元素，所以此时的时间复杂度为O（1）。</p>
<p>最坏的情况：如果要插入和删除的位置是第一个元素，那就意味着要移动所以的元素向后或者向前，所以这个时间复杂度为O(n)。</p>
<p>平均情况，取中间值O（（n-1）/2）,简化可得O（n）。</p>

        <h2 id="8-线性表顺序存储结构的特性"   >
          <a href="#8-线性表顺序存储结构的特性" class="heading-link"><i class="fas fa-link"></i></a>8. 线性表顺序存储结构的特性</h2>
      <p>线性表的顺序存储结构，在存、读数据时，不管是在哪个位置，时间复杂度都是O（1）。而在插入或删除，时间复杂度都是O（n）。</p>
<p>因此线性表顺序存储结构比较适合元素个数比较稳定，不经常插入和删除元素，而更多的操作是存取数据的应用。</p>

        <h2 id="9-线性表顺序存储结构的优缺点"   >
          <a href="#9-线性表顺序存储结构的优缺点" class="heading-link"><i class="fas fa-link"></i></a>9. 线性表顺序存储结构的优缺点</h2>
      
        <h3 id="优点"   >
          <a href="#优点" class="heading-link"><i class="fas fa-link"></i></a>优点</h3>
      <ol>
<li>无须为表示表中元素之间的逻辑关系而增加额外的存储空间</li>
<li>可以快速地存取表中任意位置的元素。</li>
</ol>

        <h3 id="缺点"   >
          <a href="#缺点" class="heading-link"><i class="fas fa-link"></i></a>缺点</h3>
      <ol>
<li>插入和删除操作需要移动大量元素。</li>
<li>当线性表长度变化较大时，难以确定存储空间的容量。</li>
<li>容易造成存储空间的“碎片”</li>
</ol>
]]></content>
      <categories>
        <category>自考专升本</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>【数据结构】6.线性表-链式存储结构</title>
    <url>/2020/04/03/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%206.%E7%BA%BF%E6%80%A7%E8%A1%A8-%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p>线性表的顺序存储结构，它最大的缺点就是插入和删除时需要移动大量元素，这显然就需要耗费时间。</p>

        <h2 id="1-问-为什么当插入和删除时，就要移动大量的元素？"   >
          <a href="#1-问-为什么当插入和删除时，就要移动大量的元素？" class="heading-link"><i class="fas fa-link"></i></a>1. 问:为什么当插入和删除时，就要移动大量的元素？</h2>
      <p>原因：就在于相邻两元素的存储位置也具有邻居关系，它们在内存的位置是紧挨着的，中间没有间隙，当然就无法快速插入和删除。</p>

        <h2 id="2-线性表链式存储结构定义"   >
          <a href="#2-线性表链式存储结构定义" class="heading-link"><i class="fas fa-link"></i></a>2. 线性表链式存储结构定义</h2>
      <p>线性表的链式存储结构的特点是用一组任意的存储单元线性表的数据元素，这组存储单元可以存储内存中未被占用的任意位置。</p>
<p>比起顺序存储结构每个数据元素只需要存储一个位置就可以了。现在链式存储结构中，除了要存储数据元素信息外，还有存储它的后继元素的存储地址（指针）。</p>
<p>也就是说除了存储其本身的信息外，还需存储一个指示其直接后继的存储位置的信息。</p>
<a id="more"></a>


        <h3 id="2-1-数据域、指针域、指针或链、结点"   >
          <a href="#2-1-数据域、指针域、指针或链、结点" class="heading-link"><i class="fas fa-link"></i></a>2.1 数据域、指针域、指针或链、结点</h3>
      <p>把存储数据元素信息的域称为数据域，把存储直接后继位置的域称为指针域。指针域中存储的信息称为指针或链。这两部分信息组成数据元素称为存储映像，称为结点（Node）</p>

        <h3 id="2-2-单链表"   >
          <a href="#2-2-单链表" class="heading-link"><i class="fas fa-link"></i></a>2.2 单链表</h3>
      <p>n个结点链接成一个链表，即为线性表（a1,a2,a3,…,an）的链式存储结构</p>
<p>因为此链表的每个结点中包含一个指针域，所以叫做单链表<br><img src="https://i.loli.net/2020/03/11/QiUnE97Ipz3Z8KL.png" alt="单链表02-min.png"></p>
<p>我们把链表中的第一个结点的存储位置叫做头指针，最后一个结点指针为空（NULL）</p>

        <h4 id="2-2-1-头指针与头结点的异同"   >
          <a href="#2-2-1-头指针与头结点的异同" class="heading-link"><i class="fas fa-link"></i></a>2.2.1 头指针与头结点的异同</h4>
      
        <h5 id="头指针"   >
          <a href="#头指针" class="heading-link"><i class="fas fa-link"></i></a>头指针</h5>
      <ul>
<li>头指针是指链表执行第一个结点的指针，若链表头结点，则是指向头结点的指针。</li>
<li>头指针具有标识作用，所以常用头指针冠以链表的名字（指针变量的名字）</li>
<li>无论链表是否为空，头指针君不为空</li>
<li>头指针是链表的必要元素。</li>
</ul>

        <h5 id="头结点"   >
          <a href="#头结点" class="heading-link"><i class="fas fa-link"></i></a>头结点</h5>
      <ul>
<li>头结点是为了操作的统一和方便而设立的，放在第一个元素的结点之前，其数据域一般无意义（但也可以用来存放链表的长度）。</li>
<li>有了头结点，对于第一元素结点前插入结点和删除第一结点起操作与其它结点的操作就统一了</li>
</ul>

        <h4 id="2-2-2-C语言中可以用结构指针来描述单链表"   >
          <a href="#2-2-2-C语言中可以用结构指针来描述单链表" class="heading-link"><i class="fas fa-link"></i></a>2.2.2 C语言中可以用结构指针来描述单链表</h4>
      <figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ELemType data ; <span class="comment">//数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">Next</span>;</span> <span class="comment">//指针域</span></span><br><span class="line">&#125; Node;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">LinkList</span>;</span></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">&gt; 假设p是指向线性表第i个元素的指针，则该结点ai的数据域我们，可以用p-&gt;data的值是一个数据元素，结点ai的指针域可以用 p-&gt;next 来表示，p-&gt;next 的值是一个指针。p-&gt;next指向ai+<span class="number">1</span>的指针。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### <span class="number">2.2</span><span class="number">.3</span> 问题:如果p-&gt;data = ai,那么p-&gt;next-&gt;data = ?</span><br><span class="line">答案：p-&gt; next -&gt; data = ai + <span class="number">1</span>。</span><br><span class="line"></span><br><span class="line">#### <span class="number">2.2</span><span class="number">.4</span> 单链表的读取</span><br><span class="line">获得链表第i个数据的算法思路</span><br><span class="line"><span class="number">1.</span> 声明一个结点p指向链表第一个结点，初始化j从<span class="number">1</span>开始；</span><br><span class="line"><span class="number">2.</span> 当j&lt;<span class="number">1</span> 时，就遍历链表，让p的指针向后移动，不断指向一下结点，j+<span class="number">1</span>;</span><br><span class="line"><span class="number">3.</span> 若到链表末尾p为空，则说明第i个元素不存在；</span><br><span class="line"><span class="number">4.</span> 否则查找成功，返回结点p的数据。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">``` C</span><br><span class="line"><span class="comment">//伪代码</span></span><br><span class="line"><span class="comment">// 初始条件：顺序线性表L已存在，i&lt;=i=ListLength(L)</span></span><br><span class="line"><span class="comment">// 操作条件：用e返回L中第i个数据元素的值</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">GetELem</span> <span class="params">(LinkList L, <span class="keyword">int</span> i , ElemType  *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    LinkList p;</span><br><span class="line">    p = L-&gt; next;</span><br><span class="line">    j = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(p&amp;&amp;j&lt;i)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p -&gt; next;</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!p || j&gt;i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    *e = p -&gt; data;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>也就是说，从头开始找，直到第i个元素为止。<br>由于这个算法的时间复杂度取决于i的位置，当i= 1时，则不需要遍历，而i = n时，则遍历n-1才可以。因此最坏情况的时间复杂度为O(n)。</p>
<p>由于单链表的结构中没有定义表长，所以不能实现知道要循环多少次，因此也就不方便使用for来控制循环。</p>
<p>其核心思想叫做“工作指针后移”，这其实也是很多算法的常用技术。</p>

        <h4 id="2-2-4-单链表的插入"   >
          <a href="#2-2-4-单链表的插入" class="heading-link"><i class="fas fa-link"></i></a>2.2.4 单链表的插入</h4>
      <p>单链表第i个数据插入结点的算法思路</p>
<ol>
<li>声明一结点p指向链表头结点，初始化j从1开始；</li>
<li>当j&lt;1时，就遍历链表，让p的指针向后移动，不断指向下一结点，j累加1；</li>
<li>若到链表末尾p为空，则说明第i个元素不存在。</li>
<li>否则查找成功，在系统中生成一个空结点s；</li>
<li>将数据元素e赋值给s-&gt;data;</li>
<li>单链表的插入的标准语句<ol>
<li>s-&gt; next = p -&gt; next;</li>
<li>p - next = s;  </li>
</ol>
</li>
<li>返回成功。</li>
</ol>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line">\\伪代码</span><br><span class="line">\\初始条件：顺序线性表L已存在，<span class="number">1</span>&lt;=i&lt;ListLength（L）</span><br><span class="line">\\操作结果：在L中第i个位置之前插入新的数据元素e，L的长度加<span class="number">1</span></span><br><span class="line"></span><br><span class="line">Status ListInsert(LinkList *L ,<span class="keyword">int</span> i,ElemType e)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    LinkList p,s;</span><br><span class="line">    p = *L;</span><br><span class="line">    j =<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; j&lt;i) <span class="comment">//用于寻找第i个结点</span></span><br><span class="line">    &#123;</span><br><span class="line">        p = p -&gt; next;</span><br><span class="line">        j ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!p || j&gt;i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    s = (LiskList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    s -&gt; data = e;</span><br><span class="line">    s -&gt; next = p -&gt; next;</span><br><span class="line">    p -&gt; next = s;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> Ok;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>





        <h4 id="2-2-5-单链表的删除"   >
          <a href="#2-2-5-单链表的删除" class="heading-link"><i class="fas fa-link"></i></a>2.2.5 单链表的删除</h4>
      <p> 关键步骤<br> p-&gt;next = p - next -&gt; next;<br> 也可以是：q = p - next; p-&gt;next= q -next;</p>
<p>单链表第i个数据删除结点的算法思路：</p>
<ol>
<li>声明结点p指向链表第一个结点，初始化j=1；</li>
<li>当j&lt;1时，就遍历链表，让P的指针向后移动，不断指向下一个结点，j累加1；</li>
<li>若到链表末尾p为空，则说明第i个元素不存在；</li>
<li>否则查找成功，将欲删除结点p-&gt;next赋值给q；</li>
<li>单链表的删除标准语句p-&gt;next = q -&gt; next;</li>
<li>将q结点中的数据赋值给e，作为返回；</li>
<li>释放q结点。</li>
</ol>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//伪代码</span></span><br><span class="line"><span class="comment">//初始条件：顺序线性表L已存在，1&lt;=i&lt;ListLength(L)</span></span><br><span class="line"><span class="comment">//操作结果:删除L的第i个数据元素，并用e返回其值，L的长度-1</span></span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">ListDelete</span><span class="params">(LinkList * L，<span class="keyword">int</span> i,ElemType *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    LinkList p , q;</span><br><span class="line">    p = *L;</span><br><span class="line">    j = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(p-&gt;next &amp;&amp; j&lt;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p- next;</span><br><span class="line">        ++j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(！(p-&gt;next) || j&gt;i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ERROR</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    q = p-&gt; next;</span><br><span class="line">    p -&gt; next = q -&gt; next;</span><br><span class="line">    </span><br><span class="line">    *e = q-data;</span><br><span class="line">    <span class="built_in">free</span>(q);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h4 id="2-2-6-单链表的总结"   >
          <a href="#2-2-6-单链表的总结" class="heading-link"><i class="fas fa-link"></i></a>2.2.6 单链表的总结</h4>
      <p> 无论是单链表插入还是删除算法，其实都是由两个部分组成：第一部分就是遍历查找第i个元素，第二部分就是实现插入和删除元素。</p>
<p> 所以可以推出它们的时间复杂度都是O(n)。</p>
<p> 如果在我们不知道第i个元素的指针位置，单链表数据结构在插入和删除操作上，与线性表的顺序存储结构是没有太大优势的。</p>
<p> 但如果，从第i个位置开始，插入连续10个元素，对于顺序存储结构意味着，每一次插入都需要移动n-i个位置，所以每次都是O（n）</p>
<p> 而单链表，只需要在第一次时，找到第i个位置的指针，此时为O（n），接下来只是简单地通过赋值移动指针而已，时间复杂度都是O(1）。</p>
<p> 对于插入或删除数据越频繁的操作，单链表的效率优势就越来越明显。</p>
]]></content>
      <categories>
        <category>自考专升本</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>【数据结构】2.什么是算法</title>
    <url>/2020/04/03/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%912.%E4%BB%80%E4%B9%88%E6%98%AF%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[
        <h2 id="一、数据结构与算法"   >
          <a href="#一、数据结构与算法" class="heading-link"><i class="fas fa-link"></i></a>一、数据结构与算法</h2>
      <p>将数据结构与算法结合，人才能更好的理解其中的数据结构。便于记忆。</p>

        <h2 id="二、问题：1-2-99-100-？"   >
          <a href="#二、问题：1-2-99-100-？" class="heading-link"><i class="fas fa-link"></i></a>二、问题：1+2+99+100=？</h2>
      <p>5050<br>普通方法</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i , sum = <span class="number">0</span> ;n = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    sum = sum = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>（<span class="string">"%d"</span>,sum）</span><br><span class="line"><span class="comment">//该算法要运行100次</span></span><br></pre></td></tr></table></div></figure>

<p>优化算法</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i, sum = <span class="number">0</span>;n = <span class="number">100</span>;</span><br><span class="line">sums = (<span class="number">1</span>+n)*n/<span class="number">2</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,sum);</span><br><span class="line"><span class="comment">//该算法要运行1次而已</span></span><br></pre></td></tr></table></div></figure>

<a id="more"></a>


        <h2 id="三、算法的定义"   >
          <a href="#三、算法的定义" class="heading-link"><i class="fas fa-link"></i></a>三、算法的定义</h2>
      <p>算法是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或者多个操作。</p>
<p>通俗的来说，就是做一件事情的技巧与套路。</p>
<p> 一个问题可以由多个算法解决，一个算法也不可能具有通解所有问题的能力。</p>

        <h2 id="四、算法的特性"   >
          <a href="#四、算法的特性" class="heading-link"><i class="fas fa-link"></i></a>四、算法的特性</h2>
      <p> 算法具有五个基本特征</p>
<ol>
<li>输入</li>
<li>输出</li>
<li>有穷性</li>
<li>确定性</li>
<li>可行性</li>
</ol>

        <h3 id="输入"   >
          <a href="#输入" class="heading-link"><i class="fas fa-link"></i></a>输入</h3>
      <p>算法具有零个或多个输入</p>
<blockquote>
<p>尽管对于绝大多数算法来说，输入参数都是必要的。<br>但是有些时候，像打印“hello world“，就不需要啥参数。</p>
</blockquote>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hello world\n"</span>)；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h3 id="输出"   >
          <a href="#输出" class="heading-link"><i class="fas fa-link"></i></a>输出</h3>
      <p>算法至少有一个或多个输出</p>
<blockquote>
<p>算法是也一定要输出的。不需要它输出，那要这个算法来干什么？<br>输出的形式可以是打印形式输出，也可以是返回一个值或多个值等。</p>
</blockquote>

        <h3 id="有穷性"   >
          <a href="#有穷性" class="heading-link"><i class="fas fa-link"></i></a>有穷性</h3>
      <p>指算法在执行有限的步骤之后，自动接收而不会出现无限循环，并且每一个步骤在可接受的时间内完成。</p>
<blockquote>
<p>一个永远都不会结束的算法，没有用</p>
</blockquote>

        <h3 id="确定性"   >
          <a href="#确定性" class="heading-link"><i class="fas fa-link"></i></a>确定性</h3>
      <ul>
<li>算法的每一个步骤都具有确定的含义，不会出现二义性。</li>
<li>算法在一定条件下，只有一条执行路径，相同的输入只能有唯一的输出结果。</li>
<li>算法的每个步骤都应该被精确定义而无歧义。</li>
</ul>

        <h3 id="可行行"   >
          <a href="#可行行" class="heading-link"><i class="fas fa-link"></i></a>可行行</h3>
      <p>算法的每一步都必须是可行的，也就是说，每一步都能够通过执行有限次数完成。</p>

        <h2 id="五、算法设计的要求"   >
          <a href="#五、算法设计的要求" class="heading-link"><i class="fas fa-link"></i></a>五、算法设计的要求</h2>
      
        <h3 id="正确性"   >
          <a href="#正确性" class="heading-link"><i class="fas fa-link"></i></a>正确性</h3>
      <p>算法的正确性是指算法至少应该具有输入、输出和加工处理无歧义性、能正确反映问题的需求，能够得到问题的正确答案。</p>
<p>分为四个层次</p>
<ol>
<li>算法程序没有语法错误。</li>
<li>算法程序对于合法输入能够产生满足要求的输出。</li>
<li>算法程序对于非法输入能够产生满足规格的说明。</li>
<li>算法程序对于故意刁难的测试输入都有满足要求的输出结果。<code>（如：操作系统的缓冲区溢出，把原来的指令覆盖，以达到一些目的)</code></li>
</ol>

        <h3 id="可读性"   >
          <a href="#可读性" class="heading-link"><i class="fas fa-link"></i></a>可读性</h3>
      <p>算法设计另一目是为了便于阅读、理解和交流。</p>
<blockquote>
<p>写代码目的为了让计算机执行，还有就是问了便于他人阅读和日后阅读修改。</p>
</blockquote>

        <h3 id="健状性"   >
          <a href="#健状性" class="heading-link"><i class="fas fa-link"></i></a>健状性</h3>
      <p>当输入数据不合法时，算法也能做出相关处理，而不是产生异常，奔溃或者莫名其妙的结果。</p>

        <h3 id="时间效率高和存储量低"   >
          <a href="#时间效率高和存储量低" class="heading-link"><i class="fas fa-link"></i></a>时间效率高和存储量低</h3>
      <p>好算法要具备时间效率高和存储量低的特点。在设计算法时，要尽量思考这两个方面的问题</p>
]]></content>
      <categories>
        <category>自考专升本</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>【数据结构】7.单链表的创建&amp;&amp;删除操作</title>
    <url>/2020/04/03/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%917.%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%88%9B%E5%BB%BA&amp;&amp;%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[
        <h2 id="一、单链表的整表创建"   >
          <a href="#一、单链表的整表创建" class="heading-link"><i class="fas fa-link"></i></a>一、单链表的整表创建</h2>
      
        <h3 id="1-1-单链表与顺序存储结构的线性表整表创建的区别"   >
          <a href="#1-1-单链表与顺序存储结构的线性表整表创建的区别" class="heading-link"><i class="fas fa-link"></i></a>1.1 单链表与顺序存储结构的线性表整表创建的区别</h3>
      <p>对于顺序存储结构的线性表的整表创建，我们可以用数组的初始化来直观理解。</p>
<p>而单链表和顺序存储结构就不一样了，它不像顺序存储结构数据这么集中，它的数据可以是分散在内存各个角落的，他的增长也是动态的。</p>
<p>对于每个链表来说，它所占空间的大小和位置是不需要预先分配划定的，可以根据系统的情况和实际的需求即时生成。</p>

        <h3 id="1-2-创建单链表的过程"   >
          <a href="#1-2-创建单链表的过程" class="heading-link"><i class="fas fa-link"></i></a>1.2 创建单链表的过程</h3>
      <p>创建单链表的过程是一个动态生成链表的过程，从“空表”的初始状态起，一次建立各元素结点并逐个插入链表。</p>
<a id="more"></a>


        <h3 id="1-3-单链表整表创建的算法思路如下"   >
          <a href="#1-3-单链表整表创建的算法思路如下" class="heading-link"><i class="fas fa-link"></i></a>1.3 单链表整表创建的算法思路如下</h3>
      <ul>
<li>声明一结点p和计数器变量i；</li>
<li>初始化一空链表L；</li>
<li>让L的头结点的指针指向NULL，即建立一个带头结点的单链表；</li>
<li>循环实现后继结点的赋值和插入。</li>
</ul>

        <h3 id="1-4-头插法建立单链表"   >
          <a href="#1-4-头插法建立单链表" class="heading-link"><i class="fas fa-link"></i></a>1.4 头插法建立单链表</h3>
      <p>头插法从一个空表开始，生成新结点，读取数据存放到新结点的数据域中，然后将新结点插入到当前链表的表头上，直到结束为止。</p>
<p>就是把新加进的元素放在表头后的第一个位置：</p>
<ul>
<li>先让新结点next指向头结点之后</li>
<li>然后让表头的next指向新结点</li>
</ul>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//头插法建立单链表例子</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateListtHead</span> <span class="params">(LinkList * L, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkList p;</span><br><span class="line">    <span class="keyword">int</span> i ;</span><br><span class="line">    </span><br><span class="line">    srand(time(<span class="number">0</span>));<span class="comment">//初始化随机数种子</span></span><br><span class="line">    </span><br><span class="line">    *L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    (*L)-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node);<span class="comment">//生成新结点</span></span><br><span class="line">        p -&gt; data = rand()%<span class="number">100</span>+<span class="number">1</span>;</span><br><span class="line">        p -&gt; next = (*L) -&gt; next;</span><br><span class="line">        (*L)-&gt;next = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h3 id="1-5-尾插法建立单链表（考试重点）"   >
          <a href="#1-5-尾插法建立单链表（考试重点）" class="heading-link"><i class="fas fa-link"></i></a>1.5 尾插法建立单链表（考试重点）</h3>
      <p>头插法建立链表虽然算法简单，但生成的链表中结点的次序和输入的顺序相反。</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line">\\尾插法建立单链表</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateListTail</span><span class="params">(LinkList *L, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkList p , t;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line">    *L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    r = *L;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        p -&gt; data = rand()%<span class="number">100</span>+<span class="number">1</span>;</span><br><span class="line">        r -&gt; next = p;</span><br><span class="line">        r = p;</span><br><span class="line">    &#125;</span><br><span class="line">    r -&gt; next  = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">之前的r是*l节点的，</span></span><br><span class="line"><span class="comment">然后把p节点给了r，原来的还是能用*l来访问。</span></span><br><span class="line"><span class="comment">然后r跑到后面一个节点上去了，</span></span><br><span class="line"><span class="comment">然后又给p赋了新值，</span></span><br><span class="line"><span class="comment">然后r-&gt;next又指向下一个p然后循环操作</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></div></figure>


        <h2 id="二、单链表的整表删除"   >
          <a href="#二、单链表的整表删除" class="heading-link"><i class="fas fa-link"></i></a>二、单链表的整表删除</h2>
      
        <h3 id="单链表整表删除的算法思路如下"   >
          <a href="#单链表整表删除的算法思路如下" class="heading-link"><i class="fas fa-link"></i></a>单链表整表删除的算法思路如下:</h3>
      <ul>
<li>声明结点p和q;</li>
<li>将第一个结点赋值给p，下一结点赋值给去；</li>
<li>循环执行释放p和q赋值给p的操作；</li>
</ul>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function">Status <span class="title">ClearList</span><span class="params">(LinkList *L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkList p , q;</span><br><span class="line">    p = (*L) -&gt; next;</span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        q= p -&gt; next;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        p = q;</span><br><span class="line">    &#125;</span><br><span class="line">    (*L) -&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h3 id="2-1-问：能不能不写q，直接在循环体内写free（P）；P-p-next；？"   >
          <a href="#2-1-问：能不能不写q，直接在循环体内写free（P）；P-p-next；？" class="heading-link"><i class="fas fa-link"></i></a>2.1 问：能不能不写q，直接在循环体内写free（P）；P = p-next；？</h3>
      <p>不能，因为p是一个结点，它除了有数据域，还有指针域，当我们做free（p）时候，其实是对它这整个结点进行删除和内存释放的工作。</p>
<p>而整表删除时需要一个个结点删除的。所以就需要q来记载p的p一个结点。</p>

        <h2 id="三、单链表结构与顺序存储结构优缺点"   >
          <a href="#三、单链表结构与顺序存储结构优缺点" class="heading-link"><i class="fas fa-link"></i></a>三、单链表结构与顺序存储结构优缺点</h2>
      <p>可以从存储分配方式、时间性能、空间性能三方面来做对比。</p>
<ul>
<li>存储分配方式<ul>
<li>顺序存储结构用一段连续的存储单元依次存储线性表的数据元素。</li>
<li>单链表采用链式存储结构，用一组任意的存储单元存放线性表的元素。</li>
</ul>
</li>
<li>时间性能<ul>
<li>查找<ul>
<li>顺序存储结构O(1)</li>
<li>单链表O(n)</li>
</ul>
</li>
<li>插入和删除<ul>
<li>顺序存储结构需要平均移动表长一半的元素，时间为O（n）</li>
<li>单链表在计算出某位置的指针后，插入和删除时间仅为O（1）</li>
</ul>
</li>
</ul>
</li>
<li>空间性能<ul>
<li>顺序存储结构需要预分配存储空间，分大了，容易造成空间浪费，分小了。容易发生溢出。</li>
<li>单链表不需要分配存储空间，只要有就可以分配元素个数也不受限制。</li>
</ul>
</li>
</ul>

        <h3 id="3-1-总结"   >
          <a href="#3-1-总结" class="heading-link"><i class="fas fa-link"></i></a>3.1 总结</h3>
      <ul>
<li>若线性表需要频繁查找，很少进行插入和删除操作时，宜采用顺序存储结构。</li>
<li>若需要频繁插入和删除时，宜采用单链表结构。</li>
</ul>
]]></content>
      <categories>
        <category>自考专升本</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>【数据结构】第三章 栈与队列</title>
    <url>/2020/04/03/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[
        <h2 id="学习目的与要求"   >
          <a href="#学习目的与要求" class="heading-link"><i class="fas fa-link"></i></a>学习目的与要求</h2>
      <p>栈和队列的逻辑结构与线性表的逻辑结构相同，可以把栈和队列看作是特殊的线性表，其操作只在表的一端或两端进行。二维数组逻辑结构可以看成是线性结构的推广。</p>

        <h3 id="本章要求"   >
          <a href="#本章要求" class="heading-link"><i class="fas fa-link"></i></a>本章要求</h3>
      <p>本章总的要求是：</p>
<ol>
<li>理解栈和队列的定义、特征及与线性表的异同；</li>
<li>掌握顺序栈和链栈的组织方法和运算实现算法，栈满和栈空的判断条件；</li>
<li>掌握顺序队列和链队列的组织方法和运算实现算法，队列满和队列空的判断条件；</li>
<li>掌握数组的存储方法和特殊的矩阵的压缩存储方法。</li>
</ol>
<a id="more"></a>


        <h2 id="一、栈"   >
          <a href="#一、栈" class="heading-link"><i class="fas fa-link"></i></a>一、栈</h2>
      <p><img src="https://ftp.bmp.ovh/imgs/2020/03/fa2904b45c33ca97.png" alt=""></p>

        <h3 id="1-1-栈的基本概念"   >
          <a href="#1-1-栈的基本概念" class="heading-link"><i class="fas fa-link"></i></a>1.1 栈的基本概念</h3>
      <p>栈（Stack）是运算受限的线性表，这种线性表上的插入和删除运算限定在表的某一端进行。</p>
<p>允许进行插入和删除的一端称为<code>栈顶</code>，另一端称为<code>栈底</code>。不含任何数据元素的栈称为<code>空栈</code>。处于栈顶位置的数据元素称为栈顶元素。</p>
<p>栈具有<code>先进后出，或者后进先出的</code>特征</p>
<blockquote>
<p>例如：在饭店，服务员洗盘子，厨师使用盘子，就类似于栈的元素入栈和出栈的过程。</p>
</blockquote>

        <h3 id="1-2-栈的基本运算"   >
          <a href="#1-2-栈的基本运算" class="heading-link"><i class="fas fa-link"></i></a>1.2 栈的基本运算</h3>
      <ol>
<li>初始化initStack（S）:构造一个空栈S;</li>
<li>判栈空EmptyStack(S):若栈S为空栈，则结果为1，否则结果为0;<code>(不是空为0)</code></li>
<li>进栈Push(S,x):将元素x插入栈S中,使x成为栈S的栈顶元素；</li>
<li>出栈Pop(S):删除栈顶元素；</li>
<li>取栈顶GetTop(S):返回栈顶元素。</li>
</ol>

        <h3 id="1-3-栈的顺序实现"   >
          <a href="#1-3-栈的顺序实现" class="heading-link"><i class="fas fa-link"></i></a>1.3 栈的顺序实现</h3>
      <p>栈的顺序存储结构是用一组连续的存储单元依次存放栈中的每个元素，并用始端作为栈底。用顺序结构实现的栈称为顺序栈。通常用一个一维数组和一个记录栈定位置的变量来实现之。</p>
<p><img src="https://s1.ax1x.com/2020/03/17/8tO3nS.png" alt="8tO3nS.png"></p>

        <h4 id="顺序栈的C语言定义"   >
          <a href="#顺序栈的C语言定义" class="heading-link"><i class="fas fa-link"></i></a>顺序栈的C语言定义</h4>
      
        <h5 id="1-3-1-初始化"   >
          <a href="#1-3-1-初始化" class="heading-link"><i class="fas fa-link"></i></a>1.3.1 初始化</h5>
      <figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">initStack</span><span class="params">(SeqStk * stk)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stk -&gt; top =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h5 id="1-3-2-判断空"   >
          <a href="#1-3-2-判断空" class="heading-link"><i class="fas fa-link"></i></a>1.3.2 判断空</h5>
      <p>int EmptyStack(SeqStk *stk)//若栈为空，则返回值1，否则返回值0</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(stk-&gt; top == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h5 id="1-3-3-进栈"   >
          <a href="#1-3-3-进栈" class="heading-link"><i class="fas fa-link"></i></a>1.3.3 进栈</h5>
      <figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> push（SeqStk * stk，DataType X）</span><br><span class="line">/若栈未满，元素x进栈stk中，否则提示出错信息</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(stk -&gt; top == maxsize <span class="number">-1</span>)<span class="comment">//判断栈是否满</span></span><br><span class="line">    &#123;</span><br><span class="line">        error(<span class="string">"栈已满"</span>)；</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>；</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        stk -&gt; top ++;<span class="comment">//栈未满，top值加1</span></span><br><span class="line">        stk-&gt;data[stk-&gt;top]=x;<span class="comment">//元素x进栈</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h5 id="1-3-4-出栈"   >
          <a href="#1-3-4-出栈" class="heading-link"><i class="fas fa-link"></i></a>1.3.4 出栈</h5>
      <figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function">Int <span class="title">Pop</span><span class="params">(SeqStk * stk)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(EmptyStack(stk)) <span class="comment">//判断是否下溢</span></span><br><span class="line">    &#123;</span><br><span class="line">        error（“下溢”）;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//未下溢,栈顶元素出栈</span></span><br><span class="line">    &#123;</span><br><span class="line">        stk-&gt;top--;<span class="comment">//top值减1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

        <h5 id="1-3-5-取栈顶元素"   >
          <a href="#1-3-5-取栈顶元素" class="heading-link"><i class="fas fa-link"></i></a>1.3.5 取栈顶元素</h5>
      <figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function">DataType <span class="title">GetTop</span><span class="params">(SeqStk *stk)</span></span></span><br><span class="line"><span class="function"><span class="comment">//取栈顶数据元素，栈顶数据元素通过参数返回</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(EmptyStack(stk))<span class="keyword">return</span> NullData;</span><br><span class="line">    <span class="comment">//栈空，返回NULLData</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> stk -&gt; data[stk -&gt; top];</span><br><span class="line">        <span class="comment">//返回栈顶数据元素。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="1-4-栈的链接实现"   >
          <a href="#1-4-栈的链接实现" class="heading-link"><i class="fas fa-link"></i></a>1.4 栈的链接实现</h3>
      <p>栈的链接实现，即用链表作为存储结构实现栈的先进后出的特性，我们成之为链栈。链栈不用预先考虑容量的大小。</p>
<p><img src="https://s1.ax1x.com/2020/03/17/8NpEvR.png" alt="栈的链接实现"></p>

        <h4 id="链栈用C语言定义如下"   >
          <a href="#链栈用C语言定义如下" class="heading-link"><i class="fas fa-link"></i></a>链栈用C语言定义如下</h4>
      <figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line">typeof <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DataType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> * <span class="title">next</span>;</span></span><br><span class="line">&#125;LKstk;</span><br></pre></td></tr></table></div></figure>

        <h5 id="1-4-1-初始化"   >
          <a href="#1-4-1-初始化" class="heading-link"><i class="fas fa-link"></i></a>1.4.1 初始化</h5>
      <figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitStack</span><span class="params">(LkStk *LS)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LS = (LkStk *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LkStk));</span><br><span class="line">    Ls -&gt; next=<span class="literal">NULL</span>;<span class="comment">//建立一个空栈</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//malloc分配空间</span></span><br></pre></td></tr></table></div></figure>

<p>栈初始化时，生成一个结点，将该结点的next域设置为NULL<br><img src="https://s1.ax1x.com/2020/03/17/8NCDun.png" alt="8NCDun.png"></p>

        <h5 id="1-4-2-判栈空"   >
          <a href="#1-4-2-判栈空" class="heading-link"><i class="fas fa-link"></i></a>1.4.2 判栈空</h5>
      <figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EmptyStack</span><span class="params">(LkStk *LS)</span><span class="comment">//若栈为空则返回值1，否则返回值0</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(LS-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h5 id="1-4-3-进栈"   >
          <a href="#1-4-3-进栈" class="heading-link"><i class="fas fa-link"></i></a>1.4.3 进栈</h5>
      <figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push</span><span class="params">(LkStk *LS,DataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LkStk *temp;</span><br><span class="line">    temp=(LkStk *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LkStk));</span><br><span class="line">    <span class="comment">//temp指向申请的新结点</span></span><br><span class="line">        temp -&gt; data = x;</span><br><span class="line">        <span class="comment">//新结点的data域赋值为x</span></span><br><span class="line">        temp -&gt; next = LS -&gt; next;</span><br><span class="line">        <span class="comment">//temp的next域指向原来的栈顶结点</span></span><br><span class="line">        LS -&gt; next = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>在进栈操作算法中，采用前插操作，新增结点始终插入到头结点之后。<br><img src="https://s1.ax1x.com/2020/03/17/8Ni1TP.png" alt="8Ni1TP.png"></p>

        <h5 id="1-4-4-出栈"   >
          <a href="#1-4-4-出栈" class="heading-link"><i class="fas fa-link"></i></a>1.4.4 出栈</h5>
      <figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Pop</span><span class="params">(LkStk *LS)</span></span></span><br><span class="line"><span class="function"><span class="comment">//栈顶数据元素通过参数返回，它的知己后继成为新的栈顶</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LkStk *temp;</span><br><span class="line">    <span class="keyword">if</span>(!EmptyStack(LS))<span class="comment">//判断栈是否为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        temp=LS -&gt; next <span class="comment">//temp指向栈顶结点</span></span><br><span class="line">        LS -&gt; next = temp -&gt; next; </span><br><span class="line">        <span class="comment">//原栈顶的下一个结点成为新的栈顶</span></span><br><span class="line">        <span class="built_in">free</span>(temp);<span class="comment">//释放原栈顶结点空间</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>；</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>出栈操作始终是栈顶结点出栈，即删除头结点之后的结点<br><a href="https://imgchr.com/i/8Nk5RO" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/03/17/8Nk5RO.png" alt="8Nk5RO.png"></a></p>
<p><img src="https://s1.ax1x.com/2020/03/17/8NAVYV.png" alt="8NAVYV.png"></p>
<p>上图描述如下</p>
<ul>
<li>a) 初始化（空栈）</li>
<li>b）A进栈后</li>
<li>c）B进栈后</li>
<li>d）B出栈后</li>
<li>e) C进栈后</li>
<li>f) C出栈后</li>
<li>g） A出栈后</li>
</ul>

        <h3 id="1-5-栈的简单应用和递归"   >
          <a href="#1-5-栈的简单应用和递归" class="heading-link"><i class="fas fa-link"></i></a>1.5 栈的简单应用和递归</h3>
      <p>递归是一种重要的程序设计方法，简单地说，如果在一个函数或数据结构的定义中有应用了它自身，那么这个函数或数据结构称为递归定义的。常应用在函数的递归调用，表现为函数自调。</p>
<p>任何递归必须同时满足如下两个条件</p>
<ol>
<li>被定义项在定义中的应用（即作为定义项的出现）具有更小的“规模”。</li>
<li>被定义项在最小“规模”上的定义是递归的，这是递归的结束条件。</li>
</ol>
<p>递归分为三部分</p>
<ol>
<li>递归前进段</li>
<li>递归边界条件</li>
<li>递归回归段</li>
</ol>
<p>例如：阶乘函数可递归定义如下<br>n! = <code>n*(n-1)*(n-2)*...*2*1</code></p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line">n!=&#123; <span class="number">1</span>          n=<span class="number">0</span></span><br><span class="line">   &#123; n* (n<span class="number">-1</span>)!  n&gt;<span class="number">0</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//代码实现：</span></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"><span class="keyword">long</span> f(<span class="keyword">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> n*f(n<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> m,n=<span class="number">3</span>;</span><br><span class="line">    m = f(n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d!=%d\n"</span>,n,m)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p>递归函数的运行引起递归调用。为了保证在不同层次的递归调用能正确地返回，必须将每一次递归调用的参数和返回地址保存起来。由于函数的递归调用是后进先出的，所以要用栈来保存这些值。</p>

        <h3 id="1-6【经典案例】斐波那契数列"   >
          <a href="#1-6【经典案例】斐波那契数列" class="heading-link"><i class="fas fa-link"></i></a>1.6【经典案例】斐波那契数列</h3>
      <p>斐波那契数列指的是这样一个数列1，1，2，3，5，8，13，21，34，55，89，144，233，377，610，987…..这个数列从第3项开始，每一项都等于前两项之后。请输入一个正整数n（0&lt;n&lt;20），输出斐波那契数列第n项的值。</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>||n==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> fun(n<span class="number">-1</span>)+fun(n<span class="number">-2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入一个正整数（1~20）："</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fun(n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="1-7-考核的知识点与考核要求"   >
          <a href="#1-7-考核的知识点与考核要求" class="heading-link"><i class="fas fa-link"></i></a>1.7 考核的知识点与考核要求</h3>
      <ul>
<li>识记:<ul>
<li>栈的概念；</li>
<li>栈的后进先出特征；</li>
<li>栈的基本运算</li>
</ul>
</li>
<li>领会:<ul>
<li>栈顶与栈底；</li>
<li>顺序栈的组织方法及其类C语言描述；</li>
<li>顺序栈栈满和栈空的条件</li>
<li>链栈的组织方法及其类C语言描述</li>
<li>链栈为空的条件</li>
</ul>
</li>
<li>简单应用<ul>
<li>采用顺序存储的链接存储实现栈的基本运算的算法</li>
</ul>
</li>
<li>综合应用：<ul>
<li>用栈解决简单问题。</li>
</ul>
</li>
</ul>

        <h2 id="二、-队列"   >
          <a href="#二、-队列" class="heading-link"><i class="fas fa-link"></i></a>二、 队列</h2>
      <p><img src="https://i.loli.net/2020/03/20/pyMmEgzJxtVLrh4.png" alt="数据结构-队列-脑图-min.png"></p>

        <h3 id="2-1-队列的基本概念"   >
          <a href="#2-1-队列的基本概念" class="heading-link"><i class="fas fa-link"></i></a>2.1 队列的基本概念</h3>
      <p>队列（Queue）是有限个同类型数据元素的线性序列，是一种先进先出（First In First Out）的线性表，新加入的数据元素插在队列尾端，出队列的数据元素在队列首部被删除。</p>
<p><img src="https://s1.ax1x.com/2020/03/18/8d59Og.png" alt="8d59Og.png"></p>

        <h3 id="2-2-队列的基本运算"   >
          <a href="#2-2-队列的基本运算" class="heading-link"><i class="fas fa-link"></i></a>2.2 队列的基本运算</h3>
      <ol>
<li>队列初始化initQueue(Q):设置一个空队列Q</li>
<li>判队列空EmptyQueue(Q):若队列Q为空，则返回值为1，否则返回值为0；</li>
<li>入队列EnQueue(Qx):将数据元素x从队尾一端插入队列，使其成为队列的新尾元素</li>
<li>出队列OutQueue(Q)：删除队列首元素</li>
<li>取队列首元素GetHead(Q):返回队列首元素的值。</li>
</ol>

        <h3 id="2-3-队列的顺序实现"   >
          <a href="#2-3-队列的顺序实现" class="heading-link"><i class="fas fa-link"></i></a>2.3 队列的顺序实现</h3>
      <p>顺序存储实现的队列称为顺序队列，它由一个一维数组（用于存储队列中元素）及两个分别指示队列首和队列尾元素的变量组成，这两个变量分别称为“队首指针”和“队尾指针”。</p>

        <h4 id="2-3-1-用类C语言定义顺序队列类型如下"   >
          <a href="#2-3-1-用类C语言定义顺序队列类型如下" class="heading-link"><i class="fas fa-link"></i></a>2.3.1 用类C语言定义顺序队列类型如下</h4>
      <figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxsize =<span class="number">20</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">seqqueue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DataType data[maxsize];</span><br><span class="line">    Int front,rear</span><br><span class="line">&#125;SeqQue</span><br><span class="line">SeqQue SQ</span><br></pre></td></tr></table></div></figure>

<p><img src="https://s1.ax1x.com/2020/03/18/8dIADe.png" alt="8dIADe.png"></p>

        <h4 id="2-3-2-顺序队列操作的几种状态"   >
          <a href="#2-3-2-顺序队列操作的几种状态" class="heading-link"><i class="fas fa-link"></i></a>2.3.2 顺序队列操作的几种状态</h4>
      <p><img src="https://s1.ax1x.com/2020/03/18/8dIrb4.png" alt="8dIrb4.png"></p>
<ul>
<li>a为空队列，SQ.rear为0，SQ.front为0.</li>
<li>b为20入队列后，SQ.rear为1,SQ.front为0</li>
<li>c为30，40，50依次入队列后，SQ.rear为4，SQ.front为0</li>
<li>d为20，30，40，50依次出队列后，SQ.rear为4，SQ.rear为4，SQ.front为4。</li>
<li>e为60入队列后，SQ.rear为5，SQ.front为4</li>
</ul>

        <h3 id="2-4-循环队列"   >
          <a href="#2-4-循环队列" class="heading-link"><i class="fas fa-link"></i></a>2.4 循环队列</h3>
      <p>为了解决“假溢出”现象，可以将存储队列元素的一维数组首尾相接，形成一个环状，这样的队列称为循环队列。</p>
<p><img src="https://s1.ax1x.com/2020/03/18/8dTt10.png" alt="8dTt10.png"></p>
<p>当SQ.rear = maxsize-1时，只要数组的低下标端有空闲空间，仍可进行入队列运算。此时只需要SQ.rear = 0,即把SQ.data[0]作为新的队列尾，并将入队的元素置入此单元中。这样就解决了“假溢出”问题。</p>

        <h4 id="2-4-1-循环队列队满与队空"   >
          <a href="#2-4-1-循环队列队满与队空" class="heading-link"><i class="fas fa-link"></i></a>2.4.1 循环队列队满与队空</h4>
      <ul>
<li>循环队列队满条件：（（CQ.rear + 1）%maxsize==CQ.front）</li>
<li>循环队列队空条件：（CQ.rear==CQ.front）</li>
</ul>
<p><img src="https://i.loli.net/2020/03/19/gRNlEB9DvdXyjzC.png" alt="数据结构-队列-循环队列-队列满与队列空-min.png"></p>

        <h4 id="2-4-2-循环队列的基本运算包含"   >
          <a href="#2-4-2-循环队列的基本运算包含" class="heading-link"><i class="fas fa-link"></i></a>2.4.2 循环队列的基本运算包含</h4>
      
        <h5 id="队列的初始化"   >
          <a href="#队列的初始化" class="heading-link"><i class="fas fa-link"></i></a>队列的初始化</h5>
      <figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitQueue</span><span class="params">(CycQue CQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CQ.front = <span class="number">0</span>;</span><br><span class="line">    CQ.rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h5 id="判队空"   >
          <a href="#判队空" class="heading-link"><i class="fas fa-link"></i></a>判队空</h5>
      <figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EmptyQueue</span><span class="params">(CycQue CQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(CQ.rear==CQ.front)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;       <span class="comment">//队列为空，返回1</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;       <span class="comment">//队列不为空，返回0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h5 id="入队列"   >
          <a href="#入队列" class="heading-link"><i class="fas fa-link"></i></a>入队列</h5>
      <figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EnQueue</span><span class="params">(CycQue CQ,DataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//队列满，入队失败</span></span><br><span class="line"><span class="keyword">if</span>((CQ.rear+<span class="number">1</span>)%maxsize == CQ.front)</span><br><span class="line">&#123;</span><br><span class="line">    error(<span class="string">"队列满"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>；</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    CQ.rear = (CQ.rear+<span class="number">1</span>)%maxsize;</span><br><span class="line">    CQ.data[CQ.rear]=x;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//入队成功    </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h5 id="出队列"   >
          <a href="#出队列" class="heading-link"><i class="fas fa-link"></i></a>出队列</h5>
      <figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QutQueue</span><span class="params">(CycQue CQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(EmptyQueue(CQ))<span class="comment">//判断队列是否为空</span></span><br><span class="line">    &#123;</span><br><span class="line">    error(<span class="string">"队列空"</span>)<span class="comment">//队列为空，出队失败</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>；</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">    CQ.front = (CQ.front+<span class="number">1</span>)%maxsize;</span><br><span class="line">    <span class="comment">//不为空，出队列</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> ;<span class="comment">//出队成功</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h5 id="取队列首元素"   >
          <a href="#取队列首元素" class="heading-link"><i class="fas fa-link"></i></a>取队列首元素</h5>
      <figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function">Data Type <span class="title">GetHead</span><span class="params">(CycQue CQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(EmptyQueue(CQ)) <span class="comment">//判断队列是否为空</span></span><br><span class="line">        <span class="keyword">return</span> NullData ; <span class="comment">//队列为空，返回空数据标志</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> CQ.data[(CQ.front+<span class="number">1</span>)%maxsize];</span><br></pre></td></tr></table></div></figure>


        <h5 id="循环队列操作"   >
          <a href="#循环队列操作" class="heading-link"><i class="fas fa-link"></i></a>循环队列操作</h5>
      <p><img src="https://i.loli.net/2020/03/19/cLYpvgrMwB7fERH.png" alt="数据结构-循环队列-操作"></p>

        <h3 id="2-5-队列的链接实现"   >
          <a href="#2-5-队列的链接实现" class="heading-link"><i class="fas fa-link"></i></a>2.5 队列的链接实现</h3>
      <p>使用一个带有头结点的单链表来表示队列，称为链队列。</p>
<p><img src="https://i.loli.net/2020/03/20/ef25TkiYMPvhmR7.png" alt="数据结构-队列-链接实现-min.png"></p>

        <h4 id="2-5-1-链接队列用类C语言描述类型定义如下"   >
          <a href="#2-5-1-链接队列用类C语言描述类型定义如下" class="heading-link"><i class="fas fa-link"></i></a>2.5.1 链接队列用类C语言描述类型定义如下</h4>
      <figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkQueueNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DataType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LinkQueueNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LkQueNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LkQueue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    LkQueNode *front , *rear;</span><br><span class="line">&#125;LkQue;</span><br><span class="line">LkQue LQ;</span><br></pre></td></tr></table></div></figure>


        <h4 id="2-5-2-链队列的队空和队满"   >
          <a href="#2-5-2-链队列的队空和队满" class="heading-link"><i class="fas fa-link"></i></a>2.5.2 链队列的队空和队满</h4>
      <p>队满:由于链接实现需要动态申请空间，故链队列在一定范围内不会出现队列满的情况。</p>
<p>队空:LQ.front == LQ.rear</p>

        <h4 id="2-5-3-链队列的基本运算"   >
          <a href="#2-5-3-链队列的基本运算" class="heading-link"><i class="fas fa-link"></i></a>2.5.3 链队列的基本运算</h4>
      <ol>
<li>队列的初始化</li>
<li>判队列空</li>
<li>入队列</li>
<li>出队列</li>
<li>取队列首元素</li>
</ol>

        <h5 id="队列的初始化-1"   >
          <a href="#队列的初始化-1" class="heading-link"><i class="fas fa-link"></i></a>队列的初始化</h5>
      <figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitQueue</span><span class="params">(LkQue *LQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LkQueNode *temp;</span><br><span class="line">    temp=(LkQueNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LkQueNode));<span class="comment">//生成队列的头结点</span></span><br><span class="line">    LQ-&gt;front = temp;<span class="comment">//队列头指针指向队列头结点</span></span><br><span class="line">    LQ-&gt;rear=temp;<span class="comment">//对列尾指针指向队列尾结点</span></span><br><span class="line">    (LQ-&gt;front)-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p><img src="https://i.loli.net/2020/03/20/V9rpKHFtAxNe8hS.png" alt="数据结构-队列-链队列的初始化-min.png"></p>

        <h5 id="判队列空"   >
          <a href="#判队列空" class="heading-link"><i class="fas fa-link"></i></a>判队列空</h5>
      <figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EmptyQueue</span><span class="params">(LkQue LQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(LQ.rear == LQ.front)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;   <span class="comment">//队列为空</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>


        <h5 id="入队列-1"   >
          <a href="#入队列-1" class="heading-link"><i class="fas fa-link"></i></a>入队列</h5>
      <figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EnQueue</span><span class="params">(LkQue *LQ,DataType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LkQueNode *temp;</span><br><span class="line">    temp = (LkQueNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LkQueNode));</span><br><span class="line">    temp -&gt; data =x;</span><br><span class="line">    temp -&gt; next =<span class="literal">NULL</span>;</span><br><span class="line">    (LQ-&gt;rear)-&gt;next=temp;<span class="comment">//新结点入队列</span></span><br><span class="line">    LQ-&gt;rear=temp;<span class="comment">//置新的队列尾结点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p><img src="https://i.loli.net/2020/03/20/4lIECOoPZJjV5mr.png" alt="数据结构-链队列-入队列操作-min.png"></p>

        <h5 id="出队列-1"   >
          <a href="#出队列-1" class="heading-link"><i class="fas fa-link"></i></a>出队列</h5>
      <figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line">OutQueue(LkQue *LQ)</span><br><span class="line">&#123;</span><br><span class="line">    LkQueNode *temp;</span><br><span class="line">    <span class="keyword">if</span>(EmptyQueue(CQ))<span class="comment">//判队列是否为空</span></span><br><span class="line">    &#123;</span><br><span class="line">        error（<span class="string">"队空"</span>） <span class="comment">//队列为空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//队列非空</span></span><br><span class="line">    &#123;</span><br><span class="line">        temp = (LQ-&gt;front)-&gt;next;<span class="comment">//使temp指向队列的首结点</span></span><br><span class="line">        （LQ-&gt;front）-&gt;next = temp-&gt;next;<span class="comment">//修改头结点的指针域指向新的首结点</span></span><br><span class="line">        <span class="keyword">if</span>(temp-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">            LQ-&gt;rear=LQ-&gt;front;<span class="comment">//无首结点时，front和rear都指向头结点</span></span><br><span class="line">        <span class="built_in">free</span>（temp）;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>

<p><img src="https://i.loli.net/2020/03/20/JyBXZfh5DOCb1wi.png" alt="数据结构-链队列-出队列-min.png"></p>

        <h5 id="取队首元素"   >
          <a href="#取队首元素" class="heading-link"><i class="fas fa-link"></i></a>取队首元素</h5>
      <figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function">DataType <span class="title">GetHead</span><span class="params">(LkQue LQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LkQueNode *temp;</span><br><span class="line">    <span class="keyword">if</span>(EmptyQueue(CQ))</span><br><span class="line">        <span class="keyword">return</span> NULLData<span class="comment">//判队列为空，返回空数据标志</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        temp = LQ.front -&gt;next;</span><br><span class="line">        <span class="keyword">return</span> temp -&gt; data</span><br><span class="line">        <span class="comment">//队列非空，返回队列首结点元素</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h3 id="2-6-队列考核的知识点与考核要求"   >
          <a href="#2-6-队列考核的知识点与考核要求" class="heading-link"><i class="fas fa-link"></i></a>2.6 队列考核的知识点与考核要求</h3>
      <ul>
<li>识记:<ul>
<li>队列的概念</li>
<li>队列的先进先出基本特征；</li>
<li>队列的基本运算；</li>
<li>循序队列</li>
</ul>
</li>
<li>领会:<ul>
<li>队列头和队列尾；</li>
<li>顺序队列的组织方法及其C语言描述</li>
<li>顺序队列满的队列空的条件</li>
<li>循序队列的组织方法；</li>
<li>循环队列的队列满和队列空的条件</li>
<li>链队列的组织方法及其类C语言描述</li>
<li>链队列为空的条件</li>
</ul>
</li>
<li>简单应用<ul>
<li>用数组实现循序队列的基本运算；</li>
<li>用链表实现队列的基本运算</li>
</ul>
</li>
<li>综合应用<ul>
<li>设计用队列解决简单问题的算法。</li>
</ul>
</li>
</ul>

        <h2 id="三、数组"   >
          <a href="#三、数组" class="heading-link"><i class="fas fa-link"></i></a>三、数组</h2>
      
        <h3 id="3-1-基本概念"   >
          <a href="#3-1-基本概念" class="heading-link"><i class="fas fa-link"></i></a>3.1 基本概念</h3>
      
        <h4 id="3-1-1-数组定义"   >
          <a href="#3-1-1-数组定义" class="heading-link"><i class="fas fa-link"></i></a>3.1.1 数组定义</h4>
      <p>数组，它由一组具有相同类型的数据元素组成，并存储在一组连续的存储单元中。</p>

        <h4 id="3-1-2-二维数组定义"   >
          <a href="#3-1-2-二维数组定义" class="heading-link"><i class="fas fa-link"></i></a>3.1.2 二维数组定义</h4>
      <p>二维数组可以看成一个一维数组的每一个元素又是一维数组。</p>
<p>以此类推，如果一维数组的每一个元素又是一个二维数组，则组成的一个三维数组。</p>
<p>对于一个m*n的二维数组，它可看成是由m个行向量或者n个列向量组成的线性表。</p>

        <h4 id="3-1-3-二维数组表示方法"   >
          <a href="#3-1-3-二维数组表示方法" class="heading-link"><i class="fas fa-link"></i></a>3.1.3 二维数组表示方法</h4>
      
        <h5 id="二维数组表示方法-列向量"   >
          <a href="#二维数组表示方法-列向量" class="heading-link"><i class="fas fa-link"></i></a>二维数组表示方法-列向量</h5>
      <p>二维数组看成是n个列向量组成的线性表，它可以表示成a1=(α0,α1,…α(n-1))</p>
<p><img src="https://i.loli.net/2020/03/20/V7NyCPfB9Y3cA5l.png" alt="数据结构-数组-二维数组-表示方法-min.png"></p>

        <h5 id="二维数组表示方法-行向量"   >
          <a href="#二维数组表示方法-行向量" class="heading-link"><i class="fas fa-link"></i></a>二维数组表示方法-行向量</h5>
      <p>二维数组看成是m个行向量组成的线性表，它可以表示成a^m = (β0,β1,…β(m-1))</p>
<p><img src="https://i.loli.net/2020/03/20/rqVeGDCbpwmOA8o.png" alt="数据结构-数组-二维数组表示方法-行向量-min.png"></p>

        <h4 id="3-1-4-数组的基本运算"   >
          <a href="#3-1-4-数组的基本运算" class="heading-link"><i class="fas fa-link"></i></a>3.1.4 数组的基本运算</h4>
      <p>数组通常只有两种基本运算</p>
<ul>
<li>读: 给定一组下标，返回该位置的元素内容；</li>
<li>写: 给定一组下标，修改该位置的元素内容</li>
</ul>

        <h3 id="3-2-数据的存储结构"   >
          <a href="#3-2-数据的存储结构" class="heading-link"><i class="fas fa-link"></i></a>3.2 数据的存储结构</h3>
      <p>一维数组的内存单元地址是连续的，二维数组有两种存储方法:以列序为主序存储，以行序为主序存储，<code>通常采用行序存储</code> 。</p>

        <h4 id="3-2-1-矩阵的压缩存储"   >
          <a href="#3-2-1-矩阵的压缩存储" class="heading-link"><i class="fas fa-link"></i></a>3.2.1 矩阵的压缩存储</h4>
      <p>矩阵是很多科学计算问题研究的对象，矩阵可以用二维数组来表示。<br>为了节省存储空间，对这类矩阵采用<code>多个值相同的元素</code>只分配一个存储空间，<code>零元素不存储的策略</code>，这一方法称为矩阵的压缩存储。</p>

        <h5 id="特殊矩阵"   >
          <a href="#特殊矩阵" class="heading-link"><i class="fas fa-link"></i></a>特殊矩阵</h5>
      
        <h6 id="a-对称矩阵"   >
          <a href="#a-对称矩阵" class="heading-link"><i class="fas fa-link"></i></a>a.对称矩阵</h6>
      <p>若一个n阶方阵A中的元素满足下述条件: a∨（ij） = a∨（ji）i&gt;=0,j&lt;=n-1</p>
<p>对称矩阵有近一半的元素可以通过其对称元素获得，为每一对对称元素只分配一个存储单元，则可将n^2 个元素压缩存储到含有n（n+1）/2个元素的一维数组中。我们以行为主序存储其下三角（包括对角线）中的元素。</p>
<p><img src="https://i.loli.net/2020/03/20/LlxQj6Ki2ynO3z4.png" alt="数据结构-数组-对称矩阵-min.png"></p>

        <h6 id="b-三角矩阵"   >
          <a href="#b-三角矩阵" class="heading-link"><i class="fas fa-link"></i></a>b.三角矩阵</h6>
      <p>三角矩阵。以主对角线为界的上（下）半部分是一个固定的值C或零，这样的矩阵叫做下（上）三角矩阵。</p>
<p><img src="https://i.loli.net/2020/03/20/iRJwQdV9XUDtkTh.png" alt="数据结构-数组-三角矩阵-min.png"></p>

        <h5 id="特殊矩阵-1"   >
          <a href="#特殊矩阵-1" class="heading-link"><i class="fas fa-link"></i></a>特殊矩阵</h5>
      
        <h6 id="a-稀疏矩阵"   >
          <a href="#a-稀疏矩阵" class="heading-link"><i class="fas fa-link"></i></a>a.稀疏矩阵</h6>
      <p>假设m行n列的矩阵有t个非零元素，当t&lt;&lt;m*n时,则称矩阵为稀疏矩阵。</p>
<p><img src="https://i.loli.net/2020/03/20/fqW8YNCGPiS1lL3.png" alt="数据结构-数组-特殊矩阵-min.png"></p>
<p>稀疏矩阵压缩存储的三元组表示法:需要用三个项来表示稀疏矩阵中的非零元素a∨（ij）,即（i,j,a∨（ij)）。</p>
<p><img src="https://i.loli.net/2020/03/20/JnokFNCqlOT5M9f.png" alt="数据结构-数组-稀疏矩阵01-min.png"></p>
<p><img src="https://i.loli.net/2020/03/20/pSyb69qanvOV3uR.png" alt="数据结构-数组-稀疏矩阵02-min.png"></p>

        <h3 id="3-3-数组考核的知识点与考核要求"   >
          <a href="#3-3-数组考核的知识点与考核要求" class="heading-link"><i class="fas fa-link"></i></a>3.3 数组考核的知识点与考核要求</h3>
      <ul>
<li>识记:<ul>
<li>一维、二维数组的逻辑结构及其顺序存储方法。</li>
</ul>
</li>
<li>领会:<ul>
<li>顺序存储的一维数组、二维数组的地址计算；</li>
<li>特殊矩阵（三角矩阵、对称矩阵）的概念</li>
</ul>
</li>
<li>简单应用:<ul>
<li>用一维数组存储特殊矩阵的压缩存储方法；</li>
<li>给定特殊矩阵中某个元素的为主（i，j）；</li>
<li>计算该元素在一维数组中的位置k。</li>
</ul>
</li>
</ul>

        <h2 id="四、本章重点、难点"   >
          <a href="#四、本章重点、难点" class="heading-link"><i class="fas fa-link"></i></a>四、本章重点、难点</h2>
      
        <h3 id="重点"   >
          <a href="#重点" class="heading-link"><i class="fas fa-link"></i></a>重点</h3>
      <ul>
<li>栈和队列的特征；</li>
<li>顺序栈和链栈上基本运算的实现和简单算法；</li>
<li>顺序队列和链队列上基本运算的实现和简单算法</li>
</ul>

        <h3 id="难点"   >
          <a href="#难点" class="heading-link"><i class="fas fa-link"></i></a>难点</h3>
      <ul>
<li>循环队列的组织，队列满和队列空的条件及循环队列基本运算的算法。 </li>
</ul>
]]></content>
      <categories>
        <category>自考专升本</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>【数据结构】第四章 树</title>
    <url>/2020/04/03/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E6%A0%91/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/03/25/xlMsdZEH2jFo8UQ.png" alt="数据结构-第四章树-脑图-min.png"></p>

        <h2 id="学习目的与要求"   >
          <a href="#学习目的与要求" class="heading-link"><i class="fas fa-link"></i></a>学习目的与要求</h2>
      <p>树形结构用于表示具有分支和层次结构，有着广泛的应用背景。数和二叉树是重要的树形结构。</p>

        <h3 id="本章总的要求"   >
          <a href="#本章总的要求" class="heading-link"><i class="fas fa-link"></i></a>本章总的要求</h3>
      <ul>
<li>理解树形结构的基本概念和术语；</li>
<li>深刻领会二叉树的定义及其存储结构，理解二叉树的遍历的概念并掌握二叉树的遍历算法；</li>
<li>掌握树和森林的定义、树的存储结构以及树、森林与二叉树之间的相互转换方法；</li>
<li>熟练掌握构造哈夫曼树和设计哈夫曼编码的方法。</li>
</ul>
<a id="more"></a>


        <h2 id="一、树的基本概念"   >
          <a href="#一、树的基本概念" class="heading-link"><i class="fas fa-link"></i></a>一、树的基本概念</h2>
      
        <h3 id="1-1-树的概念"   >
          <a href="#1-1-树的概念" class="heading-link"><i class="fas fa-link"></i></a>1.1 树的概念</h3>
      <p>线性结构中的一个结点至多只有一个直接后继，而树形结构中一个结点可以有一个或多个直接后继。</p>

        <h3 id="1-2-树的定义"   >
          <a href="#1-2-树的定义" class="heading-link"><i class="fas fa-link"></i></a>1.2 树的定义</h3>
      <p>树（Tree）是一类重要的数据结构，其定义如下：</p>
<p>树的n（n&gt;=0）个结点的有限集合，一颗树满足以下两个条件</p>
<ul>
<li>当n=0时,称为空树；</li>
<li>当n&gt;0时，有且仅有一个称为根的结点，除根结点外其他结点分为m（m&gt;=0）个互不相交的非空集合T<sub>1</sub>,T<sub>2</sub>,…,T<sub>m</sub>,这些集合中的每一个都是一棵树，称为根的子树。</li>
</ul>

        <h3 id="1-3-树的相关术语"   >
          <a href="#1-3-树的相关术语" class="heading-link"><i class="fas fa-link"></i></a>1.3 树的相关术语</h3>
      
        <h4 id="结点的度"   >
          <a href="#结点的度" class="heading-link"><i class="fas fa-link"></i></a>结点的度</h4>
      <p>树上的任一结点所拥有的子树的数目称为该结点的度。</p>

        <h4 id="叶子："   >
          <a href="#叶子：" class="heading-link"><i class="fas fa-link"></i></a>叶子：</h4>
      <p>度为0的结点称为叶子或终端结点。</p>

        <h4 id="树的度："   >
          <a href="#树的度：" class="heading-link"><i class="fas fa-link"></i></a>树的度：</h4>
      <p>一棵树中所有结点的度的最大值称为该树的度。</p>
<p>一个结点的子树的根称为该结点的孩子（或称子节点）。相应地该结点称为孩子的双亲（也称父节点）</p>

        <h4 id="结点的层次："   >
          <a href="#结点的层次：" class="heading-link"><i class="fas fa-link"></i></a>结点的层次：</h4>
      <p>从根开始算起，根的层次为1，其余结点的层次为其双亲的层次加1。</p>

        <h4 id="树的高度"   >
          <a href="#树的高度" class="heading-link"><i class="fas fa-link"></i></a>树的高度</h4>
      <p>一棵树中的所有结点层次树的最大值称为该树的高度或深度。</p>

        <h4 id="有序树："   >
          <a href="#有序树：" class="heading-link"><i class="fas fa-link"></i></a>有序树：</h4>
      <p>若树中各结点的子树从左到右是有次序的。不能互换，称为有序树。有序树中最左子树的根称为第1个孩子，左边第i个子树的根称为第i个孩子。</p>

        <h4 id="无序树："   >
          <a href="#无序树：" class="heading-link"><i class="fas fa-link"></i></a>无序树：</h4>
      <p>若树中各结点的子树是无次序的，可以互换，则称为无序树。</p>

        <h3 id="1-4-树的基本运算有"   >
          <a href="#1-4-树的基本运算有" class="heading-link"><i class="fas fa-link"></i></a>1.4 树的基本运算有</h3>
      <ul>
<li>求根</li>
<li>求双亲</li>
<li>求孩子</li>
<li>建树</li>
<li>剪枝</li>
<li>遍历</li>
</ul>

        <h2 id="二、二叉树的基本概念"   >
          <a href="#二、二叉树的基本概念" class="heading-link"><i class="fas fa-link"></i></a>二、二叉树的基本概念</h2>
      <p>二叉树（Binary Tree）是n（n&gt;=0）个元素的有限集合，该集合或者为空，或者由一个根及两棵<code>互不相交</code>的左子树和右子树组成，其中左子树和右子树也均为二叉树。</p>
<p>二叉树的任一结点都有两棵子树（它们中任何一个都可以是空子树）,并且这两棵子树之间有次序关系。 </p>

        <h3 id="2-1-二叉树的基本运算"   >
          <a href="#2-1-二叉树的基本运算" class="heading-link"><i class="fas fa-link"></i></a>2.1 二叉树的基本运算</h3>
      <ul>
<li>初始化<code>(建立一个空二叉树)</code></li>
<li>求双亲</li>
<li>求左孩子</li>
<li>建立二叉树</li>
<li>先序遍历</li>
<li>中序遍历</li>
<li>后序遍历</li>
<li>层序遍历</li>
</ul>

        <h3 id="2-2-二叉树的性质"   >
          <a href="#2-2-二叉树的性质" class="heading-link"><i class="fas fa-link"></i></a>2.2 二叉树的性质</h3>
      <p><code>性质1</code>:二叉树第i(i&gt;=1)层上至多有2^i-1个结点。<br><code>性质2</code>:深度为k(k&gt;=1)的二叉树至多有2^k-1个结点。<br><code>性质3</code>:对任何一棵二叉树，若度数为0的结点(叶结点)个数为n<sub>0</sub>,度数为2的结点个数为n<sub>2</sub>，则n<sub>0</sub>=n<sub>2</sub>+1。</p>
<p><code>满二叉树</code>:深度为k(k&gt;=1)且有2^k -1个结点的二叉树称为满二叉树。</p>
<p><code>完全二叉树</code>:如果对满二叉树按从上到下，从左到右的顺序编号，并在最下一层删去部分结点（删去最后一层仍有结点）,如果删除的这些结点的编号是连续的且删除的结点中含有最大编号的结点，那么这棵二叉树就是完全二叉树。</p>
<p>对于完全二叉树，还有以下两个重要性质:<br><code>性质4</code>:含有n个结点的完全二叉树的深度为[log2^n]+1。<br><code>性质5</code>:如果将一棵有n个结点的完全二叉树按层编号，按层编号是指:将一棵二叉树中的所有n个结点按从第一层到最大层，每层从左到右的顺序依次标记为1,2…n。则对任一编号为i(1&lt;=i&lt;=n)的结点A有:<br>    * 若i=1，则结点A是根；若i&gt;1,则A的双亲Parent(A)的编号为[i/2];<br>    *  若2<code>*</code>i&gt;n，则结点A即无左孩子，也无右孩子；否则A的左孩子Lchild(X)的编号为2<code>*</code>i;<br>    *  若2<code>*</code>i+1&gt;n,则结点A无右孩子；否则，A的右孩子Rchild(A)的编号为2<code>*</code>i+1。</p>

        <h3 id="2-3-二叉树的存储结构"   >
          <a href="#2-3-二叉树的存储结构" class="heading-link"><i class="fas fa-link"></i></a>2.3 二叉树的存储结构</h3>
      <p><code>二叉树通常有两类存储结构:顺序存储结构和链式存储结构</code></p>

        <h3 id="2-3-1-二叉树的顺序存储结构"   >
          <a href="#2-3-1-二叉树的顺序存储结构" class="heading-link"><i class="fas fa-link"></i></a>2.3.1 二叉树的顺序存储结构</h3>
      <p>二叉树的顺序存储结构可以用一维数组来实现，二叉树上的结点按某种次序分别存入该数组的各个单元。  </p>
<p><img src="https://i.loli.net/2020/03/22/ZJyXxA6ets5rg9j.png" alt="数据结构-树-完全二叉树的顺序存储-min.png"></p>
<p><img src="https://i.loli.net/2020/03/22/bZTX6Lhowysmda4.png" alt="数据结构-树-非完全二叉树的顺序实现-min.png"></p>

        <h3 id="2-3-2-二叉树的链式存储结构"   >
          <a href="#2-3-2-二叉树的链式存储结构" class="heading-link"><i class="fas fa-link"></i></a>2.3.2 二叉树的链式存储结构</h3>
      <p>二叉树有不同的链式存储结构，其中最常用的是二叉链表与三叉链表。</p>
<p><img src="https://i.loli.net/2020/03/22/SjrYNGKsJ3fXkD1.png" alt="数据结构-树-二叉树的链式存储结构-min.png"> </p>

        <h4 id="二叉链表的类型定义如下"   >
          <a href="#二叉链表的类型定义如下" class="heading-link"><i class="fas fa-link"></i></a>二叉链表的类型定义如下</h4>
      <figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">btnode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DataType data;</span><br><span class="line">    <span class="comment">//指向左右孩子的指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">btnode</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span></span><br><span class="line">&#125;*BinTree;</span><br></pre></td></tr></table></div></figure>


        <h4 id="三叉链表的类型定义如下"   >
          <a href="#三叉链表的类型定义如下" class="heading-link"><i class="fas fa-link"></i></a>三叉链表的类型定义如下</h4>
      <figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ttnode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    datatype data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ttnode</span> *<span class="title">lchild</span>, *<span class="title">parent</span>, *<span class="title">rchild</span>;</span></span><br><span class="line">&#125;*TBinTree;</span><br><span class="line">TBinTree root;</span><br></pre></td></tr></table></div></figure>

<p><img src="https://i.loli.net/2020/03/23/njRHNiUuAkSZY5q.png" alt="数据结构-树-二叉树的链式存储结构-min.png"></p>

        <h3 id="2-4-二叉树的遍历（考试重点）"   >
          <a href="#2-4-二叉树的遍历（考试重点）" class="heading-link"><i class="fas fa-link"></i></a>2.4 二叉树的遍历（考试重点）</h3>
      
        <h4 id="2-4-1二叉树遍历的递归实现"   >
          <a href="#2-4-1二叉树遍历的递归实现" class="heading-link"><i class="fas fa-link"></i></a>2.4.1二叉树遍历的递归实现</h4>
      <p>二叉树的遍历是指某种次序访问二叉树上的所有结点，使每个结点被访问一次且仅被访问一次。</p>

        <h5 id="先序遍历"   >
          <a href="#先序遍历" class="heading-link"><i class="fas fa-link"></i></a>先序遍历</h5>
      <p>若被遍历的二叉树为空，执行空操作；否则，依次执行下来操作</p>
<ol>
<li>访问根结点；</li>
<li>先序遍历左子树</li>
<li>先序遍历右子树</li>
</ol>

        <h5 id="中序遍历"   >
          <a href="#中序遍历" class="heading-link"><i class="fas fa-link"></i></a>中序遍历</h5>
      <p>若被遍历的二叉树为空，执行空操作；否则，依次执行下列操作</p>
<ol>
<li>中序遍历左子树</li>
<li>访问根结点</li>
<li>中序遍历右子树</li>
</ol>

        <h5 id="后序遍历"   >
          <a href="#后序遍历" class="heading-link"><i class="fas fa-link"></i></a>后序遍历</h5>
      <p>若被遍历的二叉树为空，执行空操作；否则，依次执行下列操作</p>
<ol>
<li>后序遍历左子树</li>
<li>后序遍历右子树</li>
<li>访问根结点</li>
</ol>
<p><img src="https://i.loli.net/2020/03/23/cfDkpwq3ul6PyIe.png" alt="数据结构-树-后序遍历-min.png"></p>

        <h5 id="测试题"   >
          <a href="#测试题" class="heading-link"><i class="fas fa-link"></i></a>测试题</h5>
      <p><img src="https://i.loli.net/2020/03/23/OVhkoIsxSp9ZzW3.png" alt="数据结构-树-三种遍历的测试题-min.png"></p>
<ul>
<li>先序遍历: A-B-D-E-G-C-F</li>
<li>中序遍历: D-B-G-E-A-C-F</li>
<li>后序遍历: D-G-E-B-F-C-A</li>
</ul>
<p>【问题】假设一棵二叉树的中序序列与后序序列分别为BACDEFGH和BCAEDGHF，建立该二叉树。</p>
<p>【解题思路】</p>
<ul>
<li>第一步: 根据后序序列得知F是根结点</li>
<li>第二步: 结合中序序列与后序序列F的位置，可以得知BACDE是左子树，而GH是右子树</li>
<li>第三步: 再查看GH在后序序列的位置，可以得知H是G的根结点</li>
<li>第四步: 查看后序遍历BCAED可以知道D是左子树的根结点</li>
<li>第五步: 在查看D在中序序列得位置，可以得知E是右子树，BAC是左子树</li>
<li>第六步:与第四、五类似，先查看C在后序遍历的位置，可以得知B在左，C在右。</li>
</ul>
<p><img src="https://i.loli.net/2020/03/23/CbT5awR6gDpAyOJ.png" alt="数据结构-树-用遍历构造回二叉树-min.png"></p>

        <h4 id="2-4-2-三种遍历的递归算法描述"   >
          <a href="#2-4-2-三种遍历的递归算法描述" class="heading-link"><i class="fas fa-link"></i></a>2.4.2 三种遍历的递归算法描述</h4>
      
        <h5 id="先序"   >
          <a href="#先序" class="heading-link"><i class="fas fa-link"></i></a>先序</h5>
      <figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">(BinTree bt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(bt!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        visit(bt) <span class="comment">//访问根结点bt</span></span><br><span class="line">        preorder(bt-&gt;lchild)<span class="comment">//先序遍历左子树</span></span><br><span class="line">        preorder(bt-&gt;rchild)<span class="comment">//先序遍历右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>



        <h5 id="中序"   >
          <a href="#中序" class="heading-link"><i class="fas fa-link"></i></a>中序</h5>
      <figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorder</span><span class="params">(BinTree bt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(bt!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        inorder(bt-&gt;lchild）<span class="comment">//中序遍历左子树</span></span><br><span class="line">        visit(bt)<span class="comment">//访问根节点bt</span></span><br><span class="line">        inorder(bt-&gt;rchild)<span class="comment">//中序遍历右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>




        <h5 id="后序"   >
          <a href="#后序" class="heading-link"><i class="fas fa-link"></i></a>后序</h5>
      <figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postorder</span><span class="params">(BinTree bt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(bt!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        postorder(bt-&gt;lchild）<span class="comment">//后序遍历左子树</span></span><br><span class="line">        postorder(bt-&gt;rchild)<span class="comment">//后序遍历右子树</span></span><br><span class="line">        visit(bt)<span class="comment">//访问根节点bt</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>







        <h4 id="2-4-3-二叉树的层次遍历"   >
          <a href="#2-4-3-二叉树的层次遍历" class="heading-link"><i class="fas fa-link"></i></a>2.4.3 二叉树的层次遍历</h4>
      <p>所谓二叉树的层次遍历，是指从二叉树的根结点的这一层开始，逐层向下遍历，在每一层上按从左到右的顺序对结点逐个访问。  </p>
<p><img src="https://i.loli.net/2020/03/23/Ps6vhkBqWybJERI.png" alt="数据结构-树-二叉树的层次遍历.png"></p>

        <h2 id="三、树和森林"   >
          <a href="#三、树和森林" class="heading-link"><i class="fas fa-link"></i></a>三、树和森林</h2>
      
        <h3 id="3-1-树的存储结构"   >
          <a href="#3-1-树的存储结构" class="heading-link"><i class="fas fa-link"></i></a>3.1 树的存储结构</h3>
      
        <h4 id="3-1-1-孩子链表表示法"   >
          <a href="#3-1-1-孩子链表表示法" class="heading-link"><i class="fas fa-link"></i></a>3.1.1 孩子链表表示法</h4>
      <ul>
<li>孩子链表表示法是树的一种<code>链式存储</code>结构。</li>
<li>它的主体是一个数组元素个数和树中结点个数相同的一维数组。</li>
<li>树上的一个结点X以及该结点的所有孩子结点组成一个带头结点的单链表，单链表的头结点含有两个域:数据域和指针域。</li>
<li>其中，数据域用于存储结点X的数据元素，指针域用于存储指向X第一孩子结点的指针。</li>
</ul>
<p><img src="https://i.loli.net/2020/03/23/f6tuJRnQcBqlVMH.png" alt="数据结构-树-孩子链表表示法-min.png"></p>

        <h4 id="3-1-2-孩子兄弟链表表示法"   >
          <a href="#3-1-2-孩子兄弟链表表示法" class="heading-link"><i class="fas fa-link"></i></a>3.1.2 孩子兄弟链表表示法</h4>
      <p>存储时每个结点除了数据域外，还有指向该结点的第一个孩子和下一个兄弟结点的指针。</p>
<p><img src="https://i.loli.net/2020/03/23/eDLxsyKzwAHmUbn.png" alt="数据结构-树-孩子兄弟链表结点结构-min.png"></p>
<p><img src="https://i.loli.net/2020/03/23/9TvLEiGdCIwnOtK.png" alt="数据结构-树-树的孩子兄弟链表表示-min.png"></p>

        <h4 id="3-1-3-双亲表示法"   >
          <a href="#3-1-3-双亲表示法" class="heading-link"><i class="fas fa-link"></i></a>3.1.3 双亲表示法</h4>
      <p>双亲表示法由一个一维数组构成。<br>数组的每个分量包含两个域：数据域和双亲域。<br>数据域用于存储树上一个结点中数据元素，双亲域用于存储本结点的双亲在数组中的序号（下标值）。 </p>
<p><img src="https://i.loli.net/2020/03/24/6NflEmA47CBFOqg.png" alt="数据结构-树-双亲表示法-min.png"></p>

        <h3 id="3-2-树、森林与二叉树的关系"   >
          <a href="#3-2-树、森林与二叉树的关系" class="heading-link"><i class="fas fa-link"></i></a>3.2 树、森林与二叉树的关系</h3>
      
        <h4 id="3-2-1-树转换为二叉树"   >
          <a href="#3-2-1-树转换为二叉树" class="heading-link"><i class="fas fa-link"></i></a>3.2.1 树转换为二叉树</h4>
      <p>任何一棵树可唯一地与一棵二叉树对应。<br>相应地，一棵二叉树也唯一地对应一棵树，即树与二叉树可以互相转换。</p>
<ul>
<li><p>将树转换成二叉树的方法如下:</p>
<ul>
<li>将所有兄弟结点连接起来；</li>
<li>保留第一个兄弟结点与父节点的连接，断开其他兄弟结点与父节点的连接，然后以根结点为轴心按顺时针的方向旋转45&deg;</li>
</ul>
<p><img src="https://i.loli.net/2020/03/24/tBFVrpumalc4iv8.png" alt="数据结构-树与森林-树与二叉树的对应关系图-min.png"></p>
<p>上图转换思路</p>
<ul>
<li>第一步 连接BCD</li>
<li>第二步 去除AC、AD的连线</li>
<li>第三步 按顺时针的方向旋转45°，就可以得出右边的二叉树图</li>
</ul>
</li>
</ul>

        <h4 id="3-2-2-森林转换为二叉树"   >
          <a href="#3-2-2-森林转换为二叉树" class="heading-link"><i class="fas fa-link"></i></a>3.2.2 森林转换为二叉树</h4>
      <ul>
<li>森林转换成二叉树的方法如下</li>
<li>（1）将每课树转换成相应的二叉树</li>
<li>（2）将（1）中得到的各棵 二叉树的根结点看作是兄弟连接起来。</li>
</ul>

        <h4 id="3-2-3-二叉树转换为森林"   >
          <a href="#3-2-3-二叉树转换为森林" class="heading-link"><i class="fas fa-link"></i></a>3.2.3 二叉树转换为森林</h4>
      <ul>
<li>将二叉树转换成对应的森林的方法如下<ul>
<li>在待转换得二叉树中，断开根结点与右孩子的连线，得到两棵二叉树，其中一颗是以二叉树B的根结点为根的二叉树，另一颗是以根结点的右孩子E为根结点的二叉树。图a中，断开A与E连线后得到两棵如图b所示两棵的二叉树B1和B2.</li>
<li>在二叉树B1中，连接A与C,A与D。然后将B和C的连线断开，C和D的连线断开。</li>
<li>重复第一步与第二步对B2进行转换。</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2020/03/24/53OGpj1RqneCJzl.png" alt="数据结构-树-二叉树转换为森林-min.png"></p>
<p><img src="https://i.loli.net/2020/03/24/FVSICKwPDTMpxi6.png" alt="数据结构-树-二叉树转换为森林1-min.png"></p>
<p><img src="https://i.loli.net/2020/03/24/aNuHeW5pnPxqYdA.png" alt="数据结构-树-二叉树转换为森林2-min.png"></p>

        <h3 id="3-2-树与森林的遍历"   >
          <a href="#3-2-树与森林的遍历" class="heading-link"><i class="fas fa-link"></i></a>3.2 树与森林的遍历</h3>
      
        <h4 id="3-2-1-树的遍历"   >
          <a href="#3-2-1-树的遍历" class="heading-link"><i class="fas fa-link"></i></a>3.2.1 树的遍历</h4>
      <p>与二叉树类似，这里我们定义树的先序遍历、后序遍历和层次遍历</p>

        <h5 id="先序遍历-1"   >
          <a href="#先序遍历-1" class="heading-link"><i class="fas fa-link"></i></a>先序遍历</h5>
      <ol>
<li><p>访问根结点</p>
</li>
<li><p>依次先序遍历根的各棵子树T<sub>1</sub> , … , T<sub>m</sub></p>
<p> <img src="https://i.loli.net/2020/03/24/1qo5JUQhNSiWGyA.png" alt="数据结构-树-树的遍历-min.png"></p>
</li>
</ol>
<p>上图用先序遍历可以得出序列 H、A、B、E、G、F、D、C</p>

        <h5 id="后序遍历-1"   >
          <a href="#后序遍历-1" class="heading-link"><i class="fas fa-link"></i></a>后序遍历</h5>
      <ol>
<li>依次后序遍历根的各棵子树T<sub>1</sub>,…T<sub>m</sub>;</li>
<li>访问根结点。</li>
</ol>
<pre><code>![数据结构-树-树的遍历-min.png](https://i.loli.net/2020/03/24/1qo5JUQhNSiWGyA.png)</code></pre><p> 上图用后序遍历可以得出序列 B、G、F、D、E、A、C、H</p>

        <h6 id="层序遍历"   >
          <a href="#层序遍历" class="heading-link"><i class="fas fa-link"></i></a>层序遍历</h6>
      <ol>
<li><p>若树非空，访问根结点</p>
</li>
<li><p>若第i（i&gt;=1）层结点已被访问，第i+1层结点尚未访问，则从左到右依次访问第i+1层结点。</p>
<p>  <img src="https://i.loli.net/2020/03/24/1qo5JUQhNSiWGyA.png" alt="数据结构-树-树的遍历-min.png"></p>
</li>
</ol>
<p>上图用层次遍历可以得出序列 H、A、C、B、E、G、F、D</p>

        <h4 id="3-2-2-森林的遍历"   >
          <a href="#3-2-2-森林的遍历" class="heading-link"><i class="fas fa-link"></i></a>3.2.2 森林的遍历</h4>
      <p>森林有两种遍历方法</p>

        <h5 id="先序遍历森林。若森林非空，则"   >
          <a href="#先序遍历森林。若森林非空，则" class="heading-link"><i class="fas fa-link"></i></a>先序遍历森林。若森林非空，则</h5>
      <ol>
<li>访问森林中第一棵树的根结点</li>
<li>先序遍历森林第一棵树的根结点的子树组成的森林</li>
<li>先序遍历除去第一棵树之外其余的树组成的森林。</li>
</ol>
<p><img src="https://i.loli.net/2020/03/24/aNuHeW5pnPxqYdA.png" alt="数据结构-树-二叉树转换为森林2-min.png"></p>
<p>上图森林用先序遍历可以得出先序序列 A、B、C、D、E、F、G、H、J、I</p>

        <h5 id="中序遍历森林。若森林非空，则"   >
          <a href="#中序遍历森林。若森林非空，则" class="heading-link"><i class="fas fa-link"></i></a>中序遍历森林。若森林非空，则</h5>
      <ol>
<li><p>中序遍历森林中第一棵树的根结点的子树组成的森林；</p>
</li>
<li><p>访问第一棵树的根结点</p>
</li>
<li><p>中序遍历除去第一棵树之外其余的树组成的森林。</p>
<p><img src="https://i.loli.net/2020/03/24/aNuHeW5pnPxqYdA.png" alt="数据结构-树-二叉树转换为森林2-min.png"></p>
<p>上图森林用中序遍历可以得出中序序列 B、C、D、A、F、E、J、H、I、G</p>
</li>
</ol>

        <h2 id="四、判定树与哈夫曼树"   >
          <a href="#四、判定树与哈夫曼树" class="heading-link"><i class="fas fa-link"></i></a>四、判定树与哈夫曼树</h2>
      
        <h3 id="4-1-判定树"   >
          <a href="#4-1-判定树" class="heading-link"><i class="fas fa-link"></i></a>4.1 判定树</h3>
      <p>用于描述分类过程的二叉树称为判定树。<br><img src="https://i.loli.net/2020/03/24/28RjXZaBQGOV3rh.png" alt="数据结构-树-判定树-min.png"></p>

        <h3 id="4-2-哈夫曼树与哈夫曼算法"   >
          <a href="#4-2-哈夫曼树与哈夫曼算法" class="heading-link"><i class="fas fa-link"></i></a>4.2 哈夫曼树与哈夫曼算法</h3>
      
        <h4 id="如何构造一棵哈夫曼树"   >
          <a href="#如何构造一棵哈夫曼树" class="heading-link"><i class="fas fa-link"></i></a>如何构造一棵哈夫曼树</h4>
      <ol>
<li>由给定的值{p<sub>i</sub>,…p<sub>k</sub>}构造森林F={T<sub>i</sub>,…T<sub>k</sub>}，其中每一个Ti为一棵只有根结点且其权威p<sub>i</sub>的二叉树。</li>
<li>从F中选取根结点的权最小的两棵二叉树T<sub>i</sub>和T<sub>j</sub>为左、右子树的新的二叉树T<sub>h</sub>,置T<sub>h</sub>根结点的权为T<sub>i</sub>、T<sub>j</sub>根结点的权指之和。</li>
<li>从F中删去T<sub>i</sub>、T<sub>j</sub>,并将T<sub>h</sub>加入F。若F中仍多余一棵二叉树，则返回2.直到F中只含一棵二叉树为止，这棵二叉树就是哈夫曼树。</li>
</ol>
<p><img src="https://i.loli.net/2020/03/24/vF9NrSIpkPDb7Zn.png" alt="数据结构-树-构造哈夫曼树-min.png"></p>

        <h4 id="哈夫曼编码"   >
          <a href="#哈夫曼编码" class="heading-link"><i class="fas fa-link"></i></a>哈夫曼编码</h4>
      <p><img src="https://i.loli.net/2020/03/24/kU4CbTqXPv8cWzj.png" alt="数据结构-树-哈夫曼编码-min.png"></p>
<p>【案例】设某通信系统中一个待传输的文本有6个不同字符，它们的出现频率分别是0.5，0.8 1.4，2.2，2.3，2.8，试设计哈夫曼编码。</p>
<p>【分析】由题意，共有n=6个不同的字符，字符的频率序列为p={0.5,0.8,1.4,2.2,2.3,2.8},以这样频率作为权值，构造一棵哈夫曼树，并对其进行哈夫曼编码</p>
<p><img src="https://i.loli.net/2020/03/25/MgR97KWFowDLVaX.png" alt="数据结构-树-哈夫曼编码-min.png"></p>
<ul>
<li>2.2： 0 0 </li>
<li>2.3:  0 1</li>
<li>2.8:  1 1</li>
<li>1.4:  1 0 1</li>
<li>0.5:  1 0 0 0 </li>
<li>0.8:  1 0 0 1</li>
</ul>
<p><img src="https://i.loli.net/2020/03/25/MAhKGNUPqRS89Xo.png" alt="数据结构-树-哈夫曼编码-例子结果-min.png"></p>

        <h2 id="五、考核的知识点与考核要求"   >
          <a href="#五、考核的知识点与考核要求" class="heading-link"><i class="fas fa-link"></i></a>五、考核的知识点与考核要求</h2>
      
        <h3 id="5-1-树结构、森林"   >
          <a href="#5-1-树结构、森林" class="heading-link"><i class="fas fa-link"></i></a>5.1 树结构、森林</h3>
      <ul>
<li>识记:<ul>
<li>树的基本概念；</li>
<li>术语；</li>
<li>森林基本概念</li>
</ul>
</li>
<li>领会: 树的基本运算</li>
<li>简单应用：<ul>
<li>结点的度计算</li>
<li>树的度计算</li>
<li>树的高度计算</li>
<li>结点的层次树计算</li>
</ul>
</li>
</ul>

        <h3 id="5-2-二叉树"   >
          <a href="#5-2-二叉树" class="heading-link"><i class="fas fa-link"></i></a>5.2 二叉树</h3>
      <ul>
<li>识记:<ul>
<li>二叉树的概念；</li>
<li>左子树</li>
<li>右子树</li>
</ul>
</li>
<li>领会<ul>
<li>二叉树的基本运算</li>
<li>二叉树的性质</li>
<li>二叉树顺序存储及类C语言描述</li>
<li>二叉树链式存储及类C语言描述</li>
<li>二叉树的遍历算法</li>
</ul>
</li>
<li>简单应用<ul>
<li>二叉树结点树计算</li>
<li>二叉树深度计算</li>
<li>给出二叉树先序序列</li>
<li>中序序列和后序序列</li>
<li>由二叉树先序序列、中序序列和后序序列构造二叉树</li>
</ul>
</li>
<li>综合应用：<ul>
<li>设计二叉树上基于先序遍历、中序遍历和后序遍历的应用算法</li>
</ul>
</li>
</ul>

        <h3 id="5-3-树与森林"   >
          <a href="#5-3-树与森林" class="heading-link"><i class="fas fa-link"></i></a>5.3 树与森林</h3>
      <ul>
<li>识记<ul>
<li>树的先序遍历方法；</li>
<li>树的后序遍历方法；</li>
<li>树的层次遍历方法；</li>
<li>森林的先序遍历方法；</li>
<li>森林的中序遍历方法</li>
</ul>
</li>
<li>领会<ul>
<li>树、森林与二叉树的关系</li>
<li>树转换成二叉树方法</li>
<li>森林转换成二叉树方法</li>
<li>二叉树转换成森林方法</li>
</ul>
</li>
</ul>

        <h3 id="5-4-判定树和哈夫曼树"   >
          <a href="#5-4-判定树和哈夫曼树" class="heading-link"><i class="fas fa-link"></i></a>5.4 判定树和哈夫曼树</h3>
      <ul>
<li>识记：<ul>
<li>判定树概念；</li>
<li>哈夫曼树概念</li>
<li>哈夫曼编码</li>
</ul>
</li>
<li>领会<ul>
<li>分类与判定树的关系</li>
<li>哈夫曼构造过程</li>
<li>哈夫曼算法</li>
</ul>
</li>
<li>简单应用<ul>
<li>由一组叶结点的权值构造一棵对应的哈夫曼树，设计哈夫曼编码</li>
</ul>
</li>
</ul>

        <h3 id="5-5-本章重点、难点"   >
          <a href="#5-5-本章重点、难点" class="heading-link"><i class="fas fa-link"></i></a>5.5 本章重点、难点</h3>
      <ul>
<li>本章重点<ul>
<li>树形结构的概念</li>
<li>二叉树的定义</li>
<li>存储结构和遍历算法</li>
</ul>
</li>
</ul>
<ul>
<li>本章难点<ul>
<li>二叉树的遍历算法和哈夫曼树构造算法</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>自考专升本</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>【英语二】概括段落大意和补全句子</title>
    <url>/2020/04/03/%E3%80%90%E8%8B%B1%E8%AF%AD%E4%BA%8C%E3%80%91%E6%A6%82%E6%8B%AC%E6%AE%B5%E8%90%BD%E5%A4%A7%E6%84%8F%E5%92%8C%E8%A1%A5%E5%85%A8%E5%8F%A5%E5%AD%90/</url>
    <content><![CDATA[
        <h2 id="一、-概括段落大意破题法"   >
          <a href="#一、-概括段落大意破题法" class="heading-link"><i class="fas fa-link"></i></a>一、 概括段落大意破题法</h2>
      <ul>
<li>先题后文</li>
<li>浏览选项</li>
<li>找关键词</li>
<li>定位段落</li>
<li>分析原文</li>
<li>得出答案</li>
</ul>

        <h2 id="二、补全句子破题法"   >
          <a href="#二、补全句子破题法" class="heading-link"><i class="fas fa-link"></i></a>二、补全句子破题法</h2>
      <ul>
<li>先题后文</li>
<li>浏览选项</li>
<li>定位段落</li>
<li>分析原文</li>
<li>得出答案</li>
</ul>
<a id="more"></a>


        <h2 id="时态（二）"   >
          <a href="#时态（二）" class="heading-link"><i class="fas fa-link"></i></a>时态（二）</h2>
      
        <h2 id="三、过去进行时"   >
          <a href="#三、过去进行时" class="heading-link"><i class="fas fa-link"></i></a>三、过去进行时</h2>
      
        <h3 id="3-1-过去进行时的用法"   >
          <a href="#3-1-过去进行时的用法" class="heading-link"><i class="fas fa-link"></i></a>3.1 过去进行时的用法</h3>
      
        <h4 id="3-1-1-表示过去某一时刻、某一阶段正在进行的动作"   >
          <a href="#3-1-1-表示过去某一时刻、某一阶段正在进行的动作" class="heading-link"><i class="fas fa-link"></i></a>3.1.1 表示过去某一时刻、某一阶段正在进行的动作</h4>
      <blockquote>
<p>He was reading a novel when I came in</p>
</blockquote>

        <h4 id="3-1-2-表示按计划在过去某事将要发生的动作"   >
          <a href="#3-1-2-表示按计划在过去某事将要发生的动作" class="heading-link"><i class="fas fa-link"></i></a>3.1.2 表示按计划在过去某事将要发生的动作</h4>
      <blockquote>
<p>We went to say goodbye to our neighbours. We <code>were moving</code> up to the north the next day.</p>
</blockquote>

        <h3 id="3-2-过去进行时的构成"   >
          <a href="#3-2-过去进行时的构成" class="heading-link"><i class="fas fa-link"></i></a>3.2 过去进行时的构成</h3>
      <p>was/were + 现在分词（v+ing）</p>

        <h2 id="四、将来进行时"   >
          <a href="#四、将来进行时" class="heading-link"><i class="fas fa-link"></i></a>四、将来进行时</h2>
      
        <h3 id="4-1-将来进行时的用法"   >
          <a href="#4-1-将来进行时的用法" class="heading-link"><i class="fas fa-link"></i></a>4.1 将来进行时的用法</h3>
      
        <h4 id="4-1-1-表示将来某一时刻、某一阶段正在进行的动作"   >
          <a href="#4-1-1-表示将来某一时刻、某一阶段正在进行的动作" class="heading-link"><i class="fas fa-link"></i></a>4.1.1 表示将来某一时刻、某一阶段正在进行的动作</h4>
      <blockquote>
<p>This time tomorrow we <code>will be flying</code> to Europe</p>
</blockquote>

        <h3 id="4-2-将来进行时的构成"   >
          <a href="#4-2-将来进行时的构成" class="heading-link"><i class="fas fa-link"></i></a>4.2 将来进行时的构成</h3>
      <p>will/shall be + 现在分词（v+ing）</p>

        <h2 id="五、现在完成时"   >
          <a href="#五、现在完成时" class="heading-link"><i class="fas fa-link"></i></a>五、现在完成时</h2>
      
        <h3 id="5-1-现在完成时的用法"   >
          <a href="#5-1-现在完成时的用法" class="heading-link"><i class="fas fa-link"></i></a>5.1 现在完成时的用法</h3>
      
        <h4 id="5-1-1-表示动作在说话之前已经发生-但对现在有影响。句中没有具体的时间状语。"   >
          <a href="#5-1-1-表示动作在说话之前已经发生-但对现在有影响。句中没有具体的时间状语。" class="heading-link"><i class="fas fa-link"></i></a>5.1.1 表示动作在说话之前已经发生,但对现在有影响。句中没有具体的时间状语。</h4>
      <blockquote>
<p>My brother <code>has</code> just <code>come</code> back from Beijing. </p>
</blockquote>

        <h4 id="5-1-2-表示动作开始于过去-持续到现在，也许还会继续下去。"   >
          <a href="#5-1-2-表示动作开始于过去-持续到现在，也许还会继续下去。" class="heading-link"><i class="fas fa-link"></i></a>5.1.2 表示动作开始于过去,持续到现在，也许还会继续下去。</h4>
      <p>常与for或since短语。so far,now,today,this week 等时间状语连用。</p>
<blockquote>
<p>They <code>have studied</code> English for three years</p>
</blockquote>

        <h4 id="5-1-3-用于时间状语从句和条件状语从句中，表示将来完成的动作1"   >
          <a href="#5-1-3-用于时间状语从句和条件状语从句中，表示将来完成的动作1" class="heading-link"><i class="fas fa-link"></i></a>5.1.3 用于时间状语从句和条件状语从句中，表示将来完成的动作1.</h4>
      <blockquote>
<p>If it <code>have stopped</code>  snowing tomorrow , we’ll go to the park<br>I’ll go to your home when I <code>have finished</code>my homework;</p>
</blockquote>

        <h4 id="5-1-4-注意"   >
          <a href="#5-1-4-注意" class="heading-link"><i class="fas fa-link"></i></a>5.1.4 注意</h4>
      <p>表示短暂动作的词（如come,go,die,marry,buy等）的完成时不能与for，since等短语连用。</p>
<blockquote>
<p>I have come here for two days（错误）<br>I have been here for two days（正确）</p>
</blockquote>

        <h3 id="5-2-现在完成时的构成"   >
          <a href="#5-2-现在完成时的构成" class="heading-link"><i class="fas fa-link"></i></a>5.2 现在完成时的构成</h3>
      <p>have/has + 过去分词（done）</p>

        <h3 id="5-3-动词过去分词变化规则"   >
          <a href="#5-3-动词过去分词变化规则" class="heading-link"><i class="fas fa-link"></i></a>5.3 动词过去分词变化规则</h3>
      <p><img src="https://i.loli.net/2020/03/30/Nbj3zu7LcKDrUBY.png" alt="英语二-动词过去分词变化规则-min.png"></p>

        <h2 id="六、过去完成时"   >
          <a href="#六、过去完成时" class="heading-link"><i class="fas fa-link"></i></a>六、过去完成时</h2>
      
        <h3 id="6-1-过去完成时的用法"   >
          <a href="#6-1-过去完成时的用法" class="heading-link"><i class="fas fa-link"></i></a>6.1 过去完成时的用法</h3>
      
        <h4 id="6-1-1-表示过去某时或某动作之前已经发生的动作或存在的状态。"   >
          <a href="#6-1-1-表示过去某时或某动作之前已经发生的动作或存在的状态。" class="heading-link"><i class="fas fa-link"></i></a>6.1.1 表示过去某时或某动作之前已经发生的动作或存在的状态。</h4>
      <p>常与by,before,until,when等引导的时间状语从句连用</p>
<blockquote>
<p>When we got to the airport the plane <code>had taken off</code><br>I <code>had learnt</code> 5,000 words before I entered the university</p>
</blockquote>

        <h4 id="6-1-2-表示动作在过去某时已经发生，一直持续到某时，可能还要持续下去。"   >
          <a href="#6-1-2-表示动作在过去某时已经发生，一直持续到某时，可能还要持续下去。" class="heading-link"><i class="fas fa-link"></i></a>6.1.2 表示动作在过去某时已经发生，一直持续到某时，可能还要持续下去。</h4>
      <blockquote>
<p>I left the company in 1998. I <code>had worked</code> there for eight years.</p>
</blockquote>

        <h4 id="6-1-3-注意"   >
          <a href="#6-1-3-注意" class="heading-link"><i class="fas fa-link"></i></a>6.1.3 注意</h4>
      
        <h5 id="当两个或两个以上的动作按发生的顺序在句中连续出现，可不用过去完成时，用一般过去时"   >
          <a href="#当两个或两个以上的动作按发生的顺序在句中连续出现，可不用过去完成时，用一般过去时" class="heading-link"><i class="fas fa-link"></i></a>当两个或两个以上的动作按发生的顺序在句中连续出现，可不用过去完成时，用一般过去时</h5>
      <blockquote>
<p>He <code>got off</code> the bus,<code>walked</code> to the house,<code>opened</code> the door and <code>stepped</code> in </p>
</blockquote>

        <h5 id="当两个先后发生的动作不按时间顺序排列时，先发生的动作用过去完成时"   >
          <a href="#当两个先后发生的动作不按时间顺序排列时，先发生的动作用过去完成时" class="heading-link"><i class="fas fa-link"></i></a>当两个先后发生的动作不按时间顺序排列时，先发生的动作用过去完成时</h5>
      <blockquote>
<p>HE <code>found</code> the umbrella that he <code>had lost</code>。</p>
</blockquote>

        <h4 id="6-2-过去完成时的构成"   >
          <a href="#6-2-过去完成时的构成" class="heading-link"><i class="fas fa-link"></i></a>6.2 过去完成时的构成</h4>
      <p>had + 过去分词（done）</p>

        <h2 id="七、将来完成时"   >
          <a href="#七、将来完成时" class="heading-link"><i class="fas fa-link"></i></a>七、将来完成时</h2>
      
        <h3 id="7-1-将来完成时的用法"   >
          <a href="#7-1-将来完成时的用法" class="heading-link"><i class="fas fa-link"></i></a>7.1 将来完成时的用法</h3>
      
        <h4 id="表示在未来某个时间或某个动作之前将已经发生的动作"   >
          <a href="#表示在未来某个时间或某个动作之前将已经发生的动作" class="heading-link"><i class="fas fa-link"></i></a>表示在未来某个时间或某个动作之前将已经发生的动作</h4>
      <blockquote>
<p>When you get there, they <code>will</code> probably <code>have left</code></p>
</blockquote>

        <h3 id="7-2-将来完成时的构成"   >
          <a href="#7-2-将来完成时的构成" class="heading-link"><i class="fas fa-link"></i></a>7.2 将来完成时的构成</h3>
      <p>will/shall have + 过去分词（done）</p>
]]></content>
      <categories>
        <category>自考专升本</category>
      </categories>
      <tags>
        <tag>英语二</tag>
      </tags>
  </entry>
  <entry>
    <title>【数据结构】第五章 图</title>
    <url>/2020/04/03/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E5%9B%BE/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/03/31/tqRKLUire6aPHbJ.png" alt="数据结构-第五章-图-脑图-min.png"></p>

        <h2 id="学习目的与要求"   >
          <a href="#学习目的与要求" class="heading-link"><i class="fas fa-link"></i></a>学习目的与要求</h2>
      <p>图是一种有广泛应用背景的数据结构。</p>
<p>本章在运算实现方面着重研究图遍历这一常用运算的实现，以及最小生成树、单源最短路径和拓扑排序等典型的应用问题的求解。</p>

        <h3 id="本章总的要求"   >
          <a href="#本章总的要求" class="heading-link"><i class="fas fa-link"></i></a>本章总的要求</h3>
      <ul>
<li>理解图的概念并熟悉有关术语；</li>
<li>熟练掌握图的邻接矩阵表示法和邻接表表示法；</li>
<li>深刻理解连通图遍历与基本思想和算法；</li>
<li>理解最小生产树的有关概念和算法</li>
<li>理解图的最短路径的有关概念和算法</li>
<li>理解拓扑排序的有关概念和算法。</li>
</ul>
<a id="more"></a>



        <h2 id="一、图的基本概念"   >
          <a href="#一、图的基本概念" class="heading-link"><i class="fas fa-link"></i></a>一、图的基本概念</h2>
      
        <h3 id="1-1-图的定义和术语"   >
          <a href="#1-1-图的定义和术语" class="heading-link"><i class="fas fa-link"></i></a>1.1 图的定义和术语</h3>
      
        <h4 id="有向图、无向图"   >
          <a href="#有向图、无向图" class="heading-link"><i class="fas fa-link"></i></a>有向图、无向图</h4>
      <ul>
<li>图G有两个集合V和E组成，记为G=（V,E）,其中，V是顶点的<code>有穷非空</code>集合；</li>
<li>E是边的集合，边是V中顶点的偶对。</li>
<li>如果边是有方向的则称图为有向图，否则称为无向图。</li>
<li>偶对<code>&lt;v,w&gt;</code>表示有向图中从顶点v到顶点w有一条边；</li>
<li>偶对<code>&lt;v,w&gt;</code>表示无向图中顶点v到顶点w间有一条边</li>
</ul>

        <h4 id="弧、弧头、弧尾"   >
          <a href="#弧、弧头、弧尾" class="heading-link"><i class="fas fa-link"></i></a>弧、弧头、弧尾</h4>
      <ul>
<li>有向图的边称为弧。</li>
<li><code>&lt;v,w&gt;</code>表示有向图G中从v到w的一条边，v称为弧尾或始点，</li>
<li>w称为弧头或终点。</li>
</ul>

        <h4 id="无向完全图"   >
          <a href="#无向完全图" class="heading-link"><i class="fas fa-link"></i></a>无向完全图</h4>
      <p>任何两点之间都有边的无向图。一个具有n个顶点的无向完全图的边数为C_n^2 = n(n -1)/2。</p>

        <h4 id="有向完全图"   >
          <a href="#有向完全图" class="heading-link"><i class="fas fa-link"></i></a>有向完全图</h4>
      <p>任何两点之间都有弧的有向图称为有向完全图。一个具有n个顶点的有向完全图的弧树为p_n^2 = n(n -1）</p>

        <h4 id="权、带权图"   >
          <a href="#权、带权图" class="heading-link"><i class="fas fa-link"></i></a>权、带权图</h4>
      <p>图的边附带数值，这个数值叫权。权在实际应用中可表示从一个顶点到另一个顶点的距离、代价或耗费等。每条边都带权的图称为带权图。</p>

        <h4 id="顶点的度、入度、出度"   >
          <a href="#顶点的度、入度、出度" class="heading-link"><i class="fas fa-link"></i></a>顶点的度、入度、出度</h4>
      <ul>
<li>无向图中顶点v的度是与该顶点相关联的边的数目。</li>
<li>如果G是一个有向图，则把以顶点v为终点的的数目称为v的入度。把以顶点v的始点的弧的数目称为v的出度。</li>
<li>有向图中顶点v的度为入度与出度的和。</li>
</ul>

        <h4 id="子图"   >
          <a href="#子图" class="heading-link"><i class="fas fa-link"></i></a>子图</h4>
      <p>设G=(V、E)是一个图，若E’是E的子集，V’是V的子集，并且E’中的边仅与V’中的顶点相关联，则图G’= （V’,E’）称为图G的子图。</p>
<p><img src="https://i.loli.net/2020/03/26/SQHjP1okya43eUM.png" alt="数据结构-图-有无向图-min.png"><br><img src="https://i.loli.net/2020/03/26/p1yJ6kFm5VTGMNg.png" alt="数据结构-图-子图-min.png"></p>

        <h4 id="路径、路径长度"   >
          <a href="#路径、路径长度" class="heading-link"><i class="fas fa-link"></i></a>路径、路径长度</h4>
      <p>路径上边（或弧）的数目称为路径长度</p>

        <h4 id="简单路径、回路、简单回路"   >
          <a href="#简单路径、回路、简单回路" class="heading-link"><i class="fas fa-link"></i></a>简单路径、回路、简单回路</h4>
      <ul>
<li>序列中顶点不重复出现的路径称为简单路径。</li>
<li>第一个顶点与最后一个顶点相同的路径称为回路或环。</li>
<li>除了第一个顶点和最后一个顶点外，其余顶点不重复的回路，称为简单回路或简单环。</li>
</ul>

        <h4 id="连通、连通图、连通分量"   >
          <a href="#连通、连通图、连通分量" class="heading-link"><i class="fas fa-link"></i></a>连通、连通图、连通分量</h4>
      <ul>
<li><p>在无向图中，如果从顶点V到顶点V’有路径，则称V和V’是连通的。</p>
</li>
<li><p>如果图中的任意两个顶点V_i和V_j都是连通的，则称G为连通图。</p>
</li>
<li><p>图5-2中G2是一个连通图。</p>
</li>
<li><p>图5-5a存在多个不连通顶点。</p>
</li>
<li><p>例如，V_0和V_3是不连通的，所以G3是非连通图，G3有两个非连桶图，G3有连个连通分量。</p>
</li>
<li><p>如图5-5b所示。连通分量是无向图中的极大连通子图。</p>
</li>
</ul>
<p><img src="https://i.loli.net/2020/03/27/JUvYW1PwRNCdtq9.png" alt="数据结构-图-连通图-min.png"></p>

        <h4 id="强连通、强连通图、强连通分量："   >
          <a href="#强连通、强连通图、强连通分量：" class="heading-link"><i class="fas fa-link"></i></a>强连通、强连通图、强连通分量：</h4>
      <p>对于有向图来说，如果图中任意一对顶点V_i和V_j（其中i！=j）都有顶点V_i到顶点V_j的路径，也有从V_j到V_i的路径，即两个顶点间双向连通，那么称为该有向图是强连通图。有向图的强大强连通子图称为强连通分量。</p>
<p><img src="https://i.loli.net/2020/03/27/D2TfHPlQYZxOmCB.png" alt="数据结构-图-强连桶分量-min.png"></p>

        <h4 id="生成树"   >
          <a href="#生成树" class="heading-link"><i class="fas fa-link"></i></a>生成树</h4>
      <ul>
<li>一个连通图的生成树，是含有该连通图的全部顶点的一个极小连通子图。</li>
<li>若连通图G的顶点个数为n，则G的生成树的边数为n-1。</li>
<li>如果G的一个子图G’的边数大于n-1，则G’中一定有环。</li>
<li>相反，如果G’的边数小于n-1，则G’一定不连通。</li>
</ul>

        <h4 id="生成森林"   >
          <a href="#生成森林" class="heading-link"><i class="fas fa-link"></i></a>生成森林</h4>
      <ul>
<li>在非连通图中，由每个连通分量都可得到一个极小连通子图，即一棵生成树。</li>
<li>那么这些连通分量的生成树就组成了一个非连通图的生成森林。</li>
</ul>

        <h3 id="1-2-图的基本运算"   >
          <a href="#1-2-图的基本运算" class="heading-link"><i class="fas fa-link"></i></a>1.2 图的基本运算</h3>
      <ol>
<li>建立图CreateGraph（G,V,E):建立一个图G，其中V是G的顶点集合，E是G的边的集合。</li>
<li>取顶点信息GetVex（G,u）:获取图G中顶点u的信息</li>
<li>取边信息Getarc(G,u,v):获取图G中边(u，v)或&lt;u,v&gt;的信息</li>
<li>查询第一个邻接点FirstVex（G，u）:获取图G中顶点u的第一个邻接点；</li>
<li>查询下一个邻接点NextVex(G,u,v):已知v是u的一个邻接点，获取图G中顶点u的下一个邻接点。</li>
<li>插入顶点InsertVex（G,v）:在图G中插入一个顶点v；</li>
<li>删除顶点DeleteVex（G,v）:在图G中删除一个顶点v；</li>
<li>插入边InsertArc（G,v,w）:在图G中插入一条边（v,w）或&lt;v,w&gt;;</li>
<li>删除边DeleteArc（G,v,w）:在图G中删除一条边(v,w)或者&lt;v,w&gt;；</li>
<li>遍历图Traverse（G,tag):遍历图G，使G中每一个顶点被访问一次且仅被访问一次，当tag=0；则遍历的方法为深度优先搜索,当tag=1,则遍历的方法为广度优先搜索。</li>
</ol>

        <h2 id="二、图的存储结构"   >
          <a href="#二、图的存储结构" class="heading-link"><i class="fas fa-link"></i></a>二、图的存储结构</h2>
      
        <h3 id="2-1-邻接矩阵"   >
          <a href="#2-1-邻接矩阵" class="heading-link"><i class="fas fa-link"></i></a>2.1 邻接矩阵</h3>
      <p>邻接矩阵就是用矩阵来描述图中顶点之间的关联关系，在程序设计语言中我们用二维数组来表示矩阵</p>
<p>设G=（V,E）是一个图，其中V={V_0,V_1,…V_n-1},那么G的邻接矩阵A定义为如下的n阶方阵</p>
<p><img src="https://i.loli.net/2020/03/28/CysxSeT3cjznwph.png" alt="数据结构-图-邻接矩阵-min.png"></p>
<p><img src="https://i.loli.net/2020/03/28/VqFWJC4zEUG5BjH.png" alt="数据结构-图-邻接矩阵1-min.png"></p>

        <h4 id="类型定义如下"   >
          <a href="#类型定义如下" class="heading-link"><i class="fas fa-link"></i></a>类型定义如下</h4>
      <figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> vnum = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">gp</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    VertexType vexs[vnum]；<span class="comment">//顶点信息</span></span><br><span class="line">    <span class="keyword">int</span> arcs[vnum][vnum]；<span class="comment">//邻接矩阵</span></span><br><span class="line">    <span class="keyword">int</span> vexnum,arcnum; <span class="comment">//顶点树，边数</span></span><br><span class="line">&#125;Graph;</span><br></pre></td></tr></table></div></figure>

<p><img src="https://i.loli.net/2020/03/28/MHOxjEeunqITPlQ.png" alt="数据结构-图-邻接矩阵-带权图-min.png"></p>
<p><img src="https://i.loli.net/2020/03/28/uPH1Zmsi3qSpzAC.png" alt="数据结构-图-邻接矩阵2-min.png"></p>
<ul>
<li>a 有向带权图</li>
<li>b 有向带权图的邻接矩阵</li>
<li>c 无向带权图</li>
<li>d 无向带权图的邻接矩阵</li>
</ul>
<p>带权图的邻接矩阵表示的类型定义做如下的修改：</p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> vnum = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAT_INT = <span class="number">32767</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">gp</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    VertexType vexs[vnum];</span><br><span class="line">    WeightType arcs[vnum][vnum];</span><br><span class="line">    <span class="keyword">int</span> vexnum,arcnum;</span><br><span class="line">&#125;WGraph;</span><br></pre></td></tr></table></div></figure>


        <h3 id="2-2-邻接表"   >
          <a href="#2-2-邻接表" class="heading-link"><i class="fas fa-link"></i></a>2.2 邻接表</h3>
      <ul>
<li>邻接表示顺序存储与链式存储相结合的存储方法。</li>
<li>在邻接表中，对图中每个顶点简历一个单链表。</li>
<li>每一个单链表设一个表头结点，为了便于随机访问，将所以单链表的头结点组成一个一维数组。</li>
<li>单链表中每一个结点称为表结点，包括两个域:邻接点（adjvex）和链域（nexttarc）,在带权图的表结点中增加一个权值域，用于存储边的权值（weight）</li>
</ul>
<p><img src="https://i.loli.net/2020/03/28/VhXZyDAOE4zg1Uu.png" alt="数据结构-图-邻接表-表头和表结点形式-min.png"></p>
<p><img src="https://i.loli.net/2020/03/28/kafD8vR5I2mBLMn.png" alt="数据结构-图-邻接表-无向图G2-min.png"></p>
<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> vnum 20</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">arcnode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> adjvex; <span class="comment">//下一条边的顶点编号</span></span><br><span class="line">    WeightType weight <span class="comment">//带权图的权值域，若是非带权图，可不用该与</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">arcnode</span> *<span class="title">nextarc</span>;</span>指向下一条边的指针</span><br><span class="line">&#125;ArcNode</span><br></pre></td></tr></table></div></figure>



<figure class="highlight c"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">vexnode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> vertex; <span class="comment">//顶点编号</span></span><br><span class="line">    ArcNode *firstarc;<span class="comment">//指向第一条边的指针</span></span><br><span class="line">&#125;AdjList[vnum];</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">gp</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    AdjList adjlist;</span><br><span class="line">    <span class="keyword">int</span> vexnum;arcnum; <span class="comment">//顶点和边的个数</span></span><br><span class="line">&#125;Graph;</span><br></pre></td></tr></table></div></figure>

<p>如果一个无向图有n个顶点，e条边，那么它的邻接表需要n个头结点和2e个表结点。显然，在边稀疏（e&lt;&lt;n(n-1)/2）的情况下，用邻接表表示比用邻接矩阵介绍存储空间。</p>
<p>在邻接表上如何求顶点的度？无向图中顶点v_i的度恰为第i个单链表中的结点数。对有向图，第i个单链表中的结点个数只是顶点V_i的出度。为了求入度，必须遍历整个邻接表。在所有单链表中其邻接点域的值为i的结点的格式是顶点V_i的入度。</p>
<p> 对于有向图，有时需要建立一个逆邻接表，即对每个顶点V_i建立一个以V_i为弧头的邻接点的链表。这同邻接表正好相反。对于逆邻接表可以很容易求出V_i的入度。</p>
<p>  <img src="https://i.loli.net/2020/03/28/7KVgvfIMzrGaTp1.png" alt="数据结构-图-邻接表-逆邻接表-min.png"></p>

        <h2 id="三、图的遍历"   >
          <a href="#三、图的遍历" class="heading-link"><i class="fas fa-link"></i></a>三、图的遍历</h2>
      
        <h3 id="3-1-连通图的深度优先搜索"   >
          <a href="#3-1-连通图的深度优先搜索" class="heading-link"><i class="fas fa-link"></i></a>3.1 连通图的深度优先搜索</h3>
      <p>连通图深度优先搜索的基本思想<br>假定以图中某个顶点V_i为出发点，首先访问出发点V_i,然后任选一个V_i的未访问过的邻接点V_j,以V_j为新的出发点继续进行深度优先搜索，依此类推，直至图中所有顶点都被访问过。显然，图的深度优先搜索可以看出一个递归过程。</p>
<p><img src="https://i.loli.net/2020/03/28/KWXipmqzjPMdnSs.png" alt="数据结构-图-图的遍历-min.png"></p>
<p>需要注意两点</p>
<ul>
<li>搜索到达某个顶点事（图中仍有顶点未被访问)，如果这个顶点的所以邻接点都被访问过，那么搜索就要回到前一个被访问的顶点，再从该顶点的下一未被访问的邻接点开始深度优先搜索</li>
<li>深度搜索的顶点的访问序列不是唯一的<ul>
<li>以邻接表为存储结构，深度优先搜索算法的时间复杂度是O(n+e),其中n为图的顶点数，e为图的边数。采用邻接矩阵作为存储结构，深度优先搜索算法的时间复杂度是O(n^2),其中n为图的顶点树。</li>
</ul>
</li>
</ul>

        <h3 id="3-2-连通图的广度优先搜索"   >
          <a href="#3-2-连通图的广度优先搜索" class="heading-link"><i class="fas fa-link"></i></a>3.2 连通图的广度优先搜索</h3>
      <p>连通图广度优先搜索的基本思想：</p>
<ul>
<li>从图中某个顶点V_i出发，在访问了V_i之后依次访问V_i的所有邻接点，</li>
<li>然后依次从这些邻接点出发按广度优先搜索方法遍历图的其他顶点</li>
<li>重复着一过程，直至所有顶点都被访问到。</li>
<li>广度优先搜索遍历类似于树的按层次遍历的过程。</li>
</ul>
<p><img src="https://i.loli.net/2020/03/30/xJu6kmzw5fU4nY7.png" alt="数据结构-图-广度优先搜索-min.png"></p>

        <h2 id="四、图的应用"   >
          <a href="#四、图的应用" class="heading-link"><i class="fas fa-link"></i></a>四、图的应用</h2>
      
        <h3 id="4-1-最小生成树"   >
          <a href="#4-1-最小生成树" class="heading-link"><i class="fas fa-link"></i></a>4.1 最小生成树</h3>
      
        <h4 id="4-1-1-最小生产树的概念"   >
          <a href="#4-1-1-最小生产树的概念" class="heading-link"><i class="fas fa-link"></i></a>4.1.1 最小生产树的概念</h4>
      <p>连通图的一次遍历所经过边的集合及图中所有顶点的集合就构成该图的一棵生成树。</p>
<p>连通图的变量序列不是唯一的所以能得到不同的生成树。</p>

        <h4 id="4-1-2-构造最小生成树的Prim算法"   >
          <a href="#4-1-2-构造最小生成树的Prim算法" class="heading-link"><i class="fas fa-link"></i></a>4.1.2 构造最小生成树的Prim算法</h4>
      <p>Prim算法的基本思想如下。假设G=(V,E)是一个带权图，生成的最小生成树为MinT = （V,T），其中V为顶点的集合，T为边的集合。求T的步骤如下：</p>
<ol>
<li><p>初始化：U={u_0},T={}。其中U为一个新设置的顶点的集合，初始U中只含有顶点u_0,这里假设在构造最小生成树时，从顶点u_0出发；</p>
</li>
<li><p>对于所有u属于U，v属于V-U(其中u,v表示顶点)的边（u,v）中，找一条权最小的边（u’,v’）,将这条边加入到集合T中，将顶点V’加入到集合U中;</p>
</li>
<li><p>如果U=V，则算法结束;否则重复第（2）、（3）步。最后得到最小生成树MinT = &lt;V,T&gt;,其中T为最小生成树的集合。</p>
<p><img src="https://i.loli.net/2020/03/30/c4RH3sbyvGM6gn2.png" alt="数据结构-图-Prim算法求最小生成树-min.png"></p>
</li>
</ol>

        <h4 id="4-1-3-构造最小生成树的克鲁斯卡尔算法"   >
          <a href="#4-1-3-构造最小生成树的克鲁斯卡尔算法" class="heading-link"><i class="fas fa-link"></i></a>4.1.3 构造最小生成树的克鲁斯卡尔算法</h4>
      <p>克鲁斯卡尔（Kruskal）算法是另一种构造最小生成树的方法，这里给出该算法的思想。</p>
<ol>
<li>设G=（V,E）,令最小生成树初始状态为只有n个顶点而无边的非连通图T=（V,{}）,每个顶点自成一个连通分量</li>
<li>在E中选取代价最小的边，若该边依附的顶点落在T中不同的连通分量上，则将此边加入到T中，否则，舍去此边，选取下一条代价最小的边；</li>
<li>依次类推，重复2，直至T中所有顶点都在同意连通分量上为止。</li>
</ol>
<p><img src="https://i.loli.net/2020/03/30/jaNTJ5WruxyS4L2.png" alt="数据结构-图-用Kruskal求最小生成树-min.png"></p>

        <h4 id="4-1-4-单源最短路径"   >
          <a href="#4-1-4-单源最短路径" class="heading-link"><i class="fas fa-link"></i></a>4.1.4 单源最短路径</h4>
      <p>单源最短路径：给定一个带权有向图G=（V,E),其中每条边的权是非负实数。另外，给定V中的一个顶点，称为源。要计算从源到其他各顶点的最短路径长度。这里的长度是指路径上各边权值之和。</p>

        <h5 id="Dijkstra算法"   >
          <a href="#Dijkstra算法" class="heading-link"><i class="fas fa-link"></i></a>Dijkstra算法</h5>
      <p>Dijkstra算法（迪杰斯特拉）求单源最短路径问题的基本思想:</p>
<ul>
<li>设置顶点集合S,开始时S中只含有源点V。</li>
<li>设u是G的某一个顶点，把从1源点v到u且中间只经过S中顶点的路径称为从源到u的特殊路径，</li>
<li>并用数据dist记录当前从源点v到其他每个顶点所对应的最短特殊路径长度，</li>
<li>dist[u]的初值设置为弧&lt;v,u&gt;的权值，若弧&lt;v,u&gt;不存在，则dist[u]的初值设置为∞，或用MAX_INT表示。</li>
</ul>
<p>Dijkstra算法每次从V-S中取出具有最短特殊路径长度的顶点u，将u添加到S中，如果dist[u]+g.arcs[u][j]&lt;dist[j],则对数组dist做必要的修改，即将dist[j]的值改为dist[u]+g.arcs[u][j].这里g.arcs[u][j]表示图中弧&lt;u,j&gt;的权值。<br>当S包含了所以V中顶点，dist就记录了从源到所有其他顶点的最短路径长度，即dist[u]表示最终从源点v到顶点u的最短路径长度。</p>

        <h3 id="4-2-拓扑排序"   >
          <a href="#4-2-拓扑排序" class="heading-link"><i class="fas fa-link"></i></a>4.2 拓扑排序</h3>
      <p>在工程实践中，一个工程项目往往由若干个字项目组成，这些子项目间往往有两中关系：</p>
<ol>
<li>先后关系</li>
<li>子项目间五关系。</li>
</ol>
<p>这类问题都可以用有向图来进行描述，我们把这些子项目、零部件、课程看成是一个个顶点，把那些有前后关系的顶点用一条有向边连接。<br>现在要从这些有向图上分别找出一个施工流程图、产品生产流程图、课程学习流程图、以便顺利进行施工、产品生产和课程学习，解决这些问题可以采用拓扑排序的方法。</p>

        <h4 id="4-2-1-AOV网"   >
          <a href="#4-2-1-AOV网" class="heading-link"><i class="fas fa-link"></i></a>4.2.1 AOV网</h4>
      <p>以图中的顶点来表示活动，有向图表示活动之间的优先关系，这种用顶点表示活动的有向图称为AOV网。AOV网中的弧表示了活动之际存在着的制约关系。</p>

        <h4 id="4-2-2-拓扑排序"   >
          <a href="#4-2-2-拓扑排序" class="heading-link"><i class="fas fa-link"></i></a>4.2.2 拓扑排序</h4>
      <p>找一个有向图的一个拓扑序列的过程称之。完成拓扑排序的前提条件是AOV网中不允许出现回路。</p>
<p>下面给出有向图拓扑排序算法的基本步骤：</p>
<ol>
<li>图中选择一个入度为0的顶点，输出该顶点</li>
<li>从图中删除该顶点及其相关联的弧，调整被删弧的弧头结点的入度（入度减1）</li>
<li>重复执行1、2直到所有入度为0的顶点均被输出，拓扑排序完成，或者图中再也没有入度为0的顶点。</li>
</ol>
<p>任何一个无环有向图，其全部顶点可以拍出一个拓扑序列。</p>
<p>拓扑排序算法的时间复杂度为O（n+e）,n是图的顶点个数,e是图的弧的数目。</p>

        <h2 id="五、考核的知识点与考核要求"   >
          <a href="#五、考核的知识点与考核要求" class="heading-link"><i class="fas fa-link"></i></a>五、考核的知识点与考核要求</h2>
      
        <h3 id="5-1-图的逻辑结构、图的存储结构"   >
          <a href="#5-1-图的逻辑结构、图的存储结构" class="heading-link"><i class="fas fa-link"></i></a>5.1 图的逻辑结构、图的存储结构</h3>
      <ul>
<li>识记<ul>
<li>图的应用背景</li>
<li>图的概念</li>
<li>图的逻辑结构</li>
<li>有向图</li>
<li>无向图</li>
<li>子图</li>
<li>图的连通性</li>
<li>边（弧）的权值</li>
<li>带权图</li>
<li>生成树</li>
<li>图的存储结构</li>
</ul>
</li>
<li>邻会<ul>
<li>图的基本运算</li>
<li>图的邻接矩阵存储方式及类C语言描述</li>
<li>图的邻接表和逆邻接表存储方式及类C语言描述</li>
</ul>
</li>
<li>简单应用<ul>
<li>建立图邻接矩阵算法</li>
<li>建立图邻接表算法</li>
</ul>
</li>
</ul>

        <h3 id="5-2-图的遍历"   >
          <a href="#5-2-图的遍历" class="heading-link"><i class="fas fa-link"></i></a>5.2 图的遍历</h3>
      <ul>
<li>识记<ul>
<li>图的遍历</li>
<li>图的深度优先搜索</li>
<li>图的广度优先搜索</li>
</ul>
</li>
<li>邻会<ul>
<li>图的深度优先搜索算法</li>
<li>图的广度优先搜索算法</li>
</ul>
</li>
<li>简单应用<ul>
<li>求图的深度优先遍历的顶点序列</li>
<li>求图的广度优先遍历的顶点序列</li>
</ul>
</li>
</ul>

        <h3 id="5-3-图的应用"   >
          <a href="#5-3-图的应用" class="heading-link"><i class="fas fa-link"></i></a>5.3 图的应用</h3>
      <ul>
<li>识记<ul>
<li>最小生成树</li>
<li>单源最短路径</li>
<li>AOV网</li>
<li>拓扑排序</li>
</ul>
</li>
<li>领会<ul>
<li>求最小生成树的Prim算法</li>
<li>求最小生成树的Kruskal算法思想</li>
<li>求单源最短路径Dijkstra算法思想</li>
<li>拓扑排序算法</li>
</ul>
</li>
<li>简单应用<ul>
<li>求最小生成树</li>
<li>求从一源点到其他各顶点的最短路径</li>
<li>求给定有向图的顶点的拓扑序列</li>
</ul>
</li>
</ul>

        <h3 id="5-4-本章重点、难点"   >
          <a href="#5-4-本章重点、难点" class="heading-link"><i class="fas fa-link"></i></a>5.4 本章重点、难点</h3>
      
        <h4 id="本章重点"   >
          <a href="#本章重点" class="heading-link"><i class="fas fa-link"></i></a>本章重点</h4>
      <ul>
<li>图的邻接矩阵和邻接表两种存储结构，</li>
<li>图的深度优先和广度优先搜索算法</li>
</ul>

        <h4 id="本章难点"   >
          <a href="#本章难点" class="heading-link"><i class="fas fa-link"></i></a>本章难点</h4>
      <ul>
<li>求最小生成树的Prim算法</li>
<li>求单源最短路径算法</li>
<li>求拓扑排序算法</li>
</ul>
]]></content>
      <categories>
        <category>自考专升本</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>【英语二】阅读判断</title>
    <url>/2020/04/03/%E3%80%90%E8%8B%B1%E8%AF%AD%E4%BA%8C%E3%80%91%E9%98%85%E8%AF%BB%E5%88%A4%E6%96%AD/</url>
    <content><![CDATA[
        <h2 id="一、题型分析"   >
          <a href="#一、题型分析" class="heading-link"><i class="fas fa-link"></i></a>一、题型分析</h2>
      <ul>
<li>阅读判断+阅读选择+概括段落大意和补全句子+填句补文=40 最低要求35分</li>
<li>填词补文+完形补文 多背单词、尽量词性也背一下 最低15分</li>
<li>短文写作 最低20分</li>
</ul>

        <h2 id="二、阅读判断破题法"   >
          <a href="#二、阅读判断破题法" class="heading-link"><i class="fas fa-link"></i></a>二、阅读判断破题法</h2>
      <ul>
<li>先题后文</li>
<li>找关键词<ul>
<li>时间</li>
<li>地点</li>
<li>人物</li>
<li>难词</li>
<li>表否定的词 <ul>
<li><code>no，none，nobody，nothing，nowhere， neither， never</code></li>
<li>半否定词：<code>hardly， rarely， scarcely，seldom，little，few</code></li>
</ul>
</li>
<li>表程度的词<ul>
<li><code>fairly,pretty,rather,quite,very,much,too,greatly,almost,nearly,half,highly,awfully,deeply,partly,perfectly,really 1.程度副词表示动词,形容词或其他副词的程度,如：too(太),very(非常),much(很)</code>.</li>
</ul>
</li>
<li>大写字母的词</li>
<li>专有的词  </li>
</ul>
</li>
<li>定位段落</li>
<li>分析原文</li>
<li>得出答案</li>
</ul>
<a id="more"></a>


        <h2 id="三、阅读判断出题方向"   >
          <a href="#三、阅读判断出题方向" class="heading-link"><i class="fas fa-link"></i></a>三、阅读判断出题方向</h2>
      <ul>
<li>Ture<ul>
<li>判断推理</li>
<li>同义转换</li>
<li>完全相符</li>
</ul>
</li>
<li>False<ul>
<li>意义不同</li>
<li>范条不同</li>
</ul>
</li>
<li>Not Given<ul>
<li>主观臆断</li>
<li>无中生有</li>
</ul>
</li>
</ul>
<pre><code>![阅读判断整题占比-min.png](https://i.loli.net/2020/03/17/mF6DC9zOvU5A1Ts.png)</code></pre><ul>
<li><p>判断推理通常情况下题目在原文中是找不到完全相同的句子。完完全全找不到相似的句子。或者差不多的句子都没有。通过自己的常识与理解，把正确答案选出来。</p>
</li>
<li><p>同义转换看词汇量。</p>
</li>
<li><p>完全相符</p>
</li>
<li><p>意义不同 比较常考是否定意义的词。</p>
</li>
<li><p>范条不同 范围与条件不同。</p>
</li>
</ul>
<p>in debt 负债<br>less表现形容词的否定后缀<br>hopeless    无望<br>helpless    无助 </p>
<p>rumors  n. 谣传，流言（rumor的复数）<br>regards as  把什么看作<br>the same as  与…一致<br>improve vt. 改善，增进；提高…的价值</p>
<p>preferred to 更喜欢<br>products n. [经] 产品；商品（product的复数）<br>largely adv. 主要地；大部分；大量地<br>keep up 保持；继续；不低落；不落后</p>
<p>survive vt. 幸存；生还；幸免于；比…活得长<br>advances n. 前进（advance的复数）；预付款；求爱<br>traditional adj. 传统的；惯例的</p>

        <h2 id="四、句子成分分析"   >
          <a href="#四、句子成分分析" class="heading-link"><i class="fas fa-link"></i></a>四、句子成分分析</h2>
      <p>八种句子成分<br>  <img src="https://i.loli.net/2020/03/17/FQ9Y6uHJAbLySdk.png" alt="句子成分-min.png"></p>
<p>  谓语是最重要的句子成分</p>
<p>  一个句子只能有一个谓语动词 ,这个句子是我们的主句。</p>

        <h3 id="4-1-主语Subject-谓语Predicate-宾语Object"   >
          <a href="#4-1-主语Subject-谓语Predicate-宾语Object" class="heading-link"><i class="fas fa-link"></i></a>4.1 主语Subject/谓语Predicate/宾语Object</h3>
      <ul>
<li><code>主语</code>：指句子所说的人或物，位于句首<code>(一般动作的 发出者)</code></li>
<li><code>谓语</code>：指句中的主要动词，常位于主语后</li>
<li><code>宾语</code>：宾语有<code>直接宾语</code>和<code>间接宾语</code>两种，位于动词或介词后面。指物的叫直接宾语，指人的叫间接宾语。</li>
</ul>

        <h3 id="4-2-直接宾语vs间接宾语"   >
          <a href="#4-2-直接宾语vs间接宾语" class="heading-link"><i class="fas fa-link"></i></a>4.2 直接宾语vs间接宾语</h3>
      <p>宾语有<code>直接宾语</code>和<code>间接宾语</code>两种，位于动词或介词后面。指物的叫直接宾语，指人的叫间接宾语。</p>
<blockquote>
<p>My parents gave me <code>a present</code> on my birthday</p>
</blockquote>

        <h3 id="4-3-定语-Attribute"   >
          <a href="#4-3-定语-Attribute" class="heading-link"><i class="fas fa-link"></i></a>4.3 定语 Attribute</h3>
      <p>定语一般用来修饰<code>名词</code>或<code>代词</code>,位于被修饰词的前面或后面，意思是“…的”</p>
<blockquote>
<p>I love <code>oral</code> English. </p>
</blockquote>

        <h3 id="4-4-状语-Adverbial"   >
          <a href="#4-4-状语-Adverbial" class="heading-link"><i class="fas fa-link"></i></a>4.4 状语 Adverbial</h3>
      <p>状语一般用来修饰动词、形容词、副词、表示时间、地点、条件、原因、目的、程度、结果等</p>
<blockquote>
<p>He came <code>here</code> yesterday</p>
</blockquote>

        <h3 id="4-5-宾语补足语-Object-complement"   >
          <a href="#4-5-宾语补足语-Object-complement" class="heading-link"><i class="fas fa-link"></i></a>4.5 宾语补足语 Object complement</h3>
      <p>位于宾语后面，补充说明宾语，能和宾语在意思上构成主谓关系。</p>
<blockquote>
<p>We often heard this song <code>sung</code>. </p>
</blockquote>

        <h3 id="4-6-表语-Predicative"   >
          <a href="#4-6-表语-Predicative" class="heading-link"><i class="fas fa-link"></i></a>4.6 表语 Predicative</h3>
      <p>位于 <code>系动词</code>后面</p>
<blockquote>
<p>They are very happy</p>
</blockquote>

        <h4 id="连系动词（必背）"   >
          <a href="#连系动词（必背）" class="heading-link"><i class="fas fa-link"></i></a>连系动词（必背）</h4>
      <div class="table-container"><table>
<thead>
<tr>
<th>连系动词</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><code>状态</code>系动词</td>
<td>be-am,is,are,was,were</td>
</tr>
<tr>
<td><code>持续</code>系动词</td>
<td>keep,remain,stay,lay,stand</td>
</tr>
<tr>
<td><code>表像</code>系动词</td>
<td>seem,appear,look</td>
</tr>
<tr>
<td><code>感官</code>系动词</td>
<td>feel,smeell,sound,taste</td>
</tr>
<tr>
<td><code>变化</code>系动词</td>
<td>become,grow,turn,fall,get,go,come,run</td>
</tr>
<tr>
<td><code>终止</code>系动词</td>
<td>prove,turn,out</td>
</tr>
</tbody></table></div>

        <h3 id="4-7-同位语-Predicative"   >
          <a href="#4-7-同位语-Predicative" class="heading-link"><i class="fas fa-link"></i></a>4.7 同位语 Predicative</h3>
      <p>位于名词后面，与名词同一个内容</p>
<blockquote>
<p>We <code>students</code> must study hard</p>
</blockquote>
<p><img src="https://i.loli.net/2020/03/23/6pfzGUsHJd14ZrM.png" alt="英语二-按句子结构划分的简单句-min.png"></p>
]]></content>
      <categories>
        <category>自考专升本</category>
      </categories>
      <tags>
        <tag>英语二</tag>
      </tags>
  </entry>
  <entry>
    <title>【英语二】阅读选择</title>
    <url>/2020/04/03/%E3%80%90%E8%8B%B1%E8%AF%AD%E4%BA%8C%E3%80%91%E9%98%85%E8%AF%BB%E9%80%89%E6%8B%A9/</url>
    <content><![CDATA[
        <h2 id="阅读选择破题法"   >
          <a href="#阅读选择破题法" class="heading-link"><i class="fas fa-link"></i></a>阅读选择破题法</h2>
      <ul>
<li>先题后文</li>
<li>浏览选项</li>
<li>找关键词</li>
<li>定位段落</li>
<li>分析原文</li>
<li>得出答案</li>
</ul>

        <h2 id="阅读选择出题方向"   >
          <a href="#阅读选择出题方向" class="heading-link"><i class="fas fa-link"></i></a>阅读选择出题方向</h2>
      <ul>
<li>事实细节题（看到什么选什么）</li>
<li>推理判断题</li>
<li>主旨大意题（大部分在首段或者尾段）</li>
<li>词义理解题</li>
<li>观点态度题（比较少出，但学位英语有出现）</li>
</ul>
<p><img src="https://i.loli.net/2020/03/24/Q8URO6LJCq4FE9n.png" alt="英语二-阅读选择-真题占比-min.png"></p>
<a id="more"></a>

<p>over half 超过一半<br>professionals 专家<br>blue-collar workers 蓝领工作者<br>motorcyclists   n. 骑摩托车的人；乘机车者<br>film n. 电影；薄膜；胶卷；轻烟</p>
<p>myths 神话<br>special flavor  特殊的味道</p>

        <h2 id="时态（一）"   >
          <a href="#时态（一）" class="heading-link"><i class="fas fa-link"></i></a>时态（一）</h2>
      
        <h3 id="一、动词的基本形式"   >
          <a href="#一、动词的基本形式" class="heading-link"><i class="fas fa-link"></i></a>一、动词的基本形式</h3>
      <ul>
<li>动词原形—&gt;第三人称的动词</li>
<li>动词过去式</li>
<li>动词过去分词</li>
<li>动词现在分词—&gt;ing </li>
</ul>

        <h3 id="二、英语的16种时态"   >
          <a href="#二、英语的16种时态" class="heading-link"><i class="fas fa-link"></i></a>二、英语的16种时态</h3>
      <div class="table-container"><table>
<thead>
<tr>
<th></th>
<th>一般时</th>
<th>进行时</th>
<th>完成时</th>
<th>完成进行时</th>
</tr>
</thead>
<tbody><tr>
<td>过去</td>
<td>did</td>
<td>were/was doing</td>
<td>had done</td>
<td>had been doing</td>
</tr>
<tr>
<td>现在</td>
<td>do/does</td>
<td>am/is/are doing</td>
<td>have/has done</td>
<td>have/has been doing</td>
</tr>
<tr>
<td>将来</td>
<td>will/shall do</td>
<td>will be doing</td>
<td>will have done</td>
<td>will have been doing</td>
</tr>
<tr>
<td>过去将来</td>
<td>would</td>
<td>would be doing</td>
<td>would have done</td>
<td>would have been doing</td>
</tr>
</tbody></table></div>
<p><strong>英语二考试重点时态如下</strong></p>
<div class="table-container"><table>
<thead>
<tr>
<th></th>
<th>一般时</th>
<th>进行时</th>
<th>完成时</th>
</tr>
</thead>
<tbody><tr>
<td>过去</td>
<td>did</td>
<td>were/was doing</td>
<td>had done</td>
</tr>
<tr>
<td>现在</td>
<td>do/does</td>
<td>am/is/are doing</td>
<td>have/has done</td>
</tr>
<tr>
<td>将来</td>
<td>will/shall do</td>
<td>will be doing</td>
<td>will have done</td>
</tr>
</tbody></table></div>

        <h3 id="三、一般现在时"   >
          <a href="#三、一般现在时" class="heading-link"><i class="fas fa-link"></i></a>三、一般现在时</h3>
      <p>一般现在时的句子结构</p>

        <h4 id="3-1-当句子表状态（be动词），说明主语是什么或怎么样时，其句型"   >
          <a href="#3-1-当句子表状态（be动词），说明主语是什么或怎么样时，其句型" class="heading-link"><i class="fas fa-link"></i></a>3.1 当句子表状态（be动词），说明主语是什么或怎么样时，其句型:</h4>
      <ul>
<li>肯定句式:主语+be动词（<code>am/is/are</code>）+ 表语<ul>
<li>The twin sisters are from America</li>
</ul>
</li>
<li>否定句式:主语+be动词（<code>am/is/are</code>）+<code>not</code>+ 表语<ul>
<li>The twin sisters are not from America</li>
</ul>
</li>
<li>疑问句式:be动词(<code>am/is/are</code>)+主语+表语？（一般疑问句）<ul>
<li>Are the twin sisters from America？</li>
</ul>
</li>
</ul>

        <h4 id="3-2-当谓语由实义动词充当时，其句型"   >
          <a href="#3-2-当谓语由实义动词充当时，其句型" class="heading-link"><i class="fas fa-link"></i></a>3.2 当谓语由实义动词充当时，其句型:</h4>
      <ul>
<li><p>肯定句式:主语+动词原形/<code>(-s/-es)</code>+其他成分</p>
<blockquote>
<p>We<code>/He/She</code> speak<code>(s)</code> Chinese</p>
</blockquote>
</li>
<li><p>否定句式:主语+don’t/<code>doesn&#39;t</code>+动词原形+其他成分</p>
<blockquote>
<p>They don’t/<code>He/She doesn&#39;t</code> speak Chinese</p>
</blockquote>
</li>
<li><p>疑问句式: DO/<code>Does</code>+主语+动词原形+其他成分？</p>
<blockquote>
<p>Do you/<code>Does he/she</code> speak Chinese?</p>
</blockquote>
</li>
<li><p>肯定回答:Yes,I do/Yes,<code>he/she does</code></p>
</li>
<li><p>否定回答:No, I don’t /NO,<code>he/she doesn&#39;t</code></p>
</li>
</ul>
<p><img src="https://i.loli.net/2020/03/25/kizOBaVqWTrgsQH.png" alt="英语二-阅读选择-第三人称单数动词变化-min.png"></p>

        <h4 id="3-3-一般现在时的用法"   >
          <a href="#3-3-一般现在时的用法" class="heading-link"><i class="fas fa-link"></i></a>3.3 一般现在时的用法</h4>
      <ul>
<li>表示习惯性、现在反复出现的动作或状态、也可以表示一般真理。常与often，usually，every day，always，sometimes，in the morning, once a week 等时间状语连用。</li>
</ul>
<blockquote>
<p>The sun rises in the east and sets in the west every day （真理）<br>He is very happy （现在的状态）<br>He goes to school every day （经常性动作）</p>
</blockquote>
<p>once a week 一周一次</p>
<ul>
<li><p>表示按计划、规定要发生的动作（句中带有时间状语）,但限于少数动词，</p>
<p>如begin, come, leave, go, arrive, start, stop, return, open, close等等。</p>
</li>
</ul>
<blockquote>
<p>The next train leaves at 3 o’clock this afternoon<br>The show begins at seven and ends at ten.</p>
</blockquote>

        <h4 id="3-4-注意"   >
          <a href="#3-4-注意" class="heading-link"><i class="fas fa-link"></i></a>3.4 注意</h4>
      
        <h5 id="3-4-1-在时间状语从句中和条件状语从句中，用一般现在时表示将来。"   >
          <a href="#3-4-1-在时间状语从句中和条件状语从句中，用一般现在时表示将来。" class="heading-link"><i class="fas fa-link"></i></a>3.4.1 在时间状语从句中和条件状语从句中，用一般现在时表示将来。</h5>
      <p>主将从现原则</p>
<blockquote>
<p>When I graduate,I’ll go to the countryside<br>If you come this afternoon, we’ll have a meethig.</p>
</blockquote>

        <h5 id="3-4-2-在no-matter-what-who-where-whatever-whoever-wherever等引导的从句中，也用一般现在时表示将来"   >
          <a href="#3-4-2-在no-matter-what-who-where-whatever-whoever-wherever等引导的从句中，也用一般现在时表示将来" class="heading-link"><i class="fas fa-link"></i></a>3.4.2 在no matter what/who/where,whatever,whoever,wherever等引导的从句中，也用一般现在时表示将来</h5>
      <blockquote>
<p>Wherever I go,I will never forget this happy moment.</p>
</blockquote>

        <h5 id="3-4-3-表示状态和感觉的动词（如be-like-hate-think-remember-find-sound-等常用一般现在时，不用现在进行时）"   >
          <a href="#3-4-3-表示状态和感觉的动词（如be-like-hate-think-remember-find-sound-等常用一般现在时，不用现在进行时）" class="heading-link"><i class="fas fa-link"></i></a>3.4.3 表示状态和感觉的动词（如be,like,hate,think,remember,find,sound 等常用一般现在时，不用现在进行时）</h5>
      <blockquote>
<p>The story sounds very interesting<br>I like English very much </p>
</blockquote>

        <h5 id="3-4-4-书报的标题、小说等的情节介绍常用一般现在时"   >
          <a href="#3-4-4-书报的标题、小说等的情节介绍常用一般现在时" class="heading-link"><i class="fas fa-link"></i></a>3.4.4 书报的标题、小说等的情节介绍常用一般现在时</h5>
      <blockquote>
<p>Mathilde works hard for ten years and at last pays off all her debts One day she meets jeanne at the park.</p>
</blockquote>

        <h3 id="四、一般过去时"   >
          <a href="#四、一般过去时" class="heading-link"><i class="fas fa-link"></i></a>四、一般过去时</h3>
      <p>一般过去时的句子结构</p>

        <h4 id="4-1-当句子表状态，说明主语是什么或怎么样式，其句型"   >
          <a href="#4-1-当句子表状态，说明主语是什么或怎么样式，其句型" class="heading-link"><i class="fas fa-link"></i></a>4.1 当句子表状态，说明主语是什么或怎么样式，其句型</h4>
      <ul>
<li><p>肯定句式: 主语+be动词（<code>was/were</code>）+ 表语</p>
<blockquote>
<p>I/He/She was a student</p>
</blockquote>
</li>
<li><p>否定句式:主语+be动词(<code>was/were</code>)+<code>not</code>+表语</p>
<blockquote>
<p>I/He/She was not a student</p>
</blockquote>
</li>
<li><p>疑问句式:be动词（<code>was/were</code>）+主语+表语？</p>
<blockquote>
<p>Was he/she/<code>Were you</code> a student?</p>
</blockquote>
</li>
</ul>

        <h4 id="4-2-当谓语由实义动词充当时，其句型"   >
          <a href="#4-2-当谓语由实义动词充当时，其句型" class="heading-link"><i class="fas fa-link"></i></a>4.2 当谓语由实义动词充当时，其句型:</h4>
      <ul>
<li><p>肯定句式:主语+动词过去式+其他成分</p>
<blockquote>
<p>She often came to help us in those days</p>
</blockquote>
</li>
<li><p>否定句式:主语+didn’t +动词原形+其他成分</p>
<blockquote>
<p>I did’t know you like coffee</p>
</blockquote>
</li>
<li><p>疑问句式: Did + 主语+动词原形+其他成分？</p>
<blockquote>
<p>Did I do homework?</p>
</blockquote>
</li>
<li><p>肯定回答:Yes, you did</p>
</li>
<li><p>否定回答:No, you didn’t</p>
</li>
</ul>
<p><img src="https://i.loli.net/2020/03/25/z9xjk3oEXqUCJpM.png" alt="英语二-阅读选择-动词过去式变化规则-min.png"></p>

        <h3 id="4-3-一般过去时的用法"   >
          <a href="#4-3-一般过去时的用法" class="heading-link"><i class="fas fa-link"></i></a>4.3 一般过去时的用法</h3>
      
        <h4 id="4-3-1-表示过去某时发生的动作或存在的状态"   >
          <a href="#4-3-1-表示过去某时发生的动作或存在的状态" class="heading-link"><i class="fas fa-link"></i></a>4.3.1 表示过去某时发生的动作或存在的状态</h4>
      <blockquote>
<p>He worked in a factory in 1986<br>He saw Mr.Wang yesterday</p>
</blockquote>

        <h4 id="4-3-2-表示过去经常发生的动作，也可用used-to-would-动词原形"   >
          <a href="#4-3-2-表示过去经常发生的动作，也可用used-to-would-动词原形" class="heading-link"><i class="fas fa-link"></i></a>4.3.2 表示过去经常发生的动作，也可用used to/would + 动词原形</h4>
      <blockquote>
<p>During the vacation I would swim in the sea<br>I used to take a walk in the morning </p>
</blockquote>

        <h4 id="4-3-3-用于虚拟语气中，表示现在或将来的动作或状态"   >
          <a href="#4-3-3-用于虚拟语气中，表示现在或将来的动作或状态" class="heading-link"><i class="fas fa-link"></i></a>4.3.3 用于虚拟语气中，表示现在或将来的动作或状态</h4>
      <blockquote>
<p>If I were you, I would leave as soon as possible</p>
</blockquote>

        <h3 id="五、一般将来时"   >
          <a href="#五、一般将来时" class="heading-link"><i class="fas fa-link"></i></a>五、一般将来时</h3>
      <p>一般将来时表示即将发生的动作或存在的状态。</p>

        <h4 id="5-1-will-shall-动词原形"   >
          <a href="#5-1-will-shall-动词原形" class="heading-link"><i class="fas fa-link"></i></a>5.1 will/shall + 动词原形</h4>
      <p>此结果指按<code>计划</code>将要发生的动作，也可值说话人的<code>预测</code>或临时决定，也可以指事物<code>固有的属性</code>或<code>必然的趋势</code></p>
<blockquote>
<p>We will (shall) go to the park next Sunday( 计划)<br>It will sunny tomorrow,I suppose（纯粹预测）<br>Fish will die without water.（固有属性）</p>
</blockquote>

        <h4 id="5-2-will-shall-动词原形（do）"   >
          <a href="#5-2-will-shall-动词原形（do）" class="heading-link"><i class="fas fa-link"></i></a>5.2 will/shall + 动词原形（do）</h4>
      <p>次结构在<code>疑问句</code>中常表示<code>请求</code></p>
<blockquote>
<p>Shall I get you a cup of coffee?<br>Where shall we keep the piano?</p>
</blockquote>

        <h4 id="5-3-be-going-to-动词原形（do）"   >
          <a href="#5-3-be-going-to-动词原形（do）" class="heading-link"><i class="fas fa-link"></i></a>5.3 be going to + 动词原形（do）</h4>
      <p> 此结果主要用于口语，表示<code>打算或准备要做的事</code>，或现在<code>已有迹象</code>显示<code>几乎肯定发生的事</code></p>
<blockquote>
<p>We are going to a meeting tomorrow afternoon<br>Look at the dark clouds. I think it is going to rain</p>
</blockquote>

        <h4 id="5-4-be-to-动词原形（do）"   >
          <a href="#5-4-be-to-动词原形（do）" class="heading-link"><i class="fas fa-link"></i></a>5.4 be to + 动词原形（do）</h4>
      <p>此结构表示<code>已经安排好</code>将要发生的动作，或表示<code>义务，命令，要求</code>等。语气比较庄重正式</p>
<blockquote>
<p>The boy is to go to school tomorrow.<br>You are to finish your homework before you watch TV.</p>
</blockquote>

        <h4 id="5-5-be-about-to-动词原形（do）"   >
          <a href="#5-5-be-about-to-动词原形（do）" class="heading-link"><i class="fas fa-link"></i></a>5.5 be about to + 动词原形（do）</h4>
      <p>此结果意为”<code>正要</code>“,”<code>马上就要</code>“，表示在<code>很短时间内</code>即将发生，后面<code>一般跟时间状语</code></p>
<blockquote>
<p>We are about to leave<br>Don’t go out now.We are about to have lunch.</p>
</blockquote>
<p>be about to … when 当…时正要做</p>
<blockquote>
<p>The talk was about to begin when the accident happened.</p>
</blockquote>

        <h4 id="5-6-注意"   >
          <a href="#5-6-注意" class="heading-link"><i class="fas fa-link"></i></a>5.6 注意</h4>
      
        <h5 id="5-6-1-go-come-start-move-sail-leave-arrive-stay等动词可用进行时表示计划即将发生的动作。"   >
          <a href="#5-6-1-go-come-start-move-sail-leave-arrive-stay等动词可用进行时表示计划即将发生的动作。" class="heading-link"><i class="fas fa-link"></i></a>5.6.1 go,come,start,move,sail,leave,arrive,stay等动词可用进行时表示计划即将发生的动作。</h5>
      <blockquote>
<p>I’m leaving for Beijing.</p>
</blockquote>

        <h5 id="5-6-2-go-come-start-move-sail-leave-arrive-stay等动词的一般现在时可表示将来。"   >
          <a href="#5-6-2-go-come-start-move-sail-leave-arrive-stay等动词的一般现在时可表示将来。" class="heading-link"><i class="fas fa-link"></i></a>5.6.2 go,come,start,move,sail,leave,arrive,stay等动词的一般现在时可表示将来。</h5>
      <blockquote>
<p>He gets off at the  next stop<br>The meeting starts at five o’clock. </p>
</blockquote>

        <h3 id="七、-现在进行时"   >
          <a href="#七、-现在进行时" class="heading-link"><i class="fas fa-link"></i></a>七、 现在进行时</h3>
      <p>现在进行时的用法</p>

        <h4 id="7-1-表示现在或当前这段时间正在发生的动作"   >
          <a href="#7-1-表示现在或当前这段时间正在发生的动作" class="heading-link"><i class="fas fa-link"></i></a>7.1 表示现在或当前这段时间正在发生的动作</h4>
      <blockquote>
<p>He is talking to some foreign guests.</p>
</blockquote>

        <h4 id="7-2-表示按计划将要发生的动作"   >
          <a href="#7-2-表示按计划将要发生的动作" class="heading-link"><i class="fas fa-link"></i></a>7.2 表示按计划将要发生的动作</h4>
      <blockquote>
<p>The Smiths <code>are coming</code> to dinner this weekend</p>
</blockquote>
<p>现在进行时的构成<br>am/is/are + 现在分词（v+ing）</p>
<p><img src="https://i.loli.net/2020/03/28/bnDRf8KTPNvwo7H.png" alt="英语二+现在分词变化规则-min.png"></p>

        <h4 id="7-3-注意"   >
          <a href="#7-3-注意" class="heading-link"><i class="fas fa-link"></i></a>7.3 注意</h4>
      <p>与always, forever, all the time, still等连用，表示赞赏、埋怨或厌恶等<code>感情色彩而非正在进行</code></p>
<blockquote>
<p>He is always helping others.<br>Mrs.Peter is always carrying an umbrella</p>
</blockquote>

        <h3 id="八、现在进行时-VS-一般现在时"   >
          <a href="#八、现在进行时-VS-一般现在时" class="heading-link"><i class="fas fa-link"></i></a>八、现在进行时 VS 一般现在时</h3>
      <p>现在进行时与一般现在时都可作表示现在阶段的动作，现在进行时侧重现阶段延续性动作，一般现在时主要是陈述事实</p>
<blockquote>
<p>They are studying English at a university<br>They study English at a university</p>
</blockquote>
]]></content>
      <categories>
        <category>自考专升本</category>
      </categories>
      <tags>
        <tag>英语二</tag>
      </tags>
  </entry>
  <entry>
    <title>【英语单词】第1大区-关于state</title>
    <url>/2020/04/03/%E3%80%90%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D%E3%80%91%E7%AC%AC1%E5%A4%A7%E5%8C%BA-%E5%85%B3%E4%BA%8Estate/</url>
    <content><![CDATA[
        <h2 id="1-state"   >
          <a href="#1-state" class="heading-link"><i class="fas fa-link"></i></a>1. state</h2>
      <p>由state引出的陈述、表达等等意思的单词，虽然state还是情形、状况的意思</p>
<ul>
<li>v.(尤指清楚谨慎地）声称，宣称声明</li>
<li>n.政府，国家，州<code>（指州的情况多一点）</code>，状态，情况</li>
<li>agj.国有的，国家的<ul>
<li><code>例：国有资产：state-owned</code></li>
<li><code>例：国有企业：state-owned enterprise</code></li>
</ul>
</li>
</ul>
<p><code>例子：He stated that &quot;all hell will break loose, politically and morally ,all over the world&quot;</code></p>
<p>break loose 打开<br>permit v. 允许<br>statement n. </p>
<p><code>Happiness is a state of mind , and  depends very little on outward circumstance幸福是一种心理状况它很少依靠外面的状况，所以可以翻译成幸福是内因不是外因。</code></p>
<a id="more"></a>


        <h3 id="1-1-拓展词汇"   >
          <a href="#1-1-拓展词汇" class="heading-link"><i class="fas fa-link"></i></a>1.1 拓展词汇</h3>
      
        <h4 id="understate"   >
          <a href="#understate" class="heading-link"><i class="fas fa-link"></i></a>understate</h4>
      <ul>
<li>v. <ul>
<li>轻描淡写地叙述;</li>
<li>淡化[某事的重要性或严重性]，表述不充分。</li>
</ul>
</li>
</ul>

        <h4 id="overstate"   >
          <a href="#overstate" class="heading-link"><i class="fas fa-link"></i></a>overstate</h4>
      <p>v. 把….讲得过分；夸大夸张（=exaggerate）<br> ex = e = out（往外放的意思)</p>

        <h3 id="1-2-拓展例句"   >
          <a href="#1-2-拓展例句" class="heading-link"><i class="fas fa-link"></i></a>1.2 拓展例句</h3>
      <p><code>Despite the breathtakingly sad opening chapters,Tyler&#39;s delicate perceptiveness gives the novel an understated warmth</code></p>
<p>breathtakingly<br>delicate 精致，delicacy 林妹妹<br>副词一般就是very的意思，除了herdly/bavely == not这些改变词意的副词</p>

        <h3 id="1-3-近义词"   >
          <a href="#1-3-近义词" class="heading-link"><i class="fas fa-link"></i></a>1.3 近义词</h3>
      <p>v. 声明，宣称，声明</p>

        <h2 id="2-declare"   >
          <a href="#2-declare" class="heading-link"><i class="fas fa-link"></i></a>2 declare</h2>
      <ul>
<li>v.<ul>
<li>公布，宣布；</li>
<li>宣称（…为事实），表明（态度、意图等）；</li>
<li>申报（应纳税物品、收入等）</li>
</ul>
</li>
</ul>
<p><code>&quot;Play is not frivolous(轻浮的、肤浅),&quot;the academy&#39;s report declares</code></p>
<p>Work hard ,Play harder</p>
<p>role model 榜样<br>frivolity 轻浮<br>jury 陪审团</p>

        <h3 id="2-1-派生"   >
          <a href="#2-1-派生" class="heading-link"><i class="fas fa-link"></i></a>2.1 派生</h3>
      <pre><code>declaration
declarative</code></pre><blockquote>
<p><code>I declare after all there is no enjoyment like reading</code><br>我认为没有什么比读书更能让我愉悦的。<br>    —-pride and prejudice ,Jane Austen 简。奥斯丁《傲慢与偏见》<br>Begin Again</p>
</blockquote>

        <h3 id="3-claim"   >
          <a href="#3-claim" class="heading-link"><i class="fas fa-link"></i></a>3 claim</h3>
      <ul>
<li>v.<ul>
<li>自称，声称，断言（未经证明或可能崔欧文的是）</li>
<li>要求（拥有），认领；</li>
<li>索取，索款；</li>
<li>（战争、事故等）夺取（生命）</li>
</ul>
</li>
<li>n.<ul>
<li>声称，说法；</li>
<li>（根据权利而提出的）要求，索赔；</li>
<li>（对某事物的）权利，所有权</li>
</ul>
</li>
</ul>

        <h4 id="3-1-释义推导"   >
          <a href="#3-1-释义推导" class="heading-link"><i class="fas fa-link"></i></a>3.1 释义推导</h4>
      <p>索取，索款<br>-&gt; 要求拿回某物，要求拥有某物<br>-&gt; 拥有某事物的所有权</p>
<p>（战争、事故等）夺取（生命）<br>-&gt; 战争等要求拥有某人的生命</p>

        <h4 id="3-2-考点："   >
          <a href="#3-2-考点：" class="heading-link"><i class="fas fa-link"></i></a>3.2 考点：</h4>
      <p><code>despite some claims to the contrary（相反地） 尽管有人说的与这个地方相反=== 尽管有人说话不一样</code></p>
<p>by contrast 相反地<br>in contrast to 和…相反</p>
<p>contra 是相反的词根</p>
<p>counter 对抗  </p>
<p>元音替换 意思不变<br>发音相近 意思也相近</p>
<p>center<br>centric<br>eccentric 古怪的</p>
<p><code>They claim that the theory of video game violence is built on rotten foundations</code></p>
<p>be built on 建立在</p>
<p>rotten<br>rod 木棒<br>erode 腐蚀 外面<br>erosion 腐蚀</p>
<p>corrode 腐蚀  接蚀<br>corrsion</p>

        <h4 id="3-2-派生-claimant"   >
          <a href="#3-2-派生-claimant" class="heading-link"><i class="fas fa-link"></i></a>3.2 派生 claimant</h4>
      <blockquote>
<p>Love does not claim possession ,but gives freedom<br>爱不宣告拥有，而在于给与自由<br>泰戈尔</p>
</blockquote>

        <h2 id="4-proclaim"   >
          <a href="#4-proclaim" class="heading-link"><i class="fas fa-link"></i></a>4 proclaim</h2>
      <ul>
<li>v<ul>
<li>(正式)宣告，声明；</li>
<li>表明，明确显示</li>
</ul>
</li>
</ul>
<p><code>Correlations which confidently proclaimed that gaming led to violent behavior were shown top likely be the spurious by-product of factors such as family violence. 说戏会导致暴力的这种相关性其实可能只是家暴等因素的副产品</code></p>
<p>gaming 玩游戏<br>pro 词根前缀代表向前、在前、提前</p>
<p>spurious 令人质疑的</p>

        <h3 id="5-pronounce"   >
          <a href="#5-pronounce" class="heading-link"><i class="fas fa-link"></i></a>5 pronounce</h3>
      <ul>
<li>v. <ul>
<li>发音、读音 ；</li>
<li>正式宣布（或公布）</li>
</ul>
</li>
</ul>

        <h4 id="5-1-派生"   >
          <a href="#5-1-派生" class="heading-link"><i class="fas fa-link"></i></a>5.1 派生</h4>
      <p>pronunciation 发音<br>pronouncement 宣布、宣告</p>

        <h4 id="5-2-拓展词汇"   >
          <a href="#5-2-拓展词汇" class="heading-link"><i class="fas fa-link"></i></a>5.2 拓展词汇</h4>
      <ul>
<li>enounce v 声明</li>
<li>enunciate v（清晰仔细地）发（音）；念（字）；（清楚准确地）阐明，阐述</li>
<li>articulate <ul>
<li>口齿清楚地讲（话）；清晰发（音）；清楚地表达</li>
<li>adj 能说会道的；（文章、讲话）明晰的，清楚的</li>
</ul>
</li>
</ul>
<p>art最早的词根意思是技能<br>artisan 工匠（艺术）<br>artisanship 工匠精神<br>craftsman 工匠（制造业）</p>

        <h2 id="6-announce"   >
          <a href="#6-announce" class="heading-link"><i class="fas fa-link"></i></a>6 announce</h2>
      <ul>
<li>v <ul>
<li>宣布，宣告； </li>
<li>通知，告知；郑重地说</li>
</ul>
</li>
</ul>
<p>announcer 播报员</p>
<p><code>Last month,Facebook announced partnerships with outside groups to help factcheck stories on its site and to more clearly denote which ones may be false</code></p>
<p>partnerships 合作关系<br>check 审查<br>denote 指出<br>false product 假冒产品<br>copycat product 山寨产品<br>copycat cellphone 山寨手机</p>

        <h2 id="7-assert"   >
          <a href="#7-assert" class="heading-link"><i class="fas fa-link"></i></a>7 assert</h2>
      <ul>
<li>v <ul>
<li>（肯定地）断言，坚称；</li>
<li>维护（权利或权威）；</li>
<li>坚持（主张）</li>
</ul>
</li>
</ul>
<p>certainty 确定性、当然性</p>
<p><code>the administration was in essence asserting that ...</code></p>
<p>in essence 本质上、实质上</p>

        <h2 id="7-1-派生"   >
          <a href="#7-1-派生" class="heading-link"><i class="fas fa-link"></i></a>7.1 派生</h2>
      <p>assertion<br>assertive<br>in essence :本质上、实质上</p>

        <h2 id="8-affirm"   >
          <a href="#8-affirm" class="heading-link"><i class="fas fa-link"></i></a>8 affirm</h2>
      <p>v.肯定属实，申明，断言<br><code>to affirm the importance of the humanities and social sciences</code></p>

        <h3 id="8-1-派生"   >
          <a href="#8-1-派生" class="heading-link"><i class="fas fa-link"></i></a>8.1 派生</h3>
      <p>affirmative<br>affirmation </p>

        <h2 id="9-allege"   >
          <a href="#9-allege" class="heading-link"><i class="fas fa-link"></i></a>9 allege</h2>
      <p> v.（未提出证据）断言，声称</p>

        <h3 id="9-1-派生-allegation"   >
          <a href="#9-1-派生-allegation" class="heading-link"><i class="fas fa-link"></i></a>9.1 派生 allegation</h3>
      <p>alleged adj.声称的；被断言的；涉嫌的；<br>allegiance  === loyalty 忠诚<br>fidelity 忠贞 </p>

        <h3 id="9-2-拓展词组"   >
          <a href="#9-2-拓展词组" class="heading-link"><i class="fas fa-link"></i></a>9.2 拓展词组</h3>
      <p>so-called  adj. 所谓的；号称的<br>supposed adj. 据说的，所谓得</p>
<p>should == be supposed to 应该<br>what is that supposed to be</p>

        <h2 id="n-状态，情况"   >
          <a href="#n-状态，情况" class="heading-link"><i class="fas fa-link"></i></a>n. 状态，情况</h2>
      
        <h2 id="10-condition"   >
          <a href="#10-condition" class="heading-link"><i class="fas fa-link"></i></a>10 condition</h2>
      <ul>
<li>n. <ul>
<li>状况，状态；</li>
<li>处境；</li>
<li>条件，条款；</li>
<li>前提；疾病；健康状况；</li>
<li>[~s]环境，条件。</li>
</ul>
</li>
<li>v.<ul>
<li>使习惯于，使适应；</li>
<li>养护（头发的）</li>
</ul>
</li>
</ul>
<p><code>geographic conditions peculiar to America</code></p>
<p><code>weather conditions</code></p>
<p>geo 地理的词根</p>

        <h3 id="10-1-派生"   >
          <a href="#10-1-派生" class="heading-link"><i class="fas fa-link"></i></a>10.1 派生</h3>
      <p>conditional 有条件的<br>conditioner 名词  </p>

        <h3 id="10-2扩展"   >
          <a href="#10-2扩展" class="heading-link"><i class="fas fa-link"></i></a>10.2扩展</h3>
      <p>hair conditioner 护发素<br>lotion 护理液/洗手液<br>bath wash 沐浴液<br>shampoo 洗发水</p>

        <h3 id="10-3-扩展词组"   >
          <a href="#10-3-扩展词组" class="heading-link"><i class="fas fa-link"></i></a>10.3 扩展词组</h3>
      <p>air conditioning 空调</p>

        <h2 id="11-situation"   >
          <a href="#11-situation" class="heading-link"><i class="fas fa-link"></i></a>11 situation</h2>
      <ul>
<li>n.<ul>
<li>形势，情况，局面；</li>
<li>所处位置，环境</li>
</ul>
</li>
</ul>

        <h4 id="11-1-拓展表达"   >
          <a href="#11-1-拓展表达" class="heading-link"><i class="fas fa-link"></i></a>11.1 拓展表达</h4>
      <p>create a situation 造成局面<br>assess/review a situation 评判局势，分析局势<br>deal with a situation 应对局面<br>cope with 应对局面</p>
<p>assessment 审核<br>review 判定/评论</p>
]]></content>
      <categories>
        <category>英语学习</category>
      </categories>
      <tags>
        <tag>英语单词</tag>
      </tags>
  </entry>
  <entry>
    <title>【英语单词】第2大区-关于change</title>
    <url>/2020/04/03/%E3%80%90%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D%E3%80%91%E7%AC%AC2%E5%A4%A7%E5%8C%BA-%E5%85%B3%E4%BA%8Echange/</url>
    <content><![CDATA[
        <h2 id="一、-change"   >
          <a href="#一、-change" class="heading-link"><i class="fas fa-link"></i></a>一、 change</h2>
      <ul>
<li>v.<ul>
<li>改变，更改</li>
<li>转换，更换，替换</li>
<li>兑换</li>
<li>换乘</li>
</ul>
</li>
<li>n.<ul>
<li>变化，变更，变革</li>
<li>硬币，零钱<code>(当change做名词的时候，特别注意零钱的这个意思)</code></li>
</ul>
</li>
</ul>

        <h3 id="1-1-考点"   >
          <a href="#1-1-考点" class="heading-link"><i class="fas fa-link"></i></a>1.1 考点</h3>
      <p> <code>climate change</code>气候变化</p>
<a id="more"></a>


        <h3 id="1-2-拓展词汇"   >
          <a href="#1-2-拓展词汇" class="heading-link"><i class="fas fa-link"></i></a>1.2 拓展词汇</h3>
      <p> exchange</p>
<ul>
<li>v<ul>
<li>交换；</li>
<li>[货币的]兑换  <code>exchange rate 汇率</code></li>
<li>交流</li>
<li>互访</li>
</ul>
</li>
<li>n<ul>
<li>短暂的交谈</li>
<li>交流，互访 </li>
</ul>
</li>
</ul>
<pre><code>ex 拿到外面的意思</code></pre>
        <h2 id="近义词-v-改变，更改"   >
          <a href="#近义词-v-改变，更改" class="heading-link"><i class="fas fa-link"></i></a>近义词 v. 改变，更改</h2>
      
        <h2 id="二、-move"   >
          <a href="#二、-move" class="heading-link"><i class="fas fa-link"></i></a>二、 move</h2>
      <ul>
<li>v <ul>
<li>（使）移动；</li>
<li>改变；</li>
<li>采取行动；</li>
<li>搬家</li>
<li>影响</li>
<li>感动 <code>注意这个用法</code></li>
<li>动议，提议</li>
</ul>
</li>
<li>n <code>考试常考</code><ul>
<li>移动</li>
<li>改变</li>
<li>步骤</li>
<li>行动，举措 </li>
</ul>
</li>
</ul>

        <h3 id="2-1-考点"   >
          <a href="#2-1-考点" class="heading-link"><i class="fas fa-link"></i></a>2.1 考点</h3>
      <p><code>to back(动词，支持支撑) such radical moves(极端行为)</code>支持这种极端行为</p>
<p><code>backer === supporter === spoasor</code> 幕后大佬</p>

        <h3 id="2-2-派生"   >
          <a href="#2-2-派生" class="heading-link"><i class="fas fa-link"></i></a>2.2 派生</h3>
      <p>movement 行动</p>

        <h3 id="2-3-拓展"   >
          <a href="#2-3-拓展" class="heading-link"><i class="fas fa-link"></i></a>2.3 拓展</h3>
      <p><code>Who Moved My cheese?《谁动了我的奶酪？》</code></p>
<blockquote>
<p>“Sometimes your whole life boils down to one insane move”你被逼至绝路时，难免会有疯狂举动</p>
</blockquote>
<p>boils down to 归根结底<br>insane 疯狂<br>sane    a 冷静的、清醒的<br>sanity n 冷静<br>insanity    疯狂</p>

        <h2 id="三、-shift"   >
          <a href="#三、-shift" class="heading-link"><i class="fas fa-link"></i></a>三、 shift</h2>
      <ul>
<li>v<ul>
<li>转移，移动</li>
<li>转移（注意力等）</li>
<li>转变，改变（意见等）</li>
<li>推卸</li>
</ul>
</li>
<li>n<ul>
<li>转变</li>
<li>轮班 </li>
<li>轮班职工</li>
</ul>
</li>
</ul>
<p>features 特点<br>away from 远离<br>凡是出现短语，前面的动词不太重要，主要看介词。</p>
<p><code>把注意力引到什么什么地方 draw interest away into</code></p>
<p>lay off 下岗失业<br>be laid off 被解雇<br>off 离开<br>catch on 掌控流行起来<br>back to<br>division 部门<br>divide 划分</p>

        <h2 id="四、-switch"   >
          <a href="#四、-switch" class="heading-link"><i class="fas fa-link"></i></a>四、 switch</h2>
      <ul>
<li><p>v </p>
<ul>
<li>打开，关闭</li>
<li>改变，转变</li>
<li>转换（职业，政策、生活方式等）</li>
<li>交换</li>
</ul>
</li>
<li><p>n.</p>
<ul>
<li><p>开关</p>
</li>
<li><p>彻底改变</p>
<p>switch A into B<br>turn A into B</p>
</li>
</ul>
</li>
</ul>

        <h3 id="4-1-考点："   >
          <a href="#4-1-考点：" class="heading-link"><i class="fas fa-link"></i></a>4.1 考点：</h3>
      <p><code>to switch to the nursing school</code>转去护理学校</p>

        <h2 id="五、-transition"   >
          <a href="#五、-transition" class="heading-link"><i class="fas fa-link"></i></a>五、 transition</h2>
      <ul>
<li>v<ul>
<li>转变,过渡</li>
</ul>
</li>
<li>n<ul>
<li>转变,过渡</li>
<li>变革，变迁</li>
</ul>
</li>
</ul>
<p>transitional adj 过渡的<br>    词根前缀 trans == across 跨越的意思</p>
<p><code>But all energy transitions ,such as that from coal to hydrocarbons(碳氢化合物) in the 20th century ,take many decades</code></p>
<p>low-carbon life 低碳生活<br>hydro 氢气<br>Oxygen 氧气</p>

        <h2 id="六、transform"   >
          <a href="#六、transform" class="heading-link"><i class="fas fa-link"></i></a>六、transform</h2>
      <ul>
<li><p>v</p>
<ul>
<li><p>使彻底改变（尤指变得更好）</p>
</li>
<li><p>改造 <code>指改变</code></p>
</li>
<li><p>使改观</p>
<p><code>to transform their thought processes</code>转变他们的思维过程</p>
</li>
</ul>
</li>
</ul>

        <h3 id="七、派生"   >
          <a href="#七、派生" class="heading-link"><i class="fas fa-link"></i></a>七、派生</h3>
      <p>Transformers 变形金刚<br>transformer<br>transformation 变形</p>

        <h3 id="7-1-拓展用法"   >
          <a href="#7-1-拓展用法" class="heading-link"><i class="fas fa-link"></i></a>7.1 拓展用法</h3>
      <p>transform sb/sth (from sth)into sth</p>
<p><code>The movie transformed her almost overnight from an unknown schoolgirl into a megastar(巨星)</code>这部电影几乎一夜之间把她从一个默默无闻的女学生变成了超级明星</p>
<p>mega 巨</p>

        <h3 id="7-2-拓展词汇"   >
          <a href="#7-2-拓展词汇" class="heading-link"><i class="fas fa-link"></i></a>7.2 拓展词汇</h3>
      <p>reform </p>
<ul>
<li><p>v</p>
<ul>
<li><p>改进，改革</p>
</li>
<li><p>（使）改过自新</p>
<p><code>a reformed criminal</code> 一名改过自新的罪犯</p>
</li>
</ul>
</li>
</ul>

        <h2 id="八、-alter"   >
          <a href="#八、-alter" class="heading-link"><i class="fas fa-link"></i></a>八、 alter</h2>
      <ul>
<li>v.<ul>
<li>(尤指以相对细微但却显著的方式)改变(性质或成分)<ul>
<li>修改（衣服使更合身）</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><code>You can remind yourself to notice your thoughts in a nonjudgmental manner ,without trying to change or alter them right away</code></p>
<p>remind sb of sth 提醒某人某事<br>remind sb to sth 提醒某人做某事<br>manner 举止,方式,方法<br>right away 立刻<br>at once 立刻<br>instantly 马上 立即<br>immediately 立刻</p>

        <h3 id="8-1-派生"   >
          <a href="#8-1-派生" class="heading-link"><i class="fas fa-link"></i></a>8.1 派生</h3>
      <p>alteration  转变<br>alternate   adj 交替 轮流<br>alternation 交替<br>alternative 二选一的选择</p>
<blockquote>
<p>Remember what should be remembered ,and forget what should be forgotten . Alter what is changeable and accept what is mutable 记住你该记住的，忘记那些该被忘记的，改变那些能够改变的，接受那些没法改变的事实</p>
</blockquote>
<p>mute n/a 哑巴<br>mutable 猜不透 捉摸不定<br>mute 静音键</p>

        <h2 id="九、-modify"   >
          <a href="#九、-modify" class="heading-link"><i class="fas fa-link"></i></a>九、 modify</h2>
      <ul>
<li>v<ul>
<li>（略微地）修改，更改，改进，改造</li>
<li>修饰，限定</li>
</ul>
</li>
</ul>

        <h3 id="9-1-派生"   >
          <a href="#9-1-派生" class="heading-link"><i class="fas fa-link"></i></a>9.1 派生</h3>
      <p>modification n.改变<br>modifier    改变者</p>

        <h2 id="十、-convert"   >
          <a href="#十、-convert" class="heading-link"><i class="fas fa-link"></i></a>十、 convert</h2>
      <ul>
<li><p>v</p>
<ul>
<li>（使形态、性质、功能）改变；</li>
<li>改变（观点、原则或做事方式）；</li>
<li>改建，改造</li>
<li>换算</li>
<li>（使）改变信仰</li>
</ul>
</li>
<li><p>n </p>
<ul>
<li><p>改变信仰者</p>
<p>词根后缀 vert/vers 转变/翻转 === turn </p>
<p><code>to convert our lives to data</code>把我们的生活转变成数据化</p>
</li>
</ul>
</li>
</ul>

        <h3 id="10-1-派生"   >
          <a href="#10-1-派生" class="heading-link"><i class="fas fa-link"></i></a>10.1 派生</h3>
      <p>conversion  改变<br>convertible adj 可改变的 n 可折叠式敞篷跑车</p>

        <h2 id="十一、-transfer"   >
          <a href="#十一、-transfer" class="heading-link"><i class="fas fa-link"></i></a>十一、 transfer</h2>
      <ul>
<li>v <ul>
<li>(使)转移；</li>
<li>(使)调职；</li>
<li>转移（感情）</li>
<li>传染（疾病）</li>
<li>转让（全力等）</li>
<li>转乘，换乘</li>
</ul>
</li>
</ul>
<p>transfer station 中转站<br>terminal station 终点站</p>
<p><code>&quot;Someone was trying to set up a new payee and transfer a seven figure sum&quot;,he said</code>有人想建立一个收款账户，转移一笔总计七位数的钱，他说</p>
<p>payee 收款方<br>payer 付款方<br>结尾or/er 主动方<br>结尾ee 被动方<br>To sum up 总之（作文最后一点可以使用）<br>summary n 概述概论，摘要<br>summarize v 总结</p>

        <h3 id="11-1-派生"   >
          <a href="#11-1-派生" class="heading-link"><i class="fas fa-link"></i></a>11.1 派生</h3>
      <p>transference 名词 转移、换岗位、传播的</p>
<p>Arrival 到达站<br>Transfer 中转</p>

        <h2 id="十二、-transplant"   >
          <a href="#十二、-transplant" class="heading-link"><i class="fas fa-link"></i></a>十二、 transplant</h2>
      <ul>
<li>n<ul>
<li>（器官）移植</li>
</ul>
</li>
<li>v<ul>
<li>移植</li>
<li>移栽</li>
<li>（使）移居</li>
</ul>
</li>
</ul>

        <h3 id="12-1-拓展词汇"   >
          <a href="#12-1-拓展词汇" class="heading-link"><i class="fas fa-link"></i></a>12.1 拓展词汇</h3>
      <p>plant</p>
<ul>
<li>n<ul>
<li>植物</li>
<li>工厂 <code>考试常考</code></li>
<li>发电厂 <code>考试常考</code></li>
</ul>
</li>
<li>v<ul>
<li>播（种）</li>
<li>种植</li>
<li>放置，使固定</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>英语学习</category>
      </categories>
      <tags>
        <tag>英语单词</tag>
      </tags>
  </entry>
  <entry>
    <title>【计算机网络管理】第八章网络管理通用技术</title>
    <url>/2020/04/03/%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E3%80%91%20%E7%AC%AC%E5%85%AB%E7%AB%A0%20%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E9%80%9A%E7%94%A8%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[
        <h2 id="本章重难点"   >
          <a href="#本章重难点" class="heading-link"><i class="fas fa-link"></i></a>本章重难点</h2>
      <p>本章一般会出选择题、填空题，分值在5分左右。</p>

        <h3 id="本章的重难点和常考知识点"   >
          <a href="#本章的重难点和常考知识点" class="heading-link"><i class="fas fa-link"></i></a>本章的重难点和常考知识点</h3>
      <ul>
<li>网络故障维护（常考<code>选择题</code>、<code>填空题</code>）</li>
<li>常用网络测试命令及应用（常考<code>选择题</code>、<code>填空题</code>）</li>
<li>SNMP MIB工具（常考<code>选择题</code>、<code>填空题</code>）</li>
<li>局域网中常见故障（常考<code>选择题</code>、<code>填空题</code>）</li>
</ul>
<a id="more"></a>


        <h2 id="一、网络故障维护"   >
          <a href="#一、网络故障维护" class="heading-link"><i class="fas fa-link"></i></a>一、网络故障维护</h2>
      
        <h3 id="1-1-网络故障的分类"   >
          <a href="#1-1-网络故障的分类" class="heading-link"><i class="fas fa-link"></i></a>1.1 网络故障的分类</h3>
      <p><img src="https://i.loli.net/2020/03/28/3HLYzS1keFwUl2K.png" alt="网络管理-网络管理通用技术-网络故障的分类-min.png"></p>

        <h3 id="1-2-网络故障的维护方法"   >
          <a href="#1-2-网络故障的维护方法" class="heading-link"><i class="fas fa-link"></i></a>1.2 网络故障的维护方法</h3>
      <ul>
<li>对比法<ul>
<li>维护方法<ul>
<li>排除法</li>
<li>硬件替换法</li>
</ul>
</li>
</ul>
</li>
</ul>

        <h3 id="1-3-网络故障的维护步骤"   >
          <a href="#1-3-网络故障的维护步骤" class="heading-link"><i class="fas fa-link"></i></a>1.3 网络故障的维护步骤</h3>
      <div class="table-container"><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>1.识别故障现象</td>
<td>对故障现象进行描述</td>
</tr>
<tr>
<td>2.收集相关信息</td>
<td>利用现有辅助工具确定问题的具体定义和影响范围</td>
</tr>
<tr>
<td>3.列举故障原因</td>
<td>缩小搜索范围</td>
</tr>
<tr>
<td>4.设计诊断方案</td>
<td>判断可能的故障原因</td>
</tr>
</tbody></table></div>

        <h2 id="二、常用网络测试命令及应用"   >
          <a href="#二、常用网络测试命令及应用" class="heading-link"><i class="fas fa-link"></i></a>二、常用网络测试命令及应用</h2>
      
        <h3 id="2-1-网络状态测试命令"   >
          <a href="#2-1-网络状态测试命令" class="heading-link"><i class="fas fa-link"></i></a>2.1 网络状态测试命令</h3>
      <div class="table-container"><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>Ipconfig</td>
<td>网络配置</td>
</tr>
<tr>
<td>ping</td>
<td>主机之间的路由情况、连通情况</td>
</tr>
<tr>
<td>nslookup</td>
<td>DNS服务器检测</td>
</tr>
<tr>
<td>netstat</td>
<td>监视本地主机网络端口状态</td>
</tr>
<tr>
<td>telnet</td>
<td>远程登录主机，常用于TCP协议测试</td>
</tr>
</tbody></table></div>

        <h3 id="2-2-网络流量、网络路由监视命令"   >
          <a href="#2-2-网络流量、网络路由监视命令" class="heading-link"><i class="fas fa-link"></i></a>2.2 网络流量、网络路由监视命令</h3>
      
        <h4 id="网络流量监视命令"   >
          <a href="#网络流量监视命令" class="heading-link"><i class="fas fa-link"></i></a>网络流量监视命令</h4>
      <blockquote>
<p>ping 或第三方协议分析软件</p>
</blockquote>

        <h4 id="网络路由监视命令"   >
          <a href="#网络路由监视命令" class="heading-link"><i class="fas fa-link"></i></a>网络路由监视命令</h4>
      <ul>
<li>netstat-nr 和 route pint （查看路由表）</li>
<li>route add(添加路由表项)</li>
<li>pathping和tracert(检测经过的路由器)</li>
<li>arp（查看本地arp地址映射表）</li>
</ul>

        <h2 id="三、SNMP-MIB工具"   >
          <a href="#三、SNMP-MIB工具" class="heading-link"><i class="fas fa-link"></i></a>三、SNMP MIB工具</h2>
      <ul>
<li>SNMP MIB 浏览器</li>
<li>SNMP命令行工具-snmputil</li>
<li>SNMP Sniff工具</li>
</ul>

        <h2 id="四、局域网中常见故障"   >
          <a href="#四、局域网中常见故障" class="heading-link"><i class="fas fa-link"></i></a>四、局域网中常见故障</h2>
      
        <h3 id="4-1-局域网故障诊断技术"   >
          <a href="#4-1-局域网故障诊断技术" class="heading-link"><i class="fas fa-link"></i></a>4.1 局域网故障诊断技术</h3>
      <p><img src="https://i.loli.net/2020/03/28/QGrAT63wofIOzcj.png" alt="网络管理-网络管理通用技术-局域网故障诊断技术-min.png"></p>

        <h3 id="4-2-局域网常见故障分析与排除"   >
          <a href="#4-2-局域网常见故障分析与排除" class="heading-link"><i class="fas fa-link"></i></a>4.2 局域网常见故障分析与排除</h3>
      <p><img src="https://i.loli.net/2020/03/28/2wbsGSHacP1BZtV.png" alt="网络管理-网络管理通用技术-局域网常见故障分析与排除-min.png"></p>

        <h2 id="五、IPv6环境下的网络管理"   >
          <a href="#五、IPv6环境下的网络管理" class="heading-link"><i class="fas fa-link"></i></a>五、IPv6环境下的网络管理</h2>
      
        <h3 id="IPv6环境下的网络管理"   >
          <a href="#IPv6环境下的网络管理" class="heading-link"><i class="fas fa-link"></i></a>IPv6环境下的网络管理</h3>
      <ul>
<li>IPv6网络</li>
<li>IPv6地址管理</li>
<li>IPv6路由管理</li>
<li>IPv6安全管理</li>
</ul>
]]></content>
      <categories>
        <category>自考专升本</category>
      </categories>
      <tags>
        <tag>计算机网络管理</tag>
      </tags>
  </entry>
  <entry>
    <title>【英语单词】第4大区-firm与include</title>
    <url>/2020/04/03/%E3%80%90%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D%E3%80%91%E7%AC%AC4%E5%A4%A7%E5%8C%BA-firm%E4%B8%8Einclude/</url>
    <content><![CDATA[
        <h2 id="一、firm"   >
          <a href="#一、firm" class="heading-link"><i class="fas fa-link"></i></a>一、firm</h2>
      
        <h3 id="1-firm"   >
          <a href="#1-firm" class="heading-link"><i class="fas fa-link"></i></a>1. firm</h3>
      <ul>
<li>adj<ul>
<li>坚固的，结实的</li>
<li>强有力的</li>
<li>坚决的，坚定的<code>(考试常考)</code></li>
<li>确凿的</li>
<li>（价格、货币等）坚挺的，稳定的</li>
</ul>
</li>
<li>adv<ul>
<li>坚定地</li>
<li>坚决地</li>
</ul>
</li>
<li>n<ul>
<li>(尤指小型的)公司，商行，事物所<code>(考试常考)</code></li>
</ul>
</li>
<li>v<ul>
<li>使坚固</li>
<li>（股票、物价等）坚挺，稳步上涨</li>
</ul>
</li>
</ul>
<p><code>to allow non-lawyers to own shares in law firms</code></p>
<p>executive 职业经理人<br>Chief Executive Officer,CEO </p>
<a id="more"></a>

<blockquote>
<p>“There is no chance ,no destiny ,no fate, that can hinder or control the firm resolve of a determined soul”没有机会，没有命运，没有命运，可以阻碍或控制一个坚定的灵魂的坚定决心</p>
</blockquote>
<p>firm adj  坚固的,坚定的;<br>hinder v 阻止、妨碍<br>resolve v解决 n 决心<br>resolution n 决定<br>resolute adj.    坚决的; 有决心的;</p>
<blockquote>
<p>LAUGH , and the world laughs with you;你笑，全世界陪你笑;<br>Weep, and you weep alone 哭泣，只有你独自哭泣</p>
</blockquote>
<p>《Solitude》孤独<br>来自于词根sole 唯一的<br>isolate 孤立</p>

        <h3 id="近义词-adj-坚固的，结实的"   >
          <a href="#近义词-adj-坚固的，结实的" class="heading-link"><i class="fas fa-link"></i></a>近义词 adj 坚固的，结实的</h3>
      
        <h3 id="2-solid"   >
          <a href="#2-solid" class="heading-link"><i class="fas fa-link"></i></a>2. solid</h3>
      <ul>
<li>adj<ul>
<li>固体的，坚硬的；</li>
<li>实心的；</li>
<li>结实的，坚固的</li>
<li>（证据、消息等）可靠的，确凿的</li>
<li>连续的，不间断的</li>
</ul>
</li>
</ul>
<p>consolidate<br>vt. 巩固，使固定；联合<br>vi. 巩固，加强</p>
<p><code>At this point, there is no solid research linking any of this fall&#39;s prominent disasters to climate change, though such examinations are under way</code></p>
<p>At this point 在这个点上，此时此刻<br>no solid research 缺乏可靠的研究<br>fall’s n 秋天<br>permanent 永恒的  prominent 显著的，显然对</p>

        <h4 id="2-1-派生"   >
          <a href="#2-1-派生" class="heading-link"><i class="fas fa-link"></i></a>2.1 派生</h4>
      <p>solidity<br>solidify<br>solidarity</p>

        <h3 id="3-tight"   >
          <a href="#3-tight" class="heading-link"><i class="fas fa-link"></i></a>3. tight</h3>
      <ul>
<li>adj <ul>
<li>牢固的，紧的 <code>(考试重点)</code></li>
<li>紧身的；</li>
<li>严密的，严格的</li>
<li>拮据的，不宽裕的</li>
<li>显得紧张的；</li>
<li>亲密的；<code>(考试重点)</code></li>
<li>势均力敌的</li>
<li>小气的；<code>(考试重点)</code></li>
<li>吝啬的</li>
</ul>
</li>
<li>adv<ul>
<li>紧紧地</li>
<li>牢固地</li>
</ul>
</li>
</ul>
<p>tightly 紧密</p>
<p><code>on a tight budget</code>预算很紧</p>

        <h4 id="3-1-派生"   >
          <a href="#3-1-派生" class="heading-link"><i class="fas fa-link"></i></a>3.1 派生</h4>
      <p>tighten v 收紧<br>fasten  v 扣紧</p>
<p>fasten your seat belt 系好你的安全带</p>
<blockquote>
<p>You’ve got that long hair slick back, white T-shirt<br>And I got that good girl faith and a tight little skirt<br>And when we go crashing down, we come back every time<br>‘Cause we never go out of style , we never go out of style</p>
</blockquote>
<p>break up === crashing down 崩溃</p>

        <h3 id="尤指小型的-公司，商行，事务所"   >
          <a href="#尤指小型的-公司，商行，事务所" class="heading-link"><i class="fas fa-link"></i></a>(尤指小型的)公司，商行，事务所</h3>
      
        <h3 id="4-company"   >
          <a href="#4-company" class="heading-link"><i class="fas fa-link"></i></a>4. company</h3>
      <ul>
<li>n<ul>
<li>公司，商行</li>
<li>剧团，演出团</li>
<li>陪伴，陪同 <code>(注意)</code></li>
<li>宾客，来宾 </li>
<li>在一起的一群人</li>
</ul>
</li>
</ul>
<p>in company with （和…）一起</p>

        <h4 id="4-1-派生"   >
          <a href="#4-1-派生" class="heading-link"><i class="fas fa-link"></i></a>4.1 派生</h4>
      <p>companion</p>
<p><code>A sword&#39;s poor company for a long road</code>长路漫漫,唯剑作伴</p>
<p>student loans 学生贷款</p>

        <h3 id="5-corporation"   >
          <a href="#5-corporation" class="heading-link"><i class="fas fa-link"></i></a>5. corporation</h3>
      <ul>
<li>n 大公司,企业<ul>
<li>法人；</li>
<li>法人团体</li>
</ul>
</li>
</ul>
<p>Co ltd == corporation limited ==有限公司</p>

        <h3 id="6-venture"   >
          <a href="#6-venture" class="heading-link"><i class="fas fa-link"></i></a>6. venture</h3>
      <ul>
<li>n<ul>
<li>风险企业</li>
<li>投机活动</li>
</ul>
</li>
<li>v<ul>
<li>敢于冒险，敢做</li>
<li>冒昧地说，谨慎地做</li>
</ul>
</li>
</ul>
<p>VC ：venture capital  风险资本</p>
<p>cap 词根词缀 首的头部 意思</p>
<p>joint-venture   合资企业</p>

        <h3 id="7-enterprise"   >
          <a href="#7-enterprise" class="heading-link"><i class="fas fa-link"></i></a>7. enterprise</h3>
      <ul>
<li>n<ul>
<li>公司，企业</li>
<li>事业</li>
<li>进取心，事业型，创业精神</li>
</ul>
</li>
</ul>
<p>ente 进来<br>prise 抓住<br>prisoner 监狱<br>comprise 包含<br>be comprised of 有什么构成</p>

        <h4 id="7-1-派生"   >
          <a href="#7-1-派生" class="heading-link"><i class="fas fa-link"></i></a>7.1 派生</h4>
      <p>enterprising adj. 有事业心的；有进取心的；有魄力的；有胆量的<br>entrepreneur    n. 企业家；承包人；主办者<br>entrepreneurial adj. 企业家的，创业者的；中间商的<br>entrepreneurship    企业家精神</p>

        <h2 id="二、include"   >
          <a href="#二、include" class="heading-link"><i class="fas fa-link"></i></a>二、include</h2>
      
        <h3 id="2-1-include"   >
          <a href="#2-1-include" class="heading-link"><i class="fas fa-link"></i></a>2.1 include</h3>
      <ul>
<li>v<ul>
<li>包括，包含；</li>
<li>列入</li>
</ul>
</li>
</ul>

        <h4 id="2-1-1-派生"   >
          <a href="#2-1-1-派生" class="heading-link"><i class="fas fa-link"></i></a>2.1.1 派生</h4>
      <p>inclusive<br>inclusiveness   n. 包容；包容性   <code>(心里愿意)</code><br>tolerance   n. 公差；宽容；容忍<br>tolerate    vt. 忍受；默许；宽恕 <code>(一百个不愿意)</code></p>

        <h4 id="2-1-1-拓展"   >
          <a href="#2-1-1-拓展" class="heading-link"><i class="fas fa-link"></i></a>2.1.1 拓展</h4>
      <p>exclude</p>
<ul>
<li>v<ul>
<li>【故意】不包括</li>
<li>把…排除在外；</li>
<li>不准…参与；</li>
<li>不准…进入</li>
</ul>
</li>
</ul>
<p>词根 clude==close 关闭的意思<br>conclude vi. 推断；断定；决定<br>conclusion  n. 结论；结局；推论</p>
<p>exclusive adj. 独有的，专用的<code>(比较多用专用的意思)</code>，高级的，昂贵的，排外的</p>
<p>exclusive club  专属俱乐部</p>

        <h3 id="近义词-n-包括，包含"   >
          <a href="#近义词-n-包括，包含" class="heading-link"><i class="fas fa-link"></i></a>近义词 n 包括，包含</h3>
      
        <h3 id="2-2-contain"   >
          <a href="#2-2-contain" class="heading-link"><i class="fas fa-link"></i></a>2.2 contain</h3>
      <ul>
<li>v<ul>
<li>装有，容纳 <code>(考试常考)</code></li>
<li>包含，含有</li>
<li>遏制，防止…蔓延；</li>
<li>抑制（感情）</li>
</ul>
</li>
</ul>
<p>desire n. 欲望；要求，心愿；<br>stymie vt. 从中作梗，阻挠；妨碍<br>preventing  vi. 妨碍，阻止<br>keep … from 隐瞒；阻止；抑制<br>prevent sb from doing sth 阻止某人做某事 </p>
<p>Slow  is fast   慢即是快;<br>deploy 被分配</p>
<p>distribution  分配<br>dispatch 派遣<br>patch   补丁<br>distribute vt. 分配；散布；分开；把…分类<br>tribute n. 礼物；</p>

        <h4 id="2-2-1-派生"   >
          <a href="#2-2-1-派生" class="heading-link"><i class="fas fa-link"></i></a>2.2.1 派生</h4>
      <p>container 容器<br>containment n. 控制，抑制；遏制；封锁（政策）</p>

        <h3 id="2-3-incorporate"   >
          <a href="#2-3-incorporate" class="heading-link"><i class="fas fa-link"></i></a>2.3 incorporate</h3>
      <ul>
<li>v<ul>
<li>纳入，并入</li>
<li>包含，包括</li>
<li>注册成立</li>
</ul>
</li>
</ul>
<p>cooperate 合作，运转<br>Via == By == through 通过</p>
<p><code>Via remote programming, the app will be able to continuously incorporate new data on emerging outbreaks</code></p>
<p>emerge vi. 浮现；摆脱；暴露<br>break out   v. 爆发；突发<br>outbreaks   vi. 爆发  ;n. （战争的）爆发；（疾病的）发作</p>

        <h3 id="2-4-cover"   >
          <a href="#2-4-cover" class="heading-link"><i class="fas fa-link"></i></a>2.4 cover</h3>
      <ul>
<li>v<ul>
<li>覆盖</li>
<li>包括，涉及</li>
<li>报道，发表</li>
<li>（钱）足够支付<code>(注意)</code></li>
<li>给…上保险</li>
<li>掩盖<code>(注意)</code></li>
</ul>
</li>
<li>n<ul>
<li>覆盖物，这改为</li>
<li>书封<code>(注意)</code></li>
<li>藏身处</li>
<li>掩护物</li>
<li>承保范围</li>
</ul>
</li>
</ul>
<p><code>a database than covered more than 10000 firms一个数据库覆盖了一万多家公司</code></p>
<p>马拉松 The marathon</p>
<p><code>to get a full-time job that provided insurance in order to cover themselves and their families</code></p>
<p>full-time job   全职工作<br>part-time job   兼职工作<br>book cover  书的封面</p>
]]></content>
      <categories>
        <category>英语学习</category>
      </categories>
      <tags>
        <tag>英语单词</tag>
      </tags>
  </entry>
  <entry>
    <title>【计算机网络管理】第零章应考指导</title>
    <url>/2020/04/03/%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E3%80%91%20%E7%AC%AC%E9%9B%B6%E7%AB%A0%20%E5%BA%94%E8%80%83%E6%8C%87%E5%AF%BC/</url>
    <content><![CDATA[
        <h2 id="一、重点章节"   >
          <a href="#一、重点章节" class="heading-link"><i class="fas fa-link"></i></a>一、重点章节</h2>
      <ul>
<li>第一章 网络管理概论</li>
<li>第二章 抽象语法表示</li>
<li>第三章 管理信息结构</li>
<li>第四章 简单网络管理协议</li>
<li>第五章 远程网络监视</li>
</ul>
<a id="more"></a>


        <h2 id="二、难点章节"   >
          <a href="#二、难点章节" class="heading-link"><i class="fas fa-link"></i></a>二、难点章节</h2>
      <ul>
<li>第二章 抽象语法表示</li>
<li>第三章 管理信息结构</li>
<li>第四章 简单网络管理协议</li>
</ul>

        <h2 id="三、题目特点"   >
          <a href="#三、题目特点" class="heading-link"><i class="fas fa-link"></i></a>三、题目特点</h2>
      <ol>
<li>重复出现的知识点和考题<ul>
<li>重复知识点，变换不同题型</li>
<li>重复知识点，同样考题</li>
</ul>
</li>
<li>超出大纲和教材的试题<code>(基本没有)</code></li>
</ol>

        <h2 id="四、复习、备考建议"   >
          <a href="#四、复习、备考建议" class="heading-link"><i class="fas fa-link"></i></a>四、复习、备考建议</h2>
      <ol>
<li>认真领会考核内容和考核要求，抓住重点、突破难点。</li>
<li>制定切实可行的复习计划，充分利用时间，劳逸结合，保证质量。</li>
<li>不断归纳整理知识点，安排适当的阶段自我测试。</li>
<li>准备必要的复习资料和练习题，注重记忆，针对性练习。</li>
<li>调整心态，控制情绪。</li>
</ol>
]]></content>
      <categories>
        <category>自考专升本</category>
      </categories>
      <tags>
        <tag>计算机网络管理</tag>
      </tags>
  </entry>
  <entry>
    <title>【英语单词】第3大区-关于rule与effect</title>
    <url>/2020/04/03/%E3%80%90%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D%E3%80%91%E7%AC%AC3%E5%A4%A7%E5%8C%BA-%E5%85%B3%E4%BA%8Erule%E4%B8%8Eeffect/</url>
    <content><![CDATA[
        <h2 id="一、-rule"   >
          <a href="#一、-rule" class="heading-link"><i class="fas fa-link"></i></a>一、 rule</h2>
      
        <h3 id="1-1-rule"   >
          <a href="#1-1-rule" class="heading-link"><i class="fas fa-link"></i></a>1.1 rule</h3>
      <ul>
<li>v<ul>
<li>统治,管理，控制</li>
<li>判决，裁定</li>
</ul>
</li>
<li>n<ul>
<li>（游戏、学校或公司等的）规则，章程，规定</li>
<li>定律</li>
<li>习惯，常规</li>
<li>统治，管辖</li>
</ul>
</li>
</ul>
<p>district 行政区域<br>against 对抗<br>sweeping 扫</p>
<p>haul = pull 拉<br>did more than 超过了什么<br>deportation 驱逐出境<br>throw the future into doubt把未来变得不确定</p>
<a id="more"></a>


        <h4 id="1-0-1-派生"   >
          <a href="#1-0-1-派生" class="heading-link"><i class="fas fa-link"></i></a>1.0.1 派生</h4>
      <p>ruling 裁决判决<br>ruler   统治者<br>oppressed  被统治阶级</p>

        <h3 id="1-2-administer"   >
          <a href="#1-2-administer" class="heading-link"><i class="fas fa-link"></i></a>1.2 administer</h3>
      <ul>
<li>v<ul>
<li>[=administrate]管理（公司、组织、机构等）</li>
<li>治理（国家）</li>
<li>施行、执行</li>
</ul>
</li>
</ul>
<blockquote>
<p>Washington is familiar with the challenges of administering a dense metropolitan area with pockets of deep poverty and crime.</p>
</blockquote>
<p>be familiar with 熟悉<br>dense 密集的 adj<br>condense 压缩 v<br>density n密度 </p>
<p>ity结尾的词代表有一种抽象的概念<br>humanity 人性<br>creativity 创造性</p>
<p>metropolitan adj 大都会的<br>metropolis n 大都会;大城市;首都;首府<br>metro地铁轻轨</p>
<p>with永远对前面补充说明</p>
<p>a + n + of,<br>n的s + of =may/some 一些</p>
<p>poverty 贫穷</p>

        <h4 id="1-2-1-派生"   >
          <a href="#1-2-1-派生" class="heading-link"><i class="fas fa-link"></i></a>1.2.1 派生</h4>
      <p>administration</p>

        <h4 id="1-2-2-补充词汇"   >
          <a href="#1-2-2-补充词汇" class="heading-link"><i class="fas fa-link"></i></a>1.2.2 补充词汇</h4>
      <p>minister n 部长，大臣<br>prime minister 首相（简称PM）</p>

        <h3 id="1-3-dominate"   >
          <a href="#1-3-dominate" class="heading-link"><i class="fas fa-link"></i></a>1.3 dominate</h3>
      <ul>
<li>V<ul>
<li>控制，支配，统治，主导</li>
<li>俯视，高耸于</li>
</ul>
</li>
</ul>
<p><code>trends dominated by potential buyers</code> trends是名词，后面的dominated修饰它<br>有潜质的买家控制的趋势<br><code>trends （省略了that are）dominated by potential buyers</code> </p>
<p>词根dom 统治、管理有关</p>

        <h4 id="1-3-1-派生"   >
          <a href="#1-3-1-派生" class="heading-link"><i class="fas fa-link"></i></a>1.3.1 派生</h4>
      <p>dominant 统治的、管理的</p>

        <h3 id="1-4-govern"   >
          <a href="#1-4-govern" class="heading-link"><i class="fas fa-link"></i></a>1.4 govern</h3>
      <ul>
<li>v<ul>
<li>统治</li>
<li>管理，治理</li>
<li>支配</li>
<li>影响</li>
</ul>
</li>
</ul>
<p><code>that state-level bodies that govern the profession</code></p>
<p>bodies实体部门<br>entity 实体<br>commercial entity 商业实体<br>profession 行业，某某职业</p>

        <h4 id="1-4-1-派生"   >
          <a href="#1-4-1-派生" class="heading-link"><i class="fas fa-link"></i></a>1.4.1 派生</h4>
      <p>governor<br>government</p>

        <h3 id="1-5-reign"   >
          <a href="#1-5-reign" class="heading-link"><i class="fas fa-link"></i></a>1.5 reign</h3>
      <ul>
<li>v<ul>
<li>统治，当政</li>
<li>占优势</li>
<li>盛行</li>
</ul>
</li>
<li>n<ul>
<li>君主统治时期</li>
<li>任期</li>
</ul>
</li>
</ul>
<p><code>the Nazi reign of murder</code></p>

        <h3 id="1-6-regulate"   >
          <a href="#1-6-regulate" class="heading-link"><i class="fas fa-link"></i></a>1.6 regulate</h3>
      <ul>
<li>v<ul>
<li>(尤指通过规章)控制，管理</li>
<li>调整，调节</li>
</ul>
</li>
</ul>
<blockquote>
<p>In order for any of these solutions to succeed, workers have to be willing to regulate their own habits </p>
</blockquote>
<p>succeed v 成功<br>be willing to sth 乐意做某事</p>

        <h4 id="1-6-1-派生"   >
          <a href="#1-6-1-派生" class="heading-link"><i class="fas fa-link"></i></a>1.6.1 派生</h4>
      <p>regulation n 规则<br>regulator n 管理者</p>

        <h3 id="n-规则，章程，规定"   >
          <a href="#n-规则，章程，规定" class="heading-link"><i class="fas fa-link"></i></a>n.规则，章程，规定</h3>
      
        <h3 id="1-7-code"   >
          <a href="#1-7-code" class="heading-link"><i class="fas fa-link"></i></a>1.7 code</h3>
      <ul>
<li>n<ul>
<li>法规，法典</li>
<li>道德准则，行为规范</li>
<li>密码，代码<code>(The Da vinci Code 电影《达芬奇密码》)</code></li>
<li>邮编，区号</li>
</ul>
</li>
<li>v<ul>
<li>把…编号（或编号）</li>
</ul>
</li>
</ul>
<p><code>to make itself subject to the code of conduct</code><br>the code of conduct 行为准则</p>
<p>conduct v 指导、领导<br>subject adj. 服从于<br>subject v 使顺从<br>make .. subject to 有to就是指着你说的意思</p>

        <h3 id="1-8-law"   >
          <a href="#1-8-law" class="heading-link"><i class="fas fa-link"></i></a>1.8 law</h3>
      <ul>
<li>n</li>
<li>(国家、城市或州的)法律</li>
<li>规则</li>
<li>定律，规律</li>
</ul>

        <h4 id="1-8-1-派生"   >
          <a href="#1-8-1-派生" class="heading-link"><i class="fas fa-link"></i></a>1.8.1 派生</h4>
      <p>lawful 合法的、法律的<br>lawyer 律师<br>attorney 律师<br>tear v 撕裂<br>torn tear的过去分词</p>

        <h3 id="1-9-statute"   >
          <a href="#1-9-statute" class="heading-link"><i class="fas fa-link"></i></a>1.9 statute</h3>
      <ul>
<li>n<ul>
<li>法令，法规</li>
<li>（某机构、组织的）条例</li>
<li>章程</li>
</ul>
</li>
</ul>

        <h3 id="1-10-bill"   >
          <a href="#1-10-bill" class="heading-link"><i class="fas fa-link"></i></a>1.10 bill</h3>
      <ul>
<li>n<ul>
<li>账单</li>
<li>（提交议会讨论的）议案，法案</li>
<li>纸币，钞票</li>
<li>广告，海报</li>
</ul>
</li>
<li>v<ul>
<li>宣传</li>
<li>给…开账单</li>
</ul>
</li>
</ul>
<p>hospital bill 医院账单<br>billboard 公告牌音乐排行榜 </p>
<p>page 页<br>pro 向前的前缀<br>propagate v宣传</p>

        <h4 id="1-10-1-拓展"   >
          <a href="#1-10-1-拓展" class="heading-link"><i class="fas fa-link"></i></a>1.10.1 拓展</h4>
      <p>The Bill of Rights 《权利法案》</p>

        <h2 id="二、-effect"   >
          <a href="#二、-effect" class="heading-link"><i class="fas fa-link"></i></a>二、 effect</h2>
      
        <h3 id="2-1-effect"   >
          <a href="#2-1-effect" class="heading-link"><i class="fas fa-link"></i></a>2.1 effect</h3>
      <ul>
<li>n<ul>
<li>影响，结果</li>
<li>效果，作用</li>
<li>感受，印象</li>
</ul>
</li>
<li>v<ul>
<li>使发生，实现<code>（少考）</code></li>
</ul>
</li>
</ul>
<p>price marked 明码标价<br>new 新闻<br>agents 代理商<br>newsagents 新闻报刊亭<br>convenience stores 便利店<br>增加了 by<br>增加到 to<br>comes into effect 实施 生效</p>
<p><code>to have a meaningful effect in slowing climate change</code><br>meaningful effect 有意义的效果</p>

        <h4 id="2-1-1-派生"   >
          <a href="#2-1-1-派生" class="heading-link"><i class="fas fa-link"></i></a>2.1.1 派生</h4>
      <p>effective<br>ive 是抽象的形容词后缀<br>ity 是抽象的名词后缀</p>
<p>energy-efficient house 节能房<br>energy-saving house 节约能源的房子</p>

        <h4 id="2-1-2-拓展词汇"   >
          <a href="#2-1-2-拓展词汇" class="heading-link"><i class="fas fa-link"></i></a>2.1.2 拓展词汇</h4>
      <p>effcient</p>

        <h3 id="近义词-n-影响，结果"   >
          <a href="#近义词-n-影响，结果" class="heading-link"><i class="fas fa-link"></i></a>近义词 n 影响，结果</h3>
      
        <h3 id="2-2-result"   >
          <a href="#2-2-result" class="heading-link"><i class="fas fa-link"></i></a>2.2 result</h3>
      <ul>
<li>n<ul>
<li>结果，后果</li>
<li>效果</li>
<li>考试成绩，业绩</li>
</ul>
</li>
<li>v<ul>
<li>（因…）发生</li>
<li>（由…）造成</li>
</ul>
</li>
</ul>
<p><code>biases that result from cognitive constraints</code>由认知限制引起的偏见</p>
<p>cognition n 认知;感知;认识<br>recognize 认识<br>submarine 潜水艇</p>
<p>complaint n 抱怨<br>cognitive constraints 认知限制</p>

        <h4 id="2-2-1-派生"   >
          <a href="#2-2-1-派生" class="heading-link"><i class="fas fa-link"></i></a>2.2.1 派生</h4>
      <p>resultant 结果、结局</p>
<blockquote>
<p>In your life , there will be at least one time that you forget yourself for someone, asking for no result, no company, no ownership nor love.Just ask for meeting you in my most beautiful years</p>
</blockquote>
<p>no company 不求陪伴</p>

        <h3 id="2-3-consequence"   >
          <a href="#2-3-consequence" class="heading-link"><i class="fas fa-link"></i></a>2.3 consequence</h3>
      <ul>
<li>n<ul>
<li>结果，后果，影响</li>
<li>重要性</li>
</ul>
</li>
</ul>
<p><code>to think about long-term consequences</code> 长远的后果<br>short-term 目光短浅</p>

        <h4 id="2-3-1-派生"   >
          <a href="#2-3-1-派生" class="heading-link"><i class="fas fa-link"></i></a>2.3.1 派生</h4>
      <ul>
<li>consequent </li>
<li>consequently 因此</li>
</ul>
<p>hence ,  因此</p>

        <h3 id="2-4-outcome"   >
          <a href="#2-4-outcome" class="heading-link"><i class="fas fa-link"></i></a>2.4 outcome</h3>
      <ul>
<li>n<ul>
<li>结果，结局，后果</li>
</ul>
</li>
</ul>
<p>income 收入<br>expense 支出<br>expenditure 支出</p>
]]></content>
      <categories>
        <category>英语学习</category>
      </categories>
      <tags>
        <tag>英语单词</tag>
      </tags>
  </entry>
  <entry>
    <title>【计算机网络管理】第一章 网络管理概论</title>
    <url>/2020/04/03/%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E3%80%91%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E6%A6%82%E8%AE%BA/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/03/19/iyqrEdCHtf1vhXo.png" alt="网络管理-第一章网络管理概论-脑图-min.png"></p>

        <h2 id="一、本章重难点"   >
          <a href="#一、本章重难点" class="heading-link"><i class="fas fa-link"></i></a>一、本章重难点</h2>
      <p>本章一般会出选择题、填空题和简答题，分值在<code>15-25</code>左右</p>

        <h3 id="1-1-本章的重难点和常考知识点"   >
          <a href="#1-1-本章的重难点和常考知识点" class="heading-link"><i class="fas fa-link"></i></a>1.1 本章的重难点和常考知识点</h3>
      <ul>
<li>网络管理的基本概念(常考<code>选择题</code>、<code>填空题</code>)</li>
<li>网络管理的体系结构(常考<code>选择题</code>、<code>简答题</code>)</li>
<li>网络管理的功能(常考<code>选择题</code>、<code>简答题</code>)</li>
</ul>
<a id="more"></a>


        <h2 id="二、网络管理的基本概念"   >
          <a href="#二、网络管理的基本概念" class="heading-link"><i class="fas fa-link"></i></a>二、网络管理的基本概念</h2>
      
        <h3 id="2-1-计算机网络管理的定义"   >
          <a href="#2-1-计算机网络管理的定义" class="heading-link"><i class="fas fa-link"></i></a>2.1 计算机网络管理的定义</h3>
      <p>采用计算机硬软件技术对客户端计算机、服务器、存储和交换机、路由器等网络设备及相关软件组成的网络和信息系统进行管理的工作。</p>

        <h3 id="2-2-网络管理的任务"   >
          <a href="#2-2-网络管理的任务" class="heading-link"><i class="fas fa-link"></i></a>2.2 网络管理的任务</h3>
      <ul>
<li>监视网络状态</li>
<li>控制网络运行</li>
</ul>

        <h3 id="2-3-网络管理需要解决的问题"   >
          <a href="#2-3-网络管理需要解决的问题" class="heading-link"><i class="fas fa-link"></i></a>2.3 网络管理需要解决的问题</h3>
      <ul>
<li>复杂性</li>
<li>可靠性</li>
<li>安全性</li>
<li>可扩充性</li>
</ul>

        <h3 id="2-4-网络管理的根本目标"   >
          <a href="#2-4-网络管理的根本目标" class="heading-link"><i class="fas fa-link"></i></a>2.4 网络管理的根本目标</h3>
      <ul>
<li>有效性–准确及时传递信息，提供服务</li>
<li>可靠性–持续稳定运行</li>
<li>开放性–兼容各个厂商不同类型设备</li>
<li>综合性–提供各种综合业务功能</li>
<li>安全性–对网络中的信息进行保护</li>
<li>经济性–减少运行费用</li>
</ul>

        <h3 id="2-5-网络管理的对象"   >
          <a href="#2-5-网络管理的对象" class="heading-link"><i class="fas fa-link"></i></a>2.5 网络管理的对象</h3>
      <p>网络管理涉及的资源–被管对象</p>
<ul>
<li>硬件资源<ul>
<li>物理介质</li>
<li>计算机设备</li>
<li>网络设备</li>
</ul>
</li>
<li>软件资源<ul>
<li>操作系统</li>
<li>应用软件</li>
<li>通信软件</li>
</ul>
</li>
</ul>
<p>被管对象的集合称为管理信息库（MIB）</p>

        <h4 id="问题：网络管理中被管理的硬件资源有哪些？"   >
          <a href="#问题：网络管理中被管理的硬件资源有哪些？" class="heading-link"><i class="fas fa-link"></i></a>问题：网络管理中被管理的硬件资源有哪些？</h4>
      <ol>
<li>物理介质：包括物理层和数据链路层联网设备，如网卡、双绞线、光纤等。</li>
<li>计算机设备：包括处理机、打印机和存储设备以及其他计算机外围设备。</li>
<li>网络互联设备：如网桥、路由器、网关等。</li>
</ol>

        <h3 id="2-6-网络管理的标准"   >
          <a href="#2-6-网络管理的标准" class="heading-link"><i class="fas fa-link"></i></a>2.6 网络管理的标准</h3>
      
        <h4 id="2-6-1-OSI参考模型"   >
          <a href="#2-6-1-OSI参考模型" class="heading-link"><i class="fas fa-link"></i></a>2.6.1 OSI参考模型</h4>
      <ul>
<li>ISO 9595 公共管理信息服务定义CMIS</li>
<li>↓</li>
<li>ISO 9596 公共管理信息协议CMIP</li>
<li>↓</li>
<li>ISO 10164 系统管理功能SMF</li>
<li>↓</li>
<li>ISO 10165 管理信息结构SMI</li>
</ul>

        <h4 id="2-6-2-TCP-IP参考模型"   >
          <a href="#2-6-2-TCP-IP参考模型" class="heading-link"><i class="fas fa-link"></i></a>2.6.2 TCP/IP参考模型</h4>
      <ul>
<li>SGMP 简单网关监视协议</li>
<li>↓</li>
<li>SNMP 简单网络管理协议</li>
<li>↓</li>
<li>CMOT 基于TCP/IP的公共管理信息服务与协议</li>
<li>↓</li>
<li>RMON 远程网络监视</li>
</ul>

        <h4 id="2-6-3-其他模型"   >
          <a href="#2-6-3-其他模型" class="heading-link"><i class="fas fa-link"></i></a>2.6.3 其他模型</h4>
      <ul>
<li>TMN参考模型<code>(国际电信联盟)</code></li>
<li>IEEE LAN/MAN参考模型</li>
<li>Web参考模型</li>
</ul>

        <h2 id="三、网络管理的体系结构"   >
          <a href="#三、网络管理的体系结构" class="heading-link"><i class="fas fa-link"></i></a>三、网络管理的体系结构</h2>
      
        <h3 id="3-1-网络管理的基本模型"   >
          <a href="#3-1-网络管理的基本模型" class="heading-link"><i class="fas fa-link"></i></a>3.1 网络管理的基本模型</h3>
      <ul>
<li>ISO基于远程监控的管理框架</li>
<li>管理站-管理代理的模型</li>
</ul>

        <h4 id="网络管理系统的四个组成要素"   >
          <a href="#网络管理系统的四个组成要素" class="heading-link"><i class="fas fa-link"></i></a>网络管理系统的四个组成要素</h4>
      <p><img src="https://i.loli.net/2020/03/17/dT8RxcjGFzOQhlm.png" alt="网络管理系统组成要素-min.png"></p>

        <h3 id="3-2-网络运行管理模式"   >
          <a href="#3-2-网络运行管理模式" class="heading-link"><i class="fas fa-link"></i></a>3.2 网络运行管理模式</h3>
      <ul>
<li>集中式网络管理模式</li>
<li>分布式网络管理模式</li>
<li>混合管理模式</li>
</ul>

        <h4 id="问题-对比集中式网络管理和分布式网络管理的区别以及各自的优缺点"   >
          <a href="#问题-对比集中式网络管理和分布式网络管理的区别以及各自的优缺点" class="heading-link"><i class="fas fa-link"></i></a>问题 对比集中式网络管理和分布式网络管理的区别以及各自的优缺点</h4>
      <ul>
<li>集中式<ul>
<li>优点是结构简单，易于维护，管理集中，可以对整个网络系统全局进行有效管理。</li>
<li>确定是信息流集中于管理节点，易产生瓶颈，管理不够灵活，可扩展性差。</li>
</ul>
</li>
<li>分布式<ul>
<li>优点是扩展性好，稳固可靠，能提高网络性能。</li>
<li>确定是管理和维护比较复杂。   </li>
</ul>
</li>
</ul>

        <h3 id="3-3-网络管理的体系结构"   >
          <a href="#3-3-网络管理的体系结构" class="heading-link"><i class="fas fa-link"></i></a>3.3 网络管理的体系结构</h3>
      <p>  <img src="https://i.loli.net/2020/03/17/keiZrHQLxWuj8Sc.png" alt="网络管理的体系结构-min.png"></p>

        <h2 id="四、网络管理的功能"   >
          <a href="#四、网络管理的功能" class="heading-link"><i class="fas fa-link"></i></a>四、网络管理的功能</h2>
      
        <h3 id="4-1-故障管理"   >
          <a href="#4-1-故障管理" class="heading-link"><i class="fas fa-link"></i></a>4.1 故障管理</h3>
      <ul>
<li>故障检测和报警功能</li>
<li>故障预测功能</li>
<li>故障诊断和定位功能</li>
</ul>

        <h4 id="问题"   >
          <a href="#问题" class="heading-link"><i class="fas fa-link"></i></a>问题</h4>
      <p>连接测试属性故障管理中的<code>故障诊断和定位</code>功能<br>【解析】对设备和通信线路进行测试，找出故障原因和地点是指故障诊断和定位功能。</p>

        <h3 id="4-2-配置管理"   >
          <a href="#4-2-配置管理" class="heading-link"><i class="fas fa-link"></i></a>4.2 配置管理</h3>
      
        <h4 id="配置管理的主要功能"   >
          <a href="#配置管理的主要功能" class="heading-link"><i class="fas fa-link"></i></a>配置管理的主要功能</h4>
      <ul>
<li>定义配置信息</li>
<li>设置和修改设备属性</li>
<li>定义和修改网络元素间的互联关系</li>
<li>启动和终止网络运行</li>
<li>发行软件</li>
<li>检查参数值、互联关系和报告配置现状 </li>
</ul>

        <h3 id="4-3-安全管理"   >
          <a href="#4-3-安全管理" class="heading-link"><i class="fas fa-link"></i></a>4.3 安全管理</h3>
      <ul>
<li>安全信息维护</li>
<li>资源访问控制</li>
</ul>
<p><img src="https://i.loli.net/2020/03/17/aY6byuhQft9mS5N.png" alt="安全管理-min.png"></p>

        <h3 id="4-4-性能管理"   >
          <a href="#4-4-性能管理" class="heading-link"><i class="fas fa-link"></i></a>4.4 性能管理</h3>
      <p><img src="https://i.loli.net/2020/03/19/WlOndvDJQXPbNF4.png" alt="网络管理-概论-性能管理-min.png"></p>

        <h3 id="4-5-计费管理"   >
          <a href="#4-5-计费管理" class="heading-link"><i class="fas fa-link"></i></a>4.5 计费管理</h3>
      
        <h3 id="4-5-1-基本功能"   >
          <a href="#4-5-1-基本功能" class="heading-link"><i class="fas fa-link"></i></a>4.5.1 基本功能</h3>
      <ul>
<li>计算网络建设及运营成本</li>
<li>统计资源利用率，确定计费标准</li>
<li>通知应缴费用</li>
<li>用户费用上限设置</li>
<li>多个管理对象费用结合</li>
<li>保存账单和原始数据</li>
</ul>

        <h3 id="4-5-2-计费管理类型"   >
          <a href="#4-5-2-计费管理类型" class="heading-link"><i class="fas fa-link"></i></a>4.5.2 计费管理类型</h3>
      <ul>
<li>基于网络流量计费</li>
<li>基于使用时间计费</li>
<li>基于网络服务计费</li>
</ul>

        <h3 id="4-5-3-计费管理子过程"   >
          <a href="#4-5-3-计费管理子过程" class="heading-link"><i class="fas fa-link"></i></a>4.5.3 计费管理子过程</h3>
      <ul>
<li>使用率度量</li>
<li>计费处理</li>
<li>账单管理</li>
</ul>

        <h3 id="4-5-4-计费管理对象"   >
          <a href="#4-5-4-计费管理对象" class="heading-link"><i class="fas fa-link"></i></a>4.5.4 计费管理对象</h3>
      <ul>
<li>使用率度量控制对象</li>
<li>使用率度量数据对象</li>
<li>使用率记录</li>
</ul>
]]></content>
      <categories>
        <category>自考专升本</category>
      </categories>
      <tags>
        <tag>计算机网络管理</tag>
      </tags>
  </entry>
  <entry>
    <title>【英语单词】第5大区-increase与suggest</title>
    <url>/2020/04/03/%E3%80%90%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D%E3%80%91%E7%AC%AC5%E5%A4%A7%E5%8C%BA-increase%E4%B8%8Esuggest/</url>
    <content><![CDATA[
        <h2 id="一、increase"   >
          <a href="#一、increase" class="heading-link"><i class="fas fa-link"></i></a>一、increase</h2>
      
        <h3 id="1-1-increase"   >
          <a href="#1-1-increase" class="heading-link"><i class="fas fa-link"></i></a>1.1 increase</h3>
      <ul>
<li>v<ul>
<li>(使)增长，增多，增加</li>
</ul>
</li>
<li>n<ul>
<li>增长</li>
<li>增多</li>
<li>增加</li>
</ul>
</li>
</ul>

        <h4 id="1-1-1-派生"   >
          <a href="#1-1-1-派生" class="heading-link"><i class="fas fa-link"></i></a>1.1.1 派生</h4>
      <p>increasingly adv. 越来越多地；渐增地（感情色彩是向上的）</p>

        <h4 id="1-1-2-拓展"   >
          <a href="#1-1-2-拓展" class="heading-link"><i class="fas fa-link"></i></a>1.1.2 拓展</h4>
      <p>decrease</p>
<ul>
<li>v<ul>
<li>（使）变小，（使）减少</li>
</ul>
</li>
<li>n<ul>
<li>减少</li>
<li>减少的量</li>
</ul>
</li>
</ul>
<a id="more"></a>


        <h3 id="近义词-V（使）增长，增多，增加"   >
          <a href="#近义词-V（使）增长，增多，增加" class="heading-link"><i class="fas fa-link"></i></a>近义词 V（使）增长，增多，增加</h3>
      
        <h3 id="1-2-raise"   >
          <a href="#1-2-raise" class="heading-link"><i class="fas fa-link"></i></a>1.2 raise</h3>
      <ul>
<li>v<ul>
<li>举起</li>
<li>增加，提高</li>
<li>起身；</li>
<li>募集，引起，导致</li>
<li>激起，唤起；</li>
<li>提出（问题、反对等）；<code>(注意)</code></li>
<li>抚养，养育；<code>(注意)</code></li>
<li>饲养</li>
</ul>
</li>
<li>n<ul>
<li>加薪，提薪<code>(注意)</code></li>
</ul>
</li>
</ul>
<p><code>the day-to-day experience of raising kids</code></p>
<p><code>to raise living standards</code>提高生活水平</p>
<blockquote>
<p>经典歌曲 You Raise Me Up 因为你的鼓舞<br>歌写的是parent hood 亲子关系</p>
</blockquote>
<p><strong>下面是背诵级</strong></p>
<blockquote>
<p>You raise me up, so I can stand on mountains<br>因为你的鼓舞，我才可以征服群山<br>You raise me up, to walk on stormy seas<br>因为你的鼓舞，我才能够冒着暴雨破浪前行<br>I am strong, when I am on your shoulders<br>因为有你的肩膀倚靠，我才如此强大<br>You raise me up… To more than I can be<br>因为你的鼓舞，我才能超越自我</p>
</blockquote>
<p>backer 背后的支持者</p>

        <h3 id="1-3-rise"   >
          <a href="#1-3-rise" class="heading-link"><i class="fas fa-link"></i></a>1.3 rise</h3>
      <ul>
<li>v<ul>
<li>上升；</li>
<li>增加，提高</li>
<li>增强</li>
<li>站起来，起床</li>
<li>变得更加成功</li>
<li>起义，反抗</li>
<li>矗立，耸立</li>
</ul>
</li>
<li>n<ul>
<li>增长,提高</li>
<li>兴起</li>
<li>加薪</li>
</ul>
</li>
</ul>
<p>the dark fails<br>rise up to（to有达到的意思）<br>rise up by（by有到了的意思）</p>
<p><code>to rise above temptation(抵制诱惑)</code> 出现动词短语，动词不重要，关键看介词above<br>go beyond   v. 超出；胜过<br>Step above the limitation   超越限制</p>
<p>tempt vt. 诱惑；引起；冒…的风险；使感兴趣 与这个词有关的词色彩都不太好<br>contempt n. 轻视，蔑视；耻辱<br>contemptible adj. 可鄙的；卑劣的；可轻视的</p>

        <h3 id="1-4-expand"   >
          <a href="#1-4-expand" class="heading-link"><i class="fas fa-link"></i></a>1.4 expand</h3>
      <ul>
<li>v<ul>
<li>扩充，扩大</li>
<li>增加，增强</li>
<li>扩展（业务）</li>
</ul>
</li>
</ul>
<p><code>to expand the orchestra&#39;s repertoire(节目单)</code>扩大乐团的曲目<br>repeat v<br>repetition n 重复；<br>repertoire 曲目</p>
<p>arc / orc 词根  古老的<br>orchestrate vt. 把…编成管弦乐曲；（美）精心安排；把…协调地结合起来</p>

        <h4 id="1-4-1-派生"   >
          <a href="#1-4-1-派生" class="heading-link"><i class="fas fa-link"></i></a>1.4.1 派生</h4>
      <p>expansion   n. 膨胀；阐述；扩张物</p>

        <h3 id="1-5-multiply"   >
          <a href="#1-5-multiply" class="heading-link"><i class="fas fa-link"></i></a>1.5 multiply</h3>
      <ul>
<li>v<ul>
<li>乘，使相乘</li>
<li>成倍增加，迅速增加</li>
<li>繁殖，滋生</li>
</ul>
</li>
</ul>
<p>divide v （数）除，除以<br>divide by 除以<br>multiply by 乘以</p>

        <h3 id="1-6-accumulate"   >
          <a href="#1-6-accumulate" class="heading-link"><i class="fas fa-link"></i></a>1.6 accumulate</h3>
      <ul>
<li>v<ul>
<li>积累，积聚</li>
<li>（数量）逐渐增加</li>
</ul>
</li>
</ul>
<blockquote>
<p> I’m deeply skeptical of efforts that naively believe you can simply accumulate more data and that will do the job我对那些天真地认为你可以简单地积累更多数据就能完成工作的努力深表怀疑</p>
</blockquote>
<p>be deeply skeptical 怀疑；对什么表示怀疑<br>that naively    这天真<br>do the job  获得成功，完成<br>good job    干的不错</p>

        <h4 id="1-6-1-派生"   >
          <a href="#1-6-1-派生" class="heading-link"><i class="fas fa-link"></i></a>1.6.1 派生</h4>
      <p>accumulation    n. 积聚，累积；堆积物<br>accumulative    adj. 累计的；累积的；积聚而成的</p>

        <h3 id="1-7-swell"   >
          <a href="#1-7-swell" class="heading-link"><i class="fas fa-link"></i></a>1.7 swell</h3>
      <ul>
<li>v<ul>
<li>(使)膨胀；</li>
<li>肿胀</li>
<li>（使）增加，增大，扩大</li>
</ul>
</li>
</ul>
<p><code>The nation&#39;s annual rainfall is set to slide dramatically due to climate change, even as its population continues to swell</code></p>
<p>rainfall 降水量<br>waterfall 瀑布<br>be set to 即将开始<br>slide 下滑<br>dramatically adv. 戏剧地；引人注目地 adv. 显著地，剧烈地<code>(上面表示)</code><br>drama   n. 戏剧，戏剧艺术；剧本；戏剧性事件<br>due to 由于<br>even as 即使<br>sunset 日落<br>sunrise 日出<br>settings n. 设置（setting的复数）</p>
<p>set about doing 开始做<br>set out to do 着手做某事；开始做…<br>outset  n. 开始；开端<br>outcome n. 结果，结局；成果</p>
<p><code>to swell by(了) about 11% every year since 2000</code>自2000年以来每年增长约11%</p>

        <h3 id="1-8-escalate-（色彩是偏消极的）"   >
          <a href="#1-8-escalate-（色彩是偏消极的）" class="heading-link"><i class="fas fa-link"></i></a>1.8 escalate  （色彩是偏消极的）</h3>
      <ul>
<li>v<ul>
<li>（使）（战斗、暴力事件或不好的情况）升级，（使）恶化；</li>
<li>（使）升高，（使）增加</li>
</ul>
</li>
</ul>
<p>calate  来自于词根cele == speed 速度</p>
<p>accelerate 加速<br>decelerate  减速<br>a开头辅音双写，表加强语气</p>
<p>escalator   n. （美）自动扶梯；电动扶梯<br>elevator    n. 电梯；升降机；升降舵；起卸机 =lift</p>

        <h2 id="二、suggest"   >
          <a href="#二、suggest" class="heading-link"><i class="fas fa-link"></i></a>二、suggest</h2>
      
        <h3 id="2-1-suggest"   >
          <a href="#2-1-suggest" class="heading-link"><i class="fas fa-link"></i></a>2.1 suggest</h3>
      <ul>
<li>v<ul>
<li>提议，建议</li>
<li>推荐，举荐</li>
<li>暗示，表明</li>
<li>使人想到</li>
</ul>
</li>
</ul>
<p><code>a new study suggests that ...</code>最新的研究表明</p>

        <h4 id="2-1-1-派生"   >
          <a href="#2-1-1-派生" class="heading-link"><i class="fas fa-link"></i></a>2.1.1 派生</h4>
      <p>suggestion  n. 建议；示意；微量，细微的迹象<br>suggestive adj. 暗示的；提示的；影射的</p>
<p>ive结尾的形容词代表什么什么的性质的（抽象概念）</p>
<p>productive  adj. 能生产的；生产的，生产性的；多产的；富有成效的<br>reproductive    adj. 生殖的；再生的；复制的</p>
<p>ity 结尾的名词就是抽象<br>ion 结尾的名词</p>
<p>creation n. 创造，创作；创作物，产物（指具体东西）<br>creativity  n. 创造力；创造性（指抽象的性质）</p>

        <h3 id="近义词-v-提议，建议"   >
          <a href="#近义词-v-提议，建议" class="heading-link"><i class="fas fa-link"></i></a>近义词 v.提议，建议</h3>
      
        <h3 id="2-2-recommend"   >
          <a href="#2-2-recommend" class="heading-link"><i class="fas fa-link"></i></a>2.2 recommend</h3>
      <ul>
<li>v<ul>
<li>推荐，举荐</li>
<li>劝告，建议</li>
</ul>
</li>
</ul>
<p>recommendation   n. 推荐；建议；推荐信<br>commend vt. 推荐；称赞；把…委托<br>command v. 命令；<br>The commander   司令官<br>demand 词根 命令或要求<br>mend vt. 修理，修补；改善；修改</p>
<p>re词根前缀 agian 再一次；back 往后推</p>
<blockquote>
<p>Dietary guidelines recommend that women and men should respectively eat around 25 and 38 grams of fiber per day ,but American adults eat just 15 daily grams on average.</p>
</blockquote>
<p>diet    n. 饮食；食物；规定饮食<br>dietary n. 规定的食物；食谱</p>

        <h4 id="2-2-1-扩展"   >
          <a href="#2-2-1-扩展" class="heading-link"><i class="fas fa-link"></i></a>2.2.1 扩展</h4>
      <p>commend v(公开地)赞扬；推荐，推崇。</p>

        <h3 id="2-3-propose"   >
          <a href="#2-3-propose" class="heading-link"><i class="fas fa-link"></i></a>2.3 propose</h3>
      <ul>
<li>v<ul>
<li>（尤指在会议上）正式提议；</li>
<li>打算，计划</li>
<li>提名；</li>
<li>提出…公表决；</li>
<li>求婚</li>
</ul>
</li>
</ul>
<p>dispose vt. 处理；处置；安排<br>dispose of  处理；转让；解决；吃光；除掉；卖掉<br>disposable a 一次性</p>
<blockquote>
<p>Man proposes,God disposes 谋事在人，成事在天</p>
</blockquote>
<blockquote>
<p>For one ,the administration proposes to begin publishing information about the economic consequences of listing species , because doing so “may be informative to the public “</p>
</blockquote>
<p>administration n. 管理；行政；实施；行政机构<br>publishing 发布   n. 出版；出版业<br>listing species 濒危物种<br>extinction species 灭绝物种<br>informative adj. 提供有用信息的；教育性的</p>

        <h4 id="2-3-1-派生"   >
          <a href="#2-3-1-派生" class="heading-link"><i class="fas fa-link"></i></a>2.3.1 派生</h4>
      <p>proposal    n. 提议，建议；求婚<br>pro + post=&gt; 向前摆个post=》求婚</p>

        <h3 id="2-4-advise"   >
          <a href="#2-4-advise" class="heading-link"><i class="fas fa-link"></i></a>2.4 advise</h3>
      <ul>
<li>v<ul>
<li>(经验或知识丰富者)劝告，忠告，建议；</li>
<li>通知，正式告知</li>
</ul>
</li>
</ul>

        <h4 id="2-4-1-派生"   >
          <a href="#2-4-1-派生" class="heading-link"><i class="fas fa-link"></i></a>2.4.1 派生</h4>
      <p>advice 名词<br>advisor 咨询人<br>advisory<br>advisable   adj. 明智的，可取的，适当的</p>
<blockquote>
<p>Advice is like snow - the softer it falls, the longer it dwells upon, and the deeper it sinks into the mind</p>
</blockquote>
<p>dwell in    居住在<br>dwell 居住<br>swell   adj. （非正式）极好的，非常愉快的；漂亮的，时髦的；<br>dwells upon 住在<br>sinks into  沉入</p>

        <h3 id="v-暗示、表明"   >
          <a href="#v-暗示、表明" class="heading-link"><i class="fas fa-link"></i></a>v 暗示、表明</h3>
      
        <h3 id="2-5-indicate"   >
          <a href="#2-5-indicate" class="heading-link"><i class="fas fa-link"></i></a>2.5 indicate</h3>
      <ul>
<li>v<ul>
<li>表明，显示</li>
<li>强烈暗示，指示，支出</li>
<li>标示，注明</li>
</ul>
</li>
</ul>
<p>studiously  adv. 故意地；好学地；注意地<br>intentionally   adv. 故意地，有意地</p>
<p>stick to    v. 坚持；粘住</p>

        <h4 id="2-5-1-派生"   >
          <a href="#2-5-1-派生" class="heading-link"><i class="fas fa-link"></i></a>2.5.1 派生</h4>
      <p>indiction   n. 诏示<br>indicative  adj. 象征的；指示的；表示…的<br>indicator   n. 指标，标志，迹象；接近于index的意思</p>

        <h3 id="2-6-imply"   >
          <a href="#2-6-imply" class="heading-link"><i class="fas fa-link"></i></a>2.6 imply</h3>
      <ul>
<li>v<ul>
<li>意指，暗指，暗示；</li>
<li>意味着（某事可能是真的）</li>
<li>必然包含，使有必要</li>
</ul>
</li>
</ul>
<p><code>as its name implies</code>顾名思义</p>

        <h4 id="2-6-1-派生"   >
          <a href="#2-6-1-派生" class="heading-link"><i class="fas fa-link"></i></a>2.6.1 派生</h4>
      <p>implication n. 含义；暗示；牵连，卷入；可能的结果，影响</p>

        <h3 id="2-7-manifest"   >
          <a href="#2-7-manifest" class="heading-link"><i class="fas fa-link"></i></a>2.7 manifest</h3>
      <ul>
<li>v<ul>
<li>清楚显示，表明（尤指情感、态度或品质）</li>
</ul>
</li>
<li>adj<ul>
<li>明显的</li>
<li>显而易见的</li>
</ul>
</li>
</ul>

        <h4 id="2-7-1-派生"   >
          <a href="#2-7-1-派生" class="heading-link"><i class="fas fa-link"></i></a>2.7.1 派生</h4>
      <p>manifesto   vi. 发表宣言<br>communist manifesto 共产党宣言</p>

        <h3 id="2-8-hint"   >
          <a href="#2-8-hint" class="heading-link"><i class="fas fa-link"></i></a>2.8 hint</h3>
      <ul>
<li>v<ul>
<li>暗示，示意</li>
</ul>
</li>
<li>n <ul>
<li>暗示，提示 <code>(考试常考)</code></li>
<li>征兆</li>
<li>迹象</li>
<li>【a hint of】少许，少量</li>
<li>秘诀，窍门</li>
</ul>
</li>
</ul>
<p>clue    线索<br>a + n + of/n.s + of = some/may</p>
<blockquote>
<p>“The data we present also into that further deterioration of the Western microbiota is possible, the team writes “</p>
</blockquote>
<p>present 表达；提出<br>deterioration   n. 恶化；退化；堕落<br>biology 生命<br>biography   n. 传记；档案；个人简介</p>
<p>autobiography   n. 自传；自传文学</p>

        <h4 id="2-8-1-拓展"   >
          <a href="#2-8-1-拓展" class="heading-link"><i class="fas fa-link"></i></a>2.8.1 拓展</h4>
      <p>tip n 窍门，忠告，建议<br>tips    n. 秘诀，技巧；小贴士，小窍门<br>clue n线索、提示<br>detective   侦探</p>
]]></content>
      <categories>
        <category>英语学习</category>
      </categories>
      <tags>
        <tag>英语单词</tag>
      </tags>
  </entry>
  <entry>
    <title>【计算机网络管理】第七章 实用网络管理系统</title>
    <url>/2020/04/03/%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E3%80%91%E7%AC%AC%E4%B8%83%E7%AB%A0%20%E5%AE%9E%E7%94%A8%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[
        <h2 id="本章重难点"   >
          <a href="#本章重难点" class="heading-link"><i class="fas fa-link"></i></a>本章重难点</h2>
      <p>本章一般会出选择题、填空题、分值在5分左右。</p>

        <h3 id="本章的重难点和常考知识点"   >
          <a href="#本章的重难点和常考知识点" class="heading-link"><i class="fas fa-link"></i></a>本章的重难点和常考知识点</h3>
      <ul>
<li>网络管理系统软件（常考<code>选择题</code>、<code>填空题</code>）</li>
<li>Cacti图形化网络管理系统(常考<code>选择题</code>、<code>填空题</code>)</li>
<li>使用Cacti管理网络管（常考<code>选择题</code>、<code>填空题</code>）</li>
</ul>
<a id="more"></a>


        <h2 id="一、网络管理系统概述"   >
          <a href="#一、网络管理系统概述" class="heading-link"><i class="fas fa-link"></i></a>一、网络管理系统概述</h2>
      <p>网络管理系统是实现网络功能、保障网络正常运行的软硬件组成的综合系统。</p>
<p><img src="https://i.loli.net/2020/03/28/Y64Oag8Tf5buj3w.png" alt="网络管理-实用网络管理系统-网络管理系统概述-发展趋势1-min.png"></p>

        <h2 id="二、网络管理系统软件（平台）"   >
          <a href="#二、网络管理系统软件（平台）" class="heading-link"><i class="fas fa-link"></i></a>二、网络管理系统软件（平台）</h2>
      
        <h3 id="2-1-CiscoWork"   >
          <a href="#2-1-CiscoWork" class="heading-link"><i class="fas fa-link"></i></a>2.1 CiscoWork</h3>
      <p><img src="https://i.loli.net/2020/03/28/CdG8rH1o7aXuqJj.png" alt="网络管理-实用网络管理系统-网络管理系统软件-CisoWork1-min.png"></p>
<p><img src="https://i.loli.net/2020/03/28/iLxUGVF9Tabw3WM.png" alt="网络管理-实用网络管理系统-网络管理系统软件-CisoWork3-min.png"></p>

        <h3 id="2-2-华为Quidview"   >
          <a href="#2-2-华为Quidview" class="heading-link"><i class="fas fa-link"></i></a>2.2 华为Quidview</h3>
      <p>华为公司针对IP网络开发的适合于各种网络管理的网络管理软件，是iMessager系统网络管理产品之。</p>

        <h4 id="特点"   >
          <a href="#特点" class="heading-link"><i class="fas fa-link"></i></a>特点</h4>
      <ul>
<li>图形化管理界面</li>
<li>操作简单</li>
<li>运行环境与平台无关（<code>Java开发</code>）</li>
<li>中英文显示</li>
</ul>

        <h3 id="2-3-其他网络管理系统"   >
          <a href="#2-3-其他网络管理系统" class="heading-link"><i class="fas fa-link"></i></a>2.3 其他网络管理系统</h3>
      <ul>
<li>HP OpenView</li>
<li>IBM Tivoli NetView(<code>Unix</code>)</li>
<li>SNMPc(<code>分布式、大型</code>)</li>
<li>Cabletron Sepctrum(<code>智能</code>)</li>
<li>SolarWinds Orion</li>
<li>StarView（<code>Windows</code>）</li>
</ul>

        <h2 id="三、Cacti图形化网络管理系统"   >
          <a href="#三、Cacti图形化网络管理系统" class="heading-link"><i class="fas fa-link"></i></a>三、Cacti图形化网络管理系统</h2>
      
        <h3 id="3-1-Cacti-系统特点"   >
          <a href="#3-1-Cacti-系统特点" class="heading-link"><i class="fas fa-link"></i></a>3.1 Cacti 系统特点</h3>
      <ul>
<li>免费开源</li>
<li>跨平台</li>
<li>界面友好</li>
<li>多种数据采集方式</li>
<li>丰富的模板</li>
<li>可扩展性</li>
</ul>

        <h3 id="3-2-运行条件"   >
          <a href="#3-2-运行条件" class="heading-link"><i class="fas fa-link"></i></a>3.2 运行条件</h3>
      <ul>
<li>Apache</li>
<li>PHP</li>
<li>MySQL</li>
<li>SNMP</li>
</ul>

        <h3 id="3-3-组成部分"   >
          <a href="#3-3-组成部分" class="heading-link"><i class="fas fa-link"></i></a>3.3 组成部分</h3>
      <ul>
<li>拓扑管理器<ul>
<li>需安装Weathermap插件</li>
</ul>
</li>
<li>事件管理器<ul>
<li>日志查看工具查看系统报警日志</li>
<li>Syslog插件扩展系统日志功能</li>
<li>Settings插件实现邮件报警</li>
<li>Thold插件设置设备报警阈值</li>
</ul>
</li>
<li>性能管理器<ul>
<li>可以同时监视多个网络设置或接口</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>自考专升本</category>
      </categories>
      <tags>
        <tag>计算机网络管理</tag>
      </tags>
  </entry>
  <entry>
    <title>【计算机网络管理】第三章 管理信息结构</title>
    <url>/2020/04/03/%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E3%80%91%E7%AC%AC%E4%B8%89%E7%AB%A0%20%E7%AE%A1%E7%90%86%E4%BF%A1%E6%81%AF%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/03/23/gZx8U9LHNwThV4f.png" alt="网络管理-第三章管理信息结构-脑图-min.png"></p>

        <h2 id="本章重难点"   >
          <a href="#本章重难点" class="heading-link"><i class="fas fa-link"></i></a>本章重难点</h2>
      <p>本章一般会出选择题、填空题和简单题，分值在15-20分左右</p>

        <h3 id="本章的重难点和常考知识点"   >
          <a href="#本章的重难点和常考知识点" class="heading-link"><i class="fas fa-link"></i></a>本章的重难点和常考知识点</h3>
      <ul>
<li>SNMP基本概念（常考<code>选择题</code>、<code>简单题</code>）</li>
<li>SNMP管理信息结构（常考<code>选择题</code>、<code>综合题</code>）</li>
<li>MIB树结构（常考<code>选择题</code>、<code>填空题</code>）</li>
<li>MIB-2功能组（常考<code>选择题</code>、<code>简单题</code>）</li>
</ul>
<a id="more"></a>


        <h2 id="一、SNMP的基本概念"   >
          <a href="#一、SNMP的基本概念" class="heading-link"><i class="fas fa-link"></i></a>一、SNMP的基本概念</h2>
      
        <h3 id="1-1-TCP-IP协议簇及管理框架"   >
          <a href="#1-1-TCP-IP协议簇及管理框架" class="heading-link"><i class="fas fa-link"></i></a>1.1 TCP/IP协议簇及管理框架</h3>
      <p>TCP/IP协议栈</p>
<p><img src="https://i.loli.net/2020/03/21/qiKxDjZ1tyEHmfY.png" alt="网络管理-管理信息结构-TCPIP协议栈1-min.png"></p>

        <h3 id="1-2-SNMP管理TCP-IP的运行，它由两部分组成"   >
          <a href="#1-2-SNMP管理TCP-IP的运行，它由两部分组成" class="heading-link"><i class="fas fa-link"></i></a>1.2 SNMP管理TCP/IP的运行，它由两部分组成</h3>
      <ul>
<li>SNMP<ul>
<li>管理信息库结构的定义</li>
<li>访问管理信息库的协议规范</li>
</ul>
</li>
</ul>

        <h3 id="1-3-SNMP体系结构"   >
          <a href="#1-3-SNMP体系结构" class="heading-link"><i class="fas fa-link"></i></a>1.3 SNMP体系结构</h3>
      <p>网络管理的体系结构-协议、团体、委托代理</p>
<p><img src="https://i.loli.net/2020/03/23/btXmj9dnSgiRoDW.png" alt="网络管理-SNMP体系结构1-min.png"></p>

        <h2 id="二、SNMP的管理信息结构"   >
          <a href="#二、SNMP的管理信息结构" class="heading-link"><i class="fas fa-link"></i></a>二、SNMP的管理信息结构</h2>
      
        <h3 id="2-1-标量对象和表对象"   >
          <a href="#2-1-标量对象和表对象" class="heading-link"><i class="fas fa-link"></i></a>2.1 标量对象和表对象</h3>
      
        <h4 id="SMI中只存储标量数据和二维数组"   >
          <a href="#SMI中只存储标量数据和二维数组" class="heading-link"><i class="fas fa-link"></i></a>SMI中只存储标量数据和二维数组</h4>
      <ul>
<li>SMI<ul>
<li>标量对象（简单对象和列对象）</li>
<li>表对象（二维数组对象）</li>
</ul>
</li>
</ul>

        <h4 id="TCP连接表"   >
          <a href="#TCP连接表" class="heading-link"><i class="fas fa-link"></i></a>TCP连接表</h4>
      <p><img src="https://i.loli.net/2020/03/23/nPYde31T5NzMCkh.png" alt="网络管理-SNMP的管理信息结构-TCP连接表1-min.png"></p>

        <h4 id="对象实例的标识"   >
          <a href="#对象实例的标识" class="heading-link"><i class="fas fa-link"></i></a>对象实例的标识</h4>
      <p><img src="https://i.loli.net/2020/03/23/DCzXga58WspUulb.png" alt="网络管理-SNMP体系结构-列对象实例的标识1-min.png"></p>

        <h3 id="2-2-词典顺序"   >
          <a href="#2-2-词典顺序" class="heading-link"><i class="fas fa-link"></i></a>2.2 词典顺序</h3>
      <ul>
<li>对象标识符是整数序列，这种序列反映了该对象在MIB中逻辑位置，同时表示了一种词典顺序。</li>
<li>按照一定的方式遍历MIB树，就可以排除所以对象及其实例的词典顺序。</li>
</ul>
<p>对象及其实列的词典顺序<br> <img src="https://i.loli.net/2020/03/23/qTOMBQhsWgrf7lE.png" alt="网络管理-管理结构-词典顺序-min.png"></p>

        <h3 id="2-3-问题"   >
          <a href="#2-3-问题" class="heading-link"><i class="fas fa-link"></i></a>2.3 问题</h3>
      <p>在对象标识树中，SNMP操作可以访问的是（叶子节点）</p>
<p>【解析】MIB树中的叶子节点代表了管理对象，是SNMP操作访问的对象，中间结点的作用是对管理对象进行分类，不是SNMP操作对象。</p>

        <h2 id="三、MIB树结构"   >
          <a href="#三、MIB树结构" class="heading-link"><i class="fas fa-link"></i></a>三、MIB树结构</h2>
      <p><img src="https://i.loli.net/2020/03/23/cVr5gQblWifAF9U.png" alt="网络管理-MIB树结构1-min.png"></p>

        <h3 id="3-1-MIB简介"   >
          <a href="#3-1-MIB简介" class="heading-link"><i class="fas fa-link"></i></a>3.1 MIB简介</h3>
      <p>层次树结构–有3个作用</p>
<ul>
<li>表示管理和控制关系</li>
<li>提供结构化的信息组织形式</li>
<li>提供了对象命名机制</li>
</ul>

        <h3 id="3-2-MIB中数据类型"   >
          <a href="#3-2-MIB中数据类型" class="heading-link"><i class="fas fa-link"></i></a>3.2 MIB中数据类型</h3>
      <ul>
<li><p>MIB由一系列的对象组成。每个对象属于一定的对象类型，并且有一个具体的值。</p>
</li>
<li><p>SNMP的对象是用ASN.1定义的，为了保持简单性，仅用到了ASN.1的一个子集。 </p>
<p><img src="https://i.loli.net/2020/03/23/NJG9ejI8dXFzc2A.png" alt="网络管理-MIB中数据类型1-min.png"></p>
</li>
</ul>

        <h3 id="3-3-管理信息结构的定义"   >
          <a href="#3-3-管理信息结构的定义" class="heading-link"><i class="fas fa-link"></i></a>3.3 管理信息结构的定义</h3>
      <ul>
<li><p>对象类型的宏定义</p>
<ul>
<li>SYNTAX:表示对象类型的抽象语法</li>
<li>ACCESS:定义访问对象的方式</li>
<li>STATUS:说明实现是否支持这种对象</li>
</ul>
</li>
<li><p>宏实例</p>
<ul>
<li>用具体的值代替宏定义的变量</li>
<li>表示实际的ASN.1类型</li>
<li>规定了该类型可取值的集合</li>
</ul>
</li>
</ul>

        <h2 id="四、MIB-2功能组"   >
          <a href="#四、MIB-2功能组" class="heading-link"><i class="fas fa-link"></i></a>四、MIB-2功能组</h2>
      
        <h3 id="4-1-系统组、接口组、地址转换组"   >
          <a href="#4-1-系统组、接口组、地址转换组" class="heading-link"><i class="fas fa-link"></i></a>4.1 系统组、接口组、地址转换组</h3>
      <ul>
<li>系统组<ul>
<li>包含最常用的被管对象</li>
<li>失效管理</li>
<li>配置管理</li>
</ul>
</li>
<li>接口组<ul>
<li>包括关于主键接口的配置信息和统计信息</li>
<li>失效管理</li>
<li>配置管理</li>
<li>性能管理</li>
<li>计费管理</li>
</ul>
</li>
<li>地址转换组<ul>
<li>每一行对应系统的一个物理接口</li>
<li>表示网络地址到物理地址的映射</li>
</ul>
</li>
</ul>

        <h3 id="4-2-IP组、ICMP组"   >
          <a href="#4-2-IP组、ICMP组" class="heading-link"><i class="fas fa-link"></i></a>4.2 IP组、ICMP组</h3>
      <ul>
<li>IP组<ul>
<li>提供了与IP协议有关的信息</li>
<li>失效管理</li>
<li>配置管理</li>
<li>性能管理</li>
<li>计费管理</li>
</ul>
</li>
<li>ICMP组<ul>
<li>关于实体的ICMP信息的对象</li>
<li>接受或发送的ICMP报文的统计数据</li>
<li>性能管理</li>
</ul>
</li>
</ul>

        <h3 id="4-3-TCP组、UDP组、EGP组"   >
          <a href="#4-3-TCP组、UDP组、EGP组" class="heading-link"><i class="fas fa-link"></i></a>4.3 TCP组、UDP组、EGP组</h3>
      <ul>
<li>TCP组<ul>
<li>包含TCP系统对象和TCP连接表</li>
<li>配置管理</li>
<li>性能管理</li>
<li>计费管理</li>
</ul>
</li>
<li>UDP组<ul>
<li>包含发送和接收数据报的对象</li>
<li>包含udp Table表</li>
<li>性能管理</li>
<li>计费管理</li>
</ul>
</li>
<li>EGP组<ul>
<li>两个自制系统中的路由器之间交换路由信息的协议</li>
<li>失效管理</li>
<li>配置管理</li>
<li>性能管理</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>自考专升本</category>
      </categories>
      <tags>
        <tag>计算机网络管理</tag>
      </tags>
  </entry>
  <entry>
    <title>【计算机网络管理】第二章 抽象语法表示ASN.1</title>
    <url>/2020/04/03/%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E3%80%91%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E8%A1%A8%E7%A4%BAASN.1/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/03/21/olxYL92nIkQrN6V.png" alt="网络管理-第二章抽象语法表示ASN.1-脑图-min.png"></p>

        <h2 id="本章重难点"   >
          <a href="#本章重难点" class="heading-link"><i class="fas fa-link"></i></a>本章重难点</h2>
      <p>本章一般会出选择题、填空题、简答题和综合体，分值在<code>15-20</code>分左右<br>。</p>

        <h3 id="本章的重难点和常考知识点"   >
          <a href="#本章的重难点和常考知识点" class="heading-link"><i class="fas fa-link"></i></a>本章的重难点和常考知识点</h3>
      <ul>
<li>ASN.1的基本概念（常考<code>选择题</code>、<code>填空题</code>）</li>
<li>基本编码规则（常考<code>选择题</code>、<code>综合题</code>）</li>
<li>ASN.1宏定义（常考<code>选择题</code>、<code>简答题</code>）</li>
</ul>
<a id="more"></a>


        <h2 id="一、网络数据表示及编码"   >
          <a href="#一、网络数据表示及编码" class="heading-link"><i class="fas fa-link"></i></a>一、网络数据表示及编码</h2>
      <ul>
<li>表示层的功能：提供统一的网络数据表示</li>
<li>表示实体：定义了应用数据的抽象语法</li>
<li>传输语法：把抽象数据变换为比特串的编码规则</li>
</ul>

        <h3 id="终端系统"   >
          <a href="#终端系统" class="heading-link"><i class="fas fa-link"></i></a>终端系统</h3>
      <ul>
<li>应用实体</li>
<li>表示实体(ASN.1)</li>
</ul>

        <h2 id="二、ASN-1语法"   >
          <a href="#二、ASN-1语法" class="heading-link"><i class="fas fa-link"></i></a>二、ASN.1语法</h2>
      <p>ASN.1中，每一个<code>数据类型</code>都有一个标签，标签有类型和值。</p>
<ul>
<li>简单类型：由单一成分构成的原子类型</li>
<li>构造类型：由两种以上成分构成的构造类型</li>
<li>标签类型：由已知类型定义的新类型<ul>
<li>通用标签 UNIVERSAL</li>
<li>应用标签 APPLICATION</li>
<li>上下文专用标签 CONTEXT-SPECIFIC</li>
<li>私有标签 PRIVATE</li>
</ul>
</li>
<li>其他类型：包括CHOICE和ANY两种类型</li>
</ul>

        <h3 id="问题"   >
          <a href="#问题" class="heading-link"><i class="fas fa-link"></i></a>问题</h3>
      <p>在ASN.1定义的数据类型里，构造类型有<code>序列</code>和<code>集合</code>两种，SEQUENCE是<code>序列</code>类型。</p>
<p>【解析】构造类型有序列(SEQUENCE、SEQUENCE OF)和集合（SET、SET OF）两种。</p>

        <h3 id="2-1-子类型"   >
          <a href="#2-1-子类型" class="heading-link"><i class="fas fa-link"></i></a>2.1 子类型</h3>
      <p>子类型-由限制父类型的值集合而到处的类型</p>
<ul>
<li>产生子类型的方法<ul>
<li>单个值</li>
<li>包含子类型</li>
<li>值区间</li>
<li>可用字符</li>
<li>限制大小</li>
<li>内部子类型</li>
</ul>
</li>
</ul>

        <h4 id="问题-1"   >
          <a href="#问题-1" class="heading-link"><i class="fas fa-link"></i></a>问题</h4>
      <p>在ASN.1子类型的描述中，值区间这种方法只能应用于整数和实数类型</p>
<p>【解析】子类型有6种产生方法，其中值区间法指出该类型可取值的区间，因此只适用于整数和实数类型。</p>

        <h2 id="三、ASN-1基本编码规则BER（考试重难点）"   >
          <a href="#三、ASN-1基本编码规则BER（考试重难点）" class="heading-link"><i class="fas fa-link"></i></a>三、ASN.1基本编码规则BER（考试重难点）</h2>
      
        <h3 id="3-1-BER编码结构"   >
          <a href="#3-1-BER编码结构" class="heading-link"><i class="fas fa-link"></i></a>3.1 BER编码结构</h3>
      
        <h4 id="TLV（标签-长度-值）编码结构"   >
          <a href="#TLV（标签-长度-值）编码结构" class="heading-link"><i class="fas fa-link"></i></a>TLV（标签-长度-值）编码结构</h4>
      <p><img src="https://i.loli.net/2020/03/19/wEOq5jNDuePml2Q.png" alt="网络管理-ASN1-BER编码结构02-min.png"></p>

        <h4 id="标签字段"   >
          <a href="#标签字段" class="heading-link"><i class="fas fa-link"></i></a>标签字段</h4>
      <p><img src="https://i.loli.net/2020/03/19/QCfuSL6TDjyBerk.png" alt="网络管理-ASN1-BER编码结构-标签字段02-min.png"></p>

        <h4 id="长度字段-表示值字段所占字节数"   >
          <a href="#长度字段-表示值字段所占字节数" class="heading-link"><i class="fas fa-link"></i></a>长度字段-表示值字段所占字节数</h4>
      <p><img src="https://i.loli.net/2020/03/19/rZNjU1sxoSzlLFM.png" alt="网络管理-ASN1-BER编码结构-长度字段-min.png"></p>

        <h4 id="问题-2"   >
          <a href="#问题-2" class="heading-link"><i class="fas fa-link"></i></a>问题</h4>
      <p>十进制数256的BER编码为02 02 10 00<br>【解析】需要对256的标签-长度-值进行编码</p>
<p> <img src="https://i.loli.net/2020/03/21/akY5lZx4Rz2bjLO.png" alt="网络管理-ASN1-编码解析1-min.png"></p>

        <h3 id="3-2-BER字段扩充"   >
          <a href="#3-2-BER字段扩充" class="heading-link"><i class="fas fa-link"></i></a>3.2 BER字段扩充</h3>
      <p>标签字段扩充<br><img src="https://i.loli.net/2020/03/21/7DWnEmTfVSQuIqa.png" alt="网络管理-ASN1-BER字段扩充1-min.png"></p>
<p>长度字段扩充<br>长度值&gt;=127时</p>
<ul>
<li>长格式</li>
<li>不确定格式</li>
</ul>

        <h4 id="【问题】基本编码规则中哪两种字段需求扩充？其扩充的方法是什么？"   >
          <a href="#【问题】基本编码规则中哪两种字段需求扩充？其扩充的方法是什么？" class="heading-link"><i class="fas fa-link"></i></a>【问题】基本编码规则中哪两种字段需求扩充？其扩充的方法是什么？</h4>
      <p>两种需求扩充的情况:</p>
<ul>
<li>当标签值大于30时标签字段需求扩充，</li>
<li>当值部分大于一个字节的表示范围时长度字节需要扩充。</li>
</ul>

        <h4 id="对标签值的扩充方法为"   >
          <a href="#对标签值的扩充方法为" class="heading-link"><i class="fas fa-link"></i></a>对标签值的扩充方法为:</h4>
      <ul>
<li>用5位表示0~30的编码，当标签值大于等于30时，这5位为全1，作为转义符，实际的标签值编码表示在后续字节</li>
<li>后续字节的左边第一位表示是否最后一个扩充字节,只有最后一个扩充自己的左边第一位置0，其余扩充字节左边第一位置1。</li>
</ul>

        <h4 id="对长度字节的扩充方法为"   >
          <a href="#对长度字节的扩充方法为" class="heading-link"><i class="fas fa-link"></i></a>对长度字节的扩充方法为:</h4>
      <ul>
<li>小于127的数用长度字节的右边7位表示，最左边的一位置0；</li>
<li>大于等于127的数用后续若干字节表示，原来的长度字节第一位置1，其余7位指明后续用于表示长度的字节数。</li>
</ul>

        <h2 id="四、ASN-1的宏定义"   >
          <a href="#四、ASN-1的宏定义" class="heading-link"><i class="fas fa-link"></i></a>四、ASN.1的宏定义</h2>
      
        <h3 id="4-1-模块定义"   >
          <a href="#4-1-模块定义" class="heading-link"><i class="fas fa-link"></i></a>4.1 模块定义</h3>
      <p>由一组类型定义和值定义组成，用于定义一个抽象数据类型ASN.1模块</p>

        <h3 id="4-2-宏表示"   >
          <a href="#4-2-宏表示" class="heading-link"><i class="fas fa-link"></i></a>4.2 宏表示</h3>
      <ul>
<li>宏表示:用于定义宏的一种表示机制</li>
<li>↓</li>
<li>宏定义:用宏表示定义的一个宏代表宏实例的集合</li>
<li>↓</li>
<li>宏实例：用具体的值代替宏定义的变量而产生的实例。</li>
</ul>

        <h3 id="4-3【问题】为什么要用宏定义？怎样用宏定义得到宏实例？"   >
          <a href="#4-3【问题】为什么要用宏定义？怎样用宏定义得到宏实例？" class="heading-link"><i class="fas fa-link"></i></a>4.3【问题】为什么要用宏定义？怎样用宏定义得到宏实例？</h3>
      <p>ASN.1宏提供了创建“模板”的功能，这也是引入ASN.1宏的原因。ASN.1宏使得ASN.1语言具有良好的扩充性。</p>
<p>当用一个具体的值代替宏定义中的变量或参数时就产生了宏实例，它表示一个实际的ASN.1类型（称为返回的类型）,并且规定了该类型可取的值的集合（称为返回的值）。</p>
]]></content>
      <categories>
        <category>自考专升本</category>
      </categories>
      <tags>
        <tag>计算机网络管理</tag>
      </tags>
  </entry>
  <entry>
    <title>【计算机网络管理】第六章 网络管理开发技术</title>
    <url>/2020/04/03/%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E3%80%91%E7%AC%AC%E5%85%AD%E7%AB%A0%20%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[
        <h2 id="本章重难点"   >
          <a href="#本章重难点" class="heading-link"><i class="fas fa-link"></i></a>本章重难点</h2>
      <p>本章一般会出选择题、填空题，分值在5-10分左右。</p>

        <h3 id="本章的重难点和常考知识点"   >
          <a href="#本章的重难点和常考知识点" class="heading-link"><i class="fas fa-link"></i></a>本章的重难点和常考知识点</h3>
      <ul>
<li>网络管理开发概述（常考<code>选择题</code>）</li>
<li>Window SNMP服务（常考<code>选择题</code>、<code>填空题</code>）</li>
<li>Window 网络管理应用程序开发（常考<code>选择题</code>、<code>填空题</code>）</li>
</ul>
<p><img src="https://i.loli.net/2020/03/26/kZbiLUhXBPyoYQt.png" alt="网络管理-第六章网络管理开发技术-脑图-min.png"></p>
<a id="more"></a>



        <h2 id="一、-网络管理开发概述"   >
          <a href="#一、-网络管理开发概述" class="heading-link"><i class="fas fa-link"></i></a>一、 网络管理开发概述</h2>
      
        <h3 id="1-1-网络管理应用程序的基本功能"   >
          <a href="#1-1-网络管理应用程序的基本功能" class="heading-link"><i class="fas fa-link"></i></a>1.1 网络管理应用程序的基本功能</h3>
      <ul>
<li>网络发送</li>
<li>管理站轮询</li>
<li>MIB编译器和数据库</li>
<li>MIB浏览器</li>
<li>MIB搜索器</li>
<li>陷入信息记录</li>
</ul>

        <h3 id="1-2-SNMP编程任务"   >
          <a href="#1-2-SNMP编程任务" class="heading-link"><i class="fas fa-link"></i></a>1.2 SNMP编程任务</h3>
      <ul>
<li>SNMP编程主要包括两大部分<ul>
<li>网络管理程序的开发</li>
<li>SNMP代理软件的开发</li>
</ul>
</li>
</ul>

        <h4 id="SNMP编程内容"   >
          <a href="#SNMP编程内容" class="heading-link"><i class="fas fa-link"></i></a>SNMP编程内容</h4>
      <ul>
<li>网络管理程序：UDP 162端口</li>
<li>SNMP代理: UDP 161端口</li>
<li>三个基本功能:构造PDU、BER编码、处理陷入</li>
</ul>

        <h4 id="SNMP变量"   >
          <a href="#SNMP变量" class="heading-link"><i class="fas fa-link"></i></a>SNMP变量</h4>
      <ul>
<li>确定SNMP变量</li>
<li>确定SNMP变量对应的设备管理功能</li>
</ul>

        <h4 id="MIB表操作"   >
          <a href="#MIB表操作" class="heading-link"><i class="fas fa-link"></i></a>MIB表操作</h4>
      <ul>
<li>操作表，获取列对象的所有实例</li>
<li>通过Get Next检索整个表</li>
</ul>

        <h3 id="1-3-基于SNMP的网络管理应用开发方法"   >
          <a href="#1-3-基于SNMP的网络管理应用开发方法" class="heading-link"><i class="fas fa-link"></i></a>1.3 基于SNMP的网络管理应用开发方法</h3>
      <p><img src="https://i.loli.net/2020/03/25/wPHVstBudERFrNI.png" alt="网络管理-网络管理开发技术-基于SNMP的网络管理应用开发方法1-min.png"></p>

        <h4 id="问题"   >
          <a href="#问题" class="heading-link"><i class="fas fa-link"></i></a>问题</h4>
      <p>将以ASN.1编写的MIB编译后转换成代理可以使用的格式，属于网络管理应用程序的<code>MIB编译器</code>功能</p>
<p>【解析】MIB以ASN.1编写，以ASCII文件存储，需要由MIB编译器编译后才能转换成代理可以使用的格式。</p>

        <h2 id="二、windows-SNMP-服务"   >
          <a href="#二、windows-SNMP-服务" class="heading-link"><i class="fas fa-link"></i></a>二、windows SNMP 服务</h2>
      
        <h3 id="2-1-window-SNMP服务基本概念"   >
          <a href="#2-1-window-SNMP服务基本概念" class="heading-link"><i class="fas fa-link"></i></a>2.1 window SNMP服务基本概念</h3>
      <p><img src="https://i.loli.net/2020/03/26/foc46mGN3aDMeCb.png" alt="网络管理-网络管理开发技术-windows SNMP 服务1-min.png"></p>

        <h3 id="2-2-window-SNMP服务的安装配置和测试"   >
          <a href="#2-2-window-SNMP服务的安装配置和测试" class="heading-link"><i class="fas fa-link"></i></a>2.2 window SNMP服务的安装配置和测试</h3>
      <div class="table-container"><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>安装</td>
<td>需确保已经安装了TCP/IP协议</td>
</tr>
<tr>
<td>配置</td>
<td>需配置SNMP团体名，Windows下称为社区</td>
</tr>
<tr>
<td>测试</td>
<td>使用SNMPUTIL程序</td>
</tr>
</tbody></table></div>

        <h2 id="三、Windows-网络管理应用程序开发"   >
          <a href="#三、Windows-网络管理应用程序开发" class="heading-link"><i class="fas fa-link"></i></a>三、Windows 网络管理应用程序开发</h2>
      
        <h3 id="3-1-Windows-SNMP-应用程序接口"   >
          <a href="#3-1-Windows-SNMP-应用程序接口" class="heading-link"><i class="fas fa-link"></i></a>3.1 Windows SNMP 应用程序接口</h3>
      <div class="table-container"><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>SNMP扩展代理API函数</td>
<td>应用程序使用这些函数从收到的SNMP PDU中解析指定的变量绑定，包括7个API函数</td>
</tr>
<tr>
<td>SNMP管理API函数</td>
<td>实现发送SNMP请求报文，接收响应等管理操作，包括9个API函数</td>
</tr>
<tr>
<td>SNMP实用工具API函数</td>
<td>简化了SNMP数据结构的操作，包括27个函数</td>
</tr>
<tr>
<td>WinSNMP API</td>
<td>是在Windows下开发基于SNMP协议的网络管理程序解决方案</td>
</tr>
</tbody></table></div>

        <h3 id="3-2-WinSNMP编程概念"   >
          <a href="#3-2-WinSNMP编程概念" class="heading-link"><i class="fas fa-link"></i></a>3.2 WinSNMP编程概念</h3>
      <p><img src="https://i.loli.net/2020/03/26/VhJg7cBLFKtAnej.png" alt="网络管理-开发技术-WinSNMP编程概念1-min.png"></p>
<p><img src="https://i.loli.net/2020/03/26/NVBiafPcKI2zC7U.png" alt="网络管理-开发技术-WinSNMP编程概念3-min.png"></p>

        <h3 id="3-3-WinSNMP编程模式"   >
          <a href="#3-3-WinSNMP编程模式" class="heading-link"><i class="fas fa-link"></i></a>3.3 WinSNMP编程模式</h3>
      <ul>
<li>WinSNMP程序的组成<ul>
<li>WinSNMP应用程序</li>
<li>WinSNMP会话</li>
<li>WinSNMP服务</li>
</ul>
</li>
<li>基本编程步骤 </li>
</ul>

        <h2 id="四、SNMP-软件包"   >
          <a href="#四、SNMP-软件包" class="heading-link"><i class="fas fa-link"></i></a>四、SNMP++ 软件包</h2>
      <p><img src="https://i.loli.net/2020/03/26/a5PjxCTMmtQrD8V.png" alt="网络管理-开发技术-SNMP++软件包1-min.png"></p>
]]></content>
      <categories>
        <category>自考专升本</category>
      </categories>
      <tags>
        <tag>计算机网络管理</tag>
      </tags>
  </entry>
  <entry>
    <title>【计算机网络管理】第五章 远程网络监控</title>
    <url>/2020/04/03/%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E3%80%91%E7%AC%AC%E4%BA%94%E7%AB%A0%20%E8%BF%9C%E7%A8%8B%E7%BD%91%E7%BB%9C%E7%9B%91%E6%8E%A7/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/03/25/mprGZn4WTQjwiFN.png" alt="网络管理-第五章 远程网络监控-脑图-min.png"></p>

        <h2 id="本章重难点"   >
          <a href="#本章重难点" class="heading-link"><i class="fas fa-link"></i></a>本章重难点</h2>
      <p>本章一般会出选择题、填空题、简答题，分值在<code>10-15分</code>左右</p>

        <h3 id="本章的重难点和常考知识点"   >
          <a href="#本章的重难点和常考知识点" class="heading-link"><i class="fas fa-link"></i></a>本章的重难点和常考知识点</h3>
      <ul>
<li>RMON的基本概念（常考<code>选择题</code>）</li>
<li>RMON管理信息库（常考<code>选择题</code>、<code>简答题</code>）</li>
<li>RMON2的应用（常考<code>选择题</code>、<code>填空题</code>）</li>
</ul>
<a id="more"></a>


        <h2 id="一、-RMON的基本概念"   >
          <a href="#一、-RMON的基本概念" class="heading-link"><i class="fas fa-link"></i></a>一、 RMON的基本概念</h2>
      
        <h3 id="1-1-网络监视器"   >
          <a href="#1-1-网络监视器" class="heading-link"><i class="fas fa-link"></i></a>1.1 网络监视器</h3>
      <p>监视整个网络运行情况的设备，也称为网络分析器、探测器。</p>

        <h3 id="1-2-远程监视器"   >
          <a href="#1-2-远程监视器" class="heading-link"><i class="fas fa-link"></i></a>1.2 远程监视器</h3>
      <p>每个子网配置一个监视器并通过SNMP协议与中央管理站通信，可以远程控制设备。</p>

        <h3 id="1-3-RMON的目标"   >
          <a href="#1-3-RMON的目标" class="heading-link"><i class="fas fa-link"></i></a>1.3 RMON的目标</h3>
      <p>监视一定区域内子网的通信信息，以及网络上传送的动态数据</p>
<ul>
<li>离线操作</li>
<li>主动监视</li>
<li>问题检测和报告</li>
<li>提供增值数据</li>
<li>多管理站操作</li>
</ul>

        <h3 id="1-4-表管理原理"   >
          <a href="#1-4-表管理原理" class="heading-link"><i class="fas fa-link"></i></a>1.4 表管理原理</h3>
      <ul>
<li>数据类型<ul>
<li>增加了两种新的数据类型<ul>
<li>行所以人名字 OwnerString</li>
<li>行状态 EntryStatus</li>
</ul>
</li>
</ul>
</li>
<li>表结构<ul>
<li>控制表：用于定义数据表的结构</li>
<li>数据表：用于存储数据</li>
</ul>
</li>
<li>表操作<ul>
<li>增加行</li>
<li>删除行</li>
<li>修改行</li>
</ul>
</li>
</ul>

        <h2 id="二、-RMON的管理信息库"   >
          <a href="#二、-RMON的管理信息库" class="heading-link"><i class="fas fa-link"></i></a>二、 RMON的管理信息库</h2>
      
        <h3 id="2-1-RMON-MIB"   >
          <a href="#2-1-RMON-MIB" class="heading-link"><i class="fas fa-link"></i></a>2.1 RMON MIB</h3>
      <div class="table-container"><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>RMON MIB</td>
<td>RMON规范定义的管理信息库</td>
</tr>
<tr>
<td>10个功能组</td>
<td>每组中的信息都是监视器从一个或几个子网中统计和收集的数据</td>
</tr>
<tr>
<td>功能组的连带关系</td>
<td>报警组和事件组; 最高N台主机组和主机组;捕获组和过滤组;</td>
</tr>
</tbody></table></div>

        <h3 id="2-2-以太网的统计信息"   >
          <a href="#2-2-以太网的统计信息" class="heading-link"><i class="fas fa-link"></i></a>2.2 以太网的统计信息</h3>
      
        <h4 id="统计组"   >
          <a href="#统计组" class="heading-link"><i class="fas fa-link"></i></a>统计组</h4>
      <ul>
<li>统计组提供一个表，每一行表示一个子网的统计信息</li>
<li>性能管理</li>
<li>故障管理</li>
</ul>

        <h4 id="历史组"   >
          <a href="#历史组" class="heading-link"><i class="fas fa-link"></i></a>历史组</h4>
      <ul>
<li>存储的是以固定间隔取样所获得的子网数据</li>
<li>历史控制表</li>
<li>历史数据表</li>
<li>子网利用率计算</li>
</ul>

        <h4 id="主机组"   >
          <a href="#主机组" class="heading-link"><i class="fas fa-link"></i></a>主机组</h4>
      <ul>
<li>收集新出现的主机信息</li>
<li>主机控制表</li>
<li>主机数据表</li>
<li>主机时间表</li>
</ul>

        <h4 id="最高N台主机组"   >
          <a href="#最高N台主机组" class="heading-link"><i class="fas fa-link"></i></a>最高N台主机组</h4>
      <ul>
<li>记录某种参数最大的N台主机的有关信息</li>
<li>这些信息的来源是主机组</li>
<li>控制表</li>
<li>数据表</li>
</ul>

        <h4 id="矩阵组"   >
          <a href="#矩阵组" class="heading-link"><i class="fas fa-link"></i></a>矩阵组</h4>
      <ul>
<li>记录子网中一对主机直接的通讯量</li>
<li>信息以矩阵的形式存储</li>
<li>控制表</li>
<li>数据表<ul>
<li>源到目标</li>
<li>目标到源</li>
</ul>
</li>
</ul>

        <h4 id="报警组"   >
          <a href="#报警组" class="heading-link"><i class="fas fa-link"></i></a>报警组</h4>
      <ul>
<li>定义了一组网络性能的门限值</li>
<li>超过门限值时向控制台产生报警事件</li>
<li>一个报警表</li>
<li>增量报警</li>
<li>报警机制 </li>
</ul>

        <h4 id="过滤组和通道组"   >
          <a href="#过滤组和通道组" class="heading-link"><i class="fas fa-link"></i></a>过滤组和通道组</h4>
      <ul>
<li>过滤组通过过滤选择出某种指定的特殊分组<ul>
<li>数据过滤器</li>
<li>状态过滤器</li>
</ul>
</li>
<li>通道: 一组过滤器的组合</li>
</ul>

        <h4 id="包捕获组"   >
          <a href="#包捕获组" class="heading-link"><i class="fas fa-link"></i></a>包捕获组</h4>
      <ul>
<li>建立一组缓冲区，用于存储从通道中捕获的分组</li>
<li>由控制表和数据表组成</li>
</ul>

        <h4 id="事件组"   >
          <a href="#事件组" class="heading-link"><i class="fas fa-link"></i></a>事件组</h4>
      <ul>
<li>作用是管理事件</li>
<li>事件表-定义事件的作用<ul>
<li>eventType 表示事件类型</li>
</ul>
</li>
<li>log表-记录事件出现顺序和时间 </li>
</ul>

        <h2 id="三、RMON2管理信息库"   >
          <a href="#三、RMON2管理信息库" class="heading-link"><i class="fas fa-link"></i></a>三、RMON2管理信息库</h2>
      
        <h3 id="3-1-RMON2-MIB的组成和功能"   >
          <a href="#3-1-RMON2-MIB的组成和功能" class="heading-link"><i class="fas fa-link"></i></a>3.1 RMON2 MIB的组成和功能</h3>
      
        <h4 id="新的功能组"   >
          <a href="#新的功能组" class="heading-link"><i class="fas fa-link"></i></a>新的功能组</h4>
      <ul>
<li>协议目录组</li>
<li>协议分布组</li>
<li>地址映像组</li>
<li>网络层主机组</li>
<li>网络层矩阵组</li>
<li>应用层主机组</li>
<li>应用层矩阵组</li>
<li>用户历史组</li>
<li>监视器配置组</li>
</ul>

        <h4 id="增加的功能"   >
          <a href="#增加的功能" class="heading-link"><i class="fas fa-link"></i></a>增加的功能</h4>
      <ul>
<li>外部对象索引<ul>
<li>使用外部对象索引数据表，把数据表与对应的控制表结合起来</li>
</ul>
</li>
<li>时间过滤器索引<ul>
<li>管理站可以从监视器取得自某个时间以来改变过的变量 </li>
</ul>
</li>
</ul>

        <h2 id="四、RMON2的应用"   >
          <a href="#四、RMON2的应用" class="heading-link"><i class="fas fa-link"></i></a>四、RMON2的应用</h2>
      
        <h3 id="协议的标识"   >
          <a href="#协议的标识" class="heading-link"><i class="fas fa-link"></i></a>协议的标识</h3>
      <ul>
<li>RMON2用协议标识符合协议参数共同表示一个协议及该协议与其他协议直接的关系；</li>
<li>协议标识符是由字节串组成的分层的树结构</li>
</ul>

        <h3 id="协议目录表"   >
          <a href="#协议目录表" class="heading-link"><i class="fas fa-link"></i></a>协议目录表</h3>
      <p>协议目录表的结构</p>

        <h3 id="用户定义的数据收集机制"   >
          <a href="#用户定义的数据收集机制" class="heading-link"><i class="fas fa-link"></i></a>用户定义的数据收集机制</h3>
      <ul>
<li>历史收集组由3级表组成<ul>
<li>第一级是控制表</li>
<li>第二级是用户历史对象表</li>
<li>第三级表是历史数据表</li>
</ul>
</li>
</ul>

        <h3 id="监视器的标准配置法"   >
          <a href="#监视器的标准配置法" class="heading-link"><i class="fas fa-link"></i></a>监视器的标准配置法</h3>
      <ul>
<li>定义了远程配置监视器的标准化方法</li>
<li>由标量对象和4个表组成。</li>
</ul>
]]></content>
      <categories>
        <category>自考专升本</category>
      </categories>
      <tags>
        <tag>计算机网络管理</tag>
      </tags>
  </entry>
  <entry>
    <title>【计算机网络管理】第四章 简单网络管理协议</title>
    <url>/2020/04/03/%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E3%80%91%E7%AC%AC%E5%9B%9B%E7%AB%A0%20%E7%AE%80%E5%8D%95%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2020/03/24/Hp6njBWCaRghkx2.png" alt="网络管理-第四章简单网络管理协议-脑图-min.png"></p>
<a id="more"></a>


        <h2 id="本章重难点"   >
          <a href="#本章重难点" class="heading-link"><i class="fas fa-link"></i></a>本章重难点</h2>
      <p>本章一般会出选择题、填空题和简单题，分值在<code>15分</code>左右</p>

        <h3 id="本章的重难点和常考知识点"   >
          <a href="#本章的重难点和常考知识点" class="heading-link"><i class="fas fa-link"></i></a>本章的重难点和常考知识点</h3>
      <ul>
<li>SNMPv1(常考<code>选择题</code>、<code>简答题</code>)</li>
<li>SNMPv2(常考<code>选择题</code>、<code>填空题</code>)</li>
<li>SNMPv3(常考<code>选择题</code>、<code>填空题</code>)</li>
</ul>

        <h2 id="一、-SNMP的演变"   >
          <a href="#一、-SNMP的演变" class="heading-link"><i class="fas fa-link"></i></a>一、 SNMP的演变</h2>
      <ul>
<li>SGMP</li>
<li>↓</li>
<li>SNMPv1</li>
<li>↓</li>
<li>S-SNMP</li>
<li>↓</li>
<li>SNMPv2 修补了SNMPv1的安全缺陷但未达到商业级别安全要求</li>
<li>↓</li>
<li>SNMPv3 增加了安全和高层管理功能</li>
</ul>

        <h2 id="二、SNMP-v1（考试重点）"   >
          <a href="#二、SNMP-v1（考试重点）" class="heading-link"><i class="fas fa-link"></i></a>二、SNMP v1（考试重点）</h2>
      
        <h3 id="2-1-协议数据单元"   >
          <a href="#2-1-协议数据单元" class="heading-link"><i class="fas fa-link"></i></a>2.1 协议数据单元</h3>
      <p><img src="https://i.loli.net/2020/03/24/Ao8X4nbtyhUQwfc.png" alt="网络管理-简单网络管理协议-协议数据单元1-min.png"></p>

        <h3 id="2-2-报文发送与接收"   >
          <a href="#2-2-报文发送与接收" class="heading-link"><i class="fas fa-link"></i></a>2.2 报文发送与接收</h3>
      <p><img src="https://i.loli.net/2020/03/24/3d85qcXOPDWgyQl.png" alt="网络管理-简单网络管理协议-报文发送与接收1-min.png"></p>

        <h3 id="2-3-SNMPv1支持的操作（1）"   >
          <a href="#2-3-SNMPv1支持的操作（1）" class="heading-link"><i class="fas fa-link"></i></a>2.3 SNMPv1支持的操作（1）</h3>
      <div class="table-container"><table>
<thead>
<tr>
<th></th>
<th>SNMP实体可以对MIB-2中的对象执行下列操作</th>
</tr>
</thead>
<tbody><tr>
<td>Get</td>
<td>管理站用于检索管理信息库中标量对象的值</td>
</tr>
<tr>
<td>Set</td>
<td>管理站用于设置管理信息库中标量对象的值</td>
</tr>
<tr>
<td>Trap</td>
<td>代理用于向管理站报告管理对象的变化状态</td>
</tr>
</tbody></table></div>

        <h3 id="2-4-SNMPv1支持的操作（2）"   >
          <a href="#2-4-SNMPv1支持的操作（2）" class="heading-link"><i class="fas fa-link"></i></a>2.4 SNMPv1支持的操作（2）</h3>
      <div class="table-container"><table>
<thead>
<tr>
<th>检索简单对象</th>
<th>检索简单的标量对象值可以用Get操作</th>
</tr>
</thead>
<tbody><tr>
<td>检索未知对象</td>
<td>GetNext命令检索变量名指示的下一个对象实例</td>
</tr>
<tr>
<td>检索表对象</td>
<td>GetNext可用于有效搜索表对象</td>
</tr>
<tr>
<td>表的更新和删除</td>
<td>Set命令用于设置或更新变量的值</td>
</tr>
<tr>
<td>陷入操作</td>
<td>是有代理站发出的异步事件报告，不需要应答报文</td>
</tr>
</tbody></table></div>

        <h3 id="2-5-SNMPv1的局限性"   >
          <a href="#2-5-SNMPv1的局限性" class="heading-link"><i class="fas fa-link"></i></a>2.5 SNMPv1的局限性</h3>
      <ul>
<li>轮询性能限制，不适合管理很大的网络</li>
<li>不适合检索大量数据</li>
<li>陷入报文没有应答</li>
<li>团体名认证的安全措施简单</li>
<li>不直接支持向被管理设备发送命令</li>
<li>支持的管理对象有限，不能完成复杂功能</li>
<li>不支持管理站之间的通信—只能集中式管理</li>
</ul>

        <h2 id="三、SNMP-v2"   >
          <a href="#三、SNMP-v2" class="heading-link"><i class="fas fa-link"></i></a>三、SNMP v2</h2>
      
        <h3 id="3-1-SNMPv2-管理信息结构"   >
          <a href="#3-1-SNMPv2-管理信息结构" class="heading-link"><i class="fas fa-link"></i></a>3.1 SNMPv2 管理信息结构</h3>
      
        <h4 id="对象定义"   >
          <a href="#对象定义" class="heading-link"><i class="fas fa-link"></i></a>对象定义</h4>
      <ul>
<li>数据类型:新增Unsigned32和Counter64</li>
<li>子句:UNITS、MAX-ACCESS、STATUS</li>
</ul>

        <h4 id="表的定义"   >
          <a href="#表的定义" class="heading-link"><i class="fas fa-link"></i></a>表的定义</h4>
      <ul>
<li>两类表:禁止/允许删除和生成行的表</li>
<li>表的定义中必须INDEX和AUGMENTS子句</li>
</ul>

        <h4 id="表的操作"   >
          <a href="#表的操作" class="heading-link"><i class="fas fa-link"></i></a>表的操作</h4>
      <ul>
<li><p>概念行的生成 <code>（考试重点）</code></p>
</li>
<li><p>概念行的挂起</p>
</li>
<li><p>概念行的删除</p>
<p><img src="https://i.loli.net/2020/03/24/jws3t5hd4TeyVAS.png" alt="网络管理-简单网络管理协议-表的操作-概念行的生成1-min.png"></p>
</li>
</ul>

        <h4 id="通知和信息模块"   >
          <a href="#通知和信息模块" class="heading-link"><i class="fas fa-link"></i></a>通知和信息模块</h4>
      <ul>
<li>通知类型的宏定义</li>
<li>3种信息模块:<ul>
<li>MIB模块、</li>
<li>MIB依赖性声明模块、</li>
<li>代理能力说明模块</li>
</ul>
</li>
</ul>

        <h3 id="3-2-SNMPv2-管理信息库"   >
          <a href="#3-2-SNMPv2-管理信息库" class="heading-link"><i class="fas fa-link"></i></a>3.2 SNMPv2 管理信息库</h3>
      <ul>
<li><code>系统组</code> 增加了标量对象sysORLastChange和表对象sysORTable</li>
<li><code>SNMP组</code> 由MIB-2对应的组改造而成</li>
<li><code>MIB对象组</code> 包含的对象与管理对象的控制有关，分为snmpTrap和snmpSet两个子组</li>
<li><code>接口组</code> <ul>
<li>纠正了原来的接口组存在的缺陷</li>
<li>还对接口组增加了4个新表:<ul>
<li>接口扩展表、</li>
<li>接口堆栈表、</li>
<li>接口测试表、</li>
<li>接口地址表</li>
</ul>
</li>
</ul>
</li>
</ul>

        <h3 id="3-3-SNMPv2-协议数据单元"   >
          <a href="#3-3-SNMPv2-协议数据单元" class="heading-link"><i class="fas fa-link"></i></a>3.3 SNMPv2 协议数据单元</h3>
      <p>SNMPv2提供了3种访问管理信息的方法</p>
<div class="table-container"><table>
<thead>
<tr>
<th>管理站和代理之间的请求/响应通信</th>
<th>同SNMPv1</th>
</tr>
</thead>
<tbody><tr>
<td>管理站和管理站之间的请求/响应通信</td>
<td>SNMPv2特有(可以支持分布式管理)</td>
</tr>
<tr>
<td>代理站到管理站的非确定通信</td>
<td>同SNMPv1</td>
</tr>
</tbody></table></div>
<div class="table-container"><table>
<thead>
<tr>
<th>GetRequest PDU</th>
<th>响应的不是原语性的,允许部分响应</th>
</tr>
</thead>
<tbody><tr>
<td>GetNextRequest PDU</td>
<td>改变了响应的原子性</td>
</tr>
<tr>
<td><code>GetBulkRequest PDU</code></td>
<td>对原标准的<code>主要增强</code>，以最少的交换次数检索大量的管理信息</td>
</tr>
<tr>
<td>SetRequest PDU</td>
<td>这个请求的格式和语义与SNMPv1的相同差别是处理响应的方式不同</td>
</tr>
<tr>
<td>Trap PDU</td>
<td>采用与Get等操作相同的PDU格式</td>
</tr>
<tr>
<td><code>InformRequest PDU</code></td>
<td>这是管理站发送给管理站的信息，需要应答</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table></div>

        <h3 id="3-4-管理站之间的通信"   >
          <a href="#3-4-管理站之间的通信" class="heading-link"><i class="fas fa-link"></i></a>3.4 管理站之间的通信</h3>
      <ul>
<li>SNMPv2 增加了管理站之间的通信–分布式网络管理的需要。</li>
<li>引入了通知报文InformRequest和管理站数据库(manager-to-manager MIB）</li>
</ul>

        <h4 id="snmpM2M模块"   >
          <a href="#snmpM2M模块" class="heading-link"><i class="fas fa-link"></i></a>snmpM2M模块</h4>
      <ul>
<li>报警表: 提供被监视的变量的有关情况，但记录的是管理站之间的报警信息。</li>
<li>事件记录表: SNMPv2实体产生的重要事件，或者是报警事件，或者是通知类型宏定义的事件。</li>
<li>事件通知表:定义了发送通知的目录和通知的类型。</li>
</ul>

        <h2 id="四、SNMP-v3"   >
          <a href="#四、SNMP-v3" class="heading-link"><i class="fas fa-link"></i></a>四、SNMP v3</h2>
      
        <h3 id="4-1-SNMPv3-管理框架"   >
          <a href="#4-1-SNMPv3-管理框架" class="heading-link"><i class="fas fa-link"></i></a>4.1 SNMPv3 管理框架</h3>
      <p>管理站和代理的实体统一称为SNMP实体</p>
<ul>
<li>SNMP实体<ul>
<li>SNMP引擎</li>
<li>应用程序</li>
</ul>
</li>
</ul>

        <h4 id="SNMP引擎"   >
          <a href="#SNMP引擎" class="heading-link"><i class="fas fa-link"></i></a>SNMP引擎</h4>
      <ul>
<li>服务<ul>
<li>发送和接收报文</li>
<li>认证和加密报文<ul>
<li>控制对管理对象的访问</li>
</ul>
</li>
</ul>
</li>
<li>结构<ul>
<li>调度器</li>
<li>报文处理子系统</li>
<li>安全子系统</li>
<li>访问控制子系统</li>
</ul>
</li>
</ul>

        <h4 id="应用程序"   >
          <a href="#应用程序" class="heading-link"><i class="fas fa-link"></i></a>应用程序</h4>
      <ul>
<li>命令生成器</li>
<li>命令响应器</li>
<li>通知生成器</li>
<li>通知接收器</li>
<li>代理转发器</li>
</ul>

        <h3 id="4-2-SNMP-管理站与代理"   >
          <a href="#4-2-SNMP-管理站与代理" class="heading-link"><i class="fas fa-link"></i></a>4.2 SNMP 管理站与代理</h3>
      <ul>
<li>基于用户的安全模型 USM</li>
<li>基于视图的访问控制模型 VACM</li>
</ul>

        <h4 id="4-2-1-基于用户的安全模型-USM"   >
          <a href="#4-2-1-基于用户的安全模型-USM" class="heading-link"><i class="fas fa-link"></i></a>4.2.1 基于用户的安全模型 USM</h4>
      <p><img src="https://i.loli.net/2020/03/24/JEOB9odspLZFRyT.png" alt="网络管理-简单网络管理协议-基于用户的安全模型USM1-min.png"></p>

        <h4 id="4-2-2-基于视图的访问控制模型-VACM"   >
          <a href="#4-2-2-基于视图的访问控制模型-VACM" class="heading-link"><i class="fas fa-link"></i></a>4.2.2 基于视图的访问控制模型 VACM</h4>
      <ul>
<li>视图和视图系列</li>
<li>VACM MIB 的组成</li>
<li>访问控制决策过程</li>
</ul>
]]></content>
      <categories>
        <category>自考专升本</category>
      </categories>
      <tags>
        <tag>计算机网络管理</tag>
      </tags>
  </entry>
  <entry>
    <title>初识this</title>
    <url>/2020/04/03/%E5%88%9D%E8%AF%86this/</url>
    <content><![CDATA[
        <h2 id="一、结论：this是call的第一个参数"   >
          <a href="#一、结论：this是call的第一个参数" class="heading-link"><i class="fas fa-link"></i></a>一、结论：this是call的第一个参数</h2>
      
        <h2 id="二、如何调用函数"   >
          <a href="#二、如何调用函数" class="heading-link"><i class="fas fa-link"></i></a>二、如何调用函数</h2>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"> f.call(asThis,input1,input2)</span><br><span class="line"> <span class="comment">//其中，asThis会被当做 this , [input1,input2]会被当做arguments</span></span><br><span class="line"> <span class="comment">// 禁止使用f(input1,input2)</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//this和arguments</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line">f.call(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="comment">//this为1,arguments为[1,2,3]</span></span><br></pre></td></tr></table></div></figure>

<a id="more"></a>


        <h2 id="三、不明白this-是因为你不用call"   >
          <a href="#三、不明白this-是因为你不用call" class="heading-link"><i class="fas fa-link"></i></a>三、不明白this,是因为你不用call</h2>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line">items.getSiblings()</span><br><span class="line"><span class="comment">//上面无法确认this，要改写成下面形式</span></span><br><span class="line">item3.getSiblings.call(item3) <span class="comment">//this就是item3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">item3.addCLass([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>])</span><br><span class="line"><span class="comment">//itme3.addCLass.call(item,[a,b,c])</span></span><br></pre></td></tr></table></div></figure>



        <h2 id="四、this的四种绑定规则"   >
          <a href="#四、this的四种绑定规则" class="heading-link"><i class="fas fa-link"></i></a>四、this的四种绑定规则</h2>
      
        <h3 id="4-1-默认绑定"   >
          <a href="#4-1-默认绑定" class="heading-link"><i class="fas fa-link"></i></a>4.1 默认绑定</h3>
      <p>比如我们创建一个函数，函数里面直接输出this,然后在全局范围内调用函数，结果在控制台输出window对象，这就是默认绑定，函数被调用的时候，this默认指向全局window对象。</p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">girl</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">girl();</span><br><span class="line"></span><br><span class="line"><span class="comment">//控制台输出window对象</span></span><br></pre></td></tr></table></div></figure>


        <h3 id="4-2-隐式绑定、显式绑定、new-绑定"   >
          <a href="#4-2-隐式绑定、显式绑定、new-绑定" class="heading-link"><i class="fas fa-link"></i></a>4.2 隐式绑定、显式绑定、new 绑定</h3>
      
        <h3 id="五、-相关例子思考"   >
          <a href="#五、-相关例子思考" class="heading-link"><i class="fas fa-link"></i></a>五、 相关例子思考</h3>
      
        <h4 id="5-1-onclick中this是什么"   >
          <a href="#5-1-onclick中this是什么" class="heading-link"><i class="fas fa-link"></i></a>5.1 onclick中this是什么</h4>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line">button.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//this是什么？</span></span><br><span class="line"><span class="comment">//根据mdn文档可是，这里的this是触发事件的元素也就是button</span></span><br></pre></td></tr></table></div></figure>
<p><span class="exturl"><a class="exturl__link"   href="https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalEventHandlers/onclick"  target="_blank" rel="noopener">MDN文档中onclick资料</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h4 id="5-2-addEventLister中this是什么"   >
          <a href="#5-2-addEventLister中this是什么" class="heading-link"><i class="fas fa-link"></i></a>5.2 addEventLister中this是什么</h4>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line">button.addEventLister(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//this是什么？</span></span><br><span class="line"><span class="comment">//根据mdn文档可是，这里的this是该元素的引用 button</span></span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">[MDN文档中addEventListener资料](https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#### 5.3 jQuery中this是什么</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> JavaScript</span><br><span class="line">$(<span class="string">'ul'</span>).on(<span class="string">'click'</span>,<span class="string">'li'</span><span class="comment">/*selector*/</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//this是什么？</span></span><br><span class="line"><span class="comment">//这里的this则代表了与selector相匹配的元素</span></span><br><span class="line"><span class="comment">//li元素</span></span><br></pre></td></tr></table></div></figure>
<p><span class="exturl"><a class="exturl__link"   href="https://www.jquery123.com/on/"  target="_blank" rel="noopener">.on() : 在选定的元素上绑定一个或多个事件处理函数</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<p><span class="exturl"><a class="exturl__link"   href="https://api.jquery.com/on/"  target="_blank" rel="noopener">.on() /| jQuery API Documentation</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></div></figure>


        <h3 id="5-4-确定this的方法"   >
          <a href="#5-4-确定this的方法" class="heading-link"><i class="fas fa-link"></i></a>5.4 确定this的方法</h3>
      <p>确定this的方法是看call的第一个参数，如果没有call，就要去看源码或相关文档确认。</p>

        <h2 id="六、-三道复杂的this题"   >
          <a href="#六、-三道复杂的this题" class="heading-link"><i class="fas fa-link"></i></a>六、 三道复杂的this题</h2>
      
        <h3 id="6-1-第一题"   >
          <a href="#6-1-第一题" class="heading-link"><i class="fas fa-link"></i></a>6.1 第一题</h3>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//请问是A被调用还是B被调用，打印出来的是什么？</span></span><br><span class="line"><span class="comment">//B    </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">X</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> object = &#123;</span><br><span class="line">    name:<span class="string">'object'</span>,</span><br><span class="line">    f1(x)&#123;</span><br><span class="line">      x.f2()</span><br><span class="line">    &#125;,</span><br><span class="line">    f2()&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>)<span class="comment">//A</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">  name:<span class="string">'options'</span>,</span><br><span class="line">  f1(x)&#123;&#125;,</span><br><span class="line">  f2()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)<span class="comment">//B</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = X()</span><br><span class="line">x.f1(options)</span><br></pre></td></tr></table></div></figure>



        <h3 id="6-2-第二题"   >
          <a href="#6-2-第二题" class="heading-link"><i class="fas fa-link"></i></a>6.2 第二题</h3>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//请问是C被调用还是D被调用，打印出来object还是options?？</span></span><br><span class="line"><span class="comment">//D options</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">X</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> object = &#123;</span><br><span class="line">    name:<span class="string">'object'</span>,</span><br><span class="line">    f1(x)&#123;</span><br><span class="line">      x.f2.call(<span class="keyword">this</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    f2()&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>)<span class="comment">//C object/options?</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">  name:<span class="string">'options'</span>,</span><br><span class="line">  f1()&#123;&#125;,</span><br><span class="line">  f2()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)<span class="comment">//D obejctions?</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = X()</span><br><span class="line">x.f1(options)</span><br></pre></td></tr></table></div></figure>


        <h3 id="6-3-第三题"   >
          <a href="#6-3-第三题" class="heading-link"><i class="fas fa-link"></i></a>6.3 第三题</h3>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">X</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> object = &#123;</span><br><span class="line">    name:<span class="string">'object'</span>,</span><br><span class="line">    options:<span class="literal">null</span>,</span><br><span class="line">    f1(x)&#123;</span><br><span class="line">      <span class="keyword">this</span>.options = x</span><br><span class="line">      <span class="keyword">this</span>.f2()</span><br><span class="line">    &#125;,</span><br><span class="line">    f2(x)&#123;</span><br><span class="line">      <span class="keyword">this</span>.option.f2.call(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">  name:<span class="string">'options'</span>,</span><br><span class="line">  f1()&#123;&#125;,</span><br><span class="line">  f2()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">//this 是什么？</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = X()</span><br><span class="line">x.f1(options)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//答案是：object</span></span><br></pre></td></tr></table></div></figure>]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>原型与原型链</title>
    <url>/2020/04/03/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    <content><![CDATA[
        <h2 id="全局对象"   >
          <a href="#全局对象" class="heading-link"><i class="fas fa-link"></i></a>全局对象</h2>
      
        <h3 id="定义"   >
          <a href="#定义" class="heading-link"><i class="fas fa-link"></i></a>定义</h3>
      <ul>
<li>在ECMA规定全局对象叫做global，在浏览器中把window叫做全局对象</li>
<li>window就是一个哈希表，有很多的属性，在控制台打开输入window返回，就是出现相关属性</li>
<li>window的属性就是全局变量</li>
</ul>
<p><img src="https://i.loli.net/2019/12/14/BUuyR9LTa8z3pob.png" alt="控制台查看window全部属性.png"></p>

        <h3 id="全局对象的分类"   >
          <a href="#全局对象的分类" class="heading-link"><i class="fas fa-link"></i></a>全局对象的分类</h3>
      
        <h4 id="一种是ECMAScript标准规定的"   >
          <a href="#一种是ECMAScript标准规定的" class="heading-link"><i class="fas fa-link"></i></a>一种是ECMAScript标准规定的</h4>
      <p>如</p>
<ul>
<li>global.parseInt</li>
<li>global.parseFloat</li>
<li>global.Number</li>
<li>global.String</li>
<li>global.Boolean</li>
<li>global.Object</li>
<li>等等</li>
</ul>
<a id="more"></a>


        <h4 id="另一种是浏览器自己加的属性-私有，Chrome-Fire-fox"   >
          <a href="#另一种是浏览器自己加的属性-私有，Chrome-Fire-fox" class="heading-link"><i class="fas fa-link"></i></a>另一种是浏览器自己加的属性(私有，Chrome/Fire fox)</h4>
      <p>如</p>
<ul>
<li>window.alert 弹框提示</li>
<li>window.prompt 用户填写</li>
<li>window.comfirm  确定</li>
<li>window.console.log  开发者–打印</li>
<li>window.console.dir 在控制台中显示指定JavaScript对象的属性，并通过类似文件树样式的交互列表显示</li>
<li>window.document</li>
<li>window.document.createElement</li>
<li>window.document.getElementById</li>
<li>window.setTimeout</li>
</ul>
<p><span class="exturl"><a class="exturl__link"   href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window"  target="_blank" rel="noopener">在mdn查看window属性</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h2 id="全局函数"   >
          <a href="#全局函数" class="heading-link"><i class="fas fa-link"></i></a>全局函数</h2>
      
        <h3 id="Number"   >
          <a href="#Number" class="heading-link"><i class="fas fa-link"></i></a>Number</h3>
      <p><code>var n = 1</code><br><code>var n2 = new Number(1)</code>创建一个Number对象<br>1 与new Number(1)的区别是什么？<br>1就是一个1而已，而Number(1)，除了1，还有一些关于1的函数</p>
<p><img src="https://i.loli.net/2019/12/14/X5YGOL6b7yCKZTA.png" alt="Number函数情况.png"></p>

        <h3 id="String"   >
          <a href="#String" class="heading-link"><i class="fas fa-link"></i></a>String</h3>
      <p><code>var s = &#39;hello&#39;</code><br><code>var s2 = new String(&#39;hello&#39;)</code>创建一个String对象<br>‘hello’与new String(‘hello’)的区别是什么？<br>‘hello’是基本字符串，而new String(‘hello’)是一个对象的哈希</p>
<p><img src="https://i.loli.net/2019/12/14/EbCi8FQ562Itxne.png" alt="string与string对象的区别.png"></p>
<p>常见的String()API有</p>
<ul>
<li>charAt(x) 第x个字符是什么</li>
<li>charCodeAt(x) 第x个字符的Uncode编点是什么</li>
<li>trim()  去除空格</li>
<li>concat  连接连个字符串</li>
<li>slice(开始位置,数量) 切片，方法提取某个字符串的一部分，并返回一个新的字符串，且不会改动原字符串。</li>
<li>replace() 替换字符串，方法返回一个由替换值（replacement）替换一些或所有匹配的模式（pattern）后的新字符串。</li>
<li>includes() 方法用于判断一个字符串是否包含在另一个字符串中，根据情况返回 true 或 false。</li>
</ul>
<p><img src="https://i.loli.net/2019/12/14/XFHKIZTD8k76BpQ.png" alt="String对象的部分API.png"></p>

        <h3 id="Boolean"   >
          <a href="#Boolean" class="heading-link"><i class="fas fa-link"></i></a>Boolean</h3>
      <p><code>var b2 = new Boolean(true)</code>创建一个Boolean对象<br>true与new Boolean(true)的区别是什么？<br>true是布尔值true，而new Boolean(true)是Boolean对象<br><img src="https://i.loli.net/2019/12/14/l6THjGIoJWt1wfF.png" alt="Boolean对象.png"></p>

        <h4 id="考题"   >
          <a href="#考题" class="heading-link"><i class="fas fa-link"></i></a>考题</h4>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="literal">false</span></span><br><span class="line"><span class="keyword">var</span> f2 = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>)</span><br><span class="line"><span class="keyword">if</span>(f)&#123;<span class="built_in">console</span>.log(<span class="number">1</span>)&#125;</span><br><span class="line"><span class="keyword">if</span>(f2)&#123;<span class="built_in">console</span>.log(<span class="number">2</span>)&#125;</span><br><span class="line">请问会打印<span class="number">1</span>还是<span class="number">2</span>？</span><br></pre></td></tr></table></div></figure>

<p>答案是2</p>
<p>解题思路</p>
<ol>
<li>因为根据对象是返回是true</li>
<li>所以f2是一个对象</li>
<li>所以可以通过if语句，打印出2</li>
</ol>

        <h3 id="Object"   >
          <a href="#Object" class="heading-link"><i class="fas fa-link"></i></a>Object</h3>
      <p><code>var o1 = {}</code><br><code>var o2 = new Object()</code><br>o1与o2一样可以新建对象，但是o1 === o2 是false，因为它们在heap内存存储位置是不相同的</p>
<p><img src="https://i.loli.net/2019/12/14/mBxfed5uEQIhTwi.png" alt="Object对象.png"> </p>

        <h2 id="公用属性（原型）（prototype）"   >
          <a href="#公用属性（原型）（prototype）" class="heading-link"><i class="fas fa-link"></i></a>公用属性（原型）（prototype）</h2>
      <p>JavaScript把toString和valueOf放在一个对象里（公用属性组成的对象），然后让每个对象的<strong>prototype</strong>存储这个（公用属性组成的对象）的地址</p>

        <h3 id="Number对象原型链"   >
          <a href="#Number对象原型链" class="heading-link"><i class="fas fa-link"></i></a>Number对象原型链</h3>
      <p>每个Number对象有个proto指向公用的Number对象，而公用的Number对象的proto会指向Object的属性<br><img src="https://i.loli.net/2019/12/14/jrU2I1VWRJbaKm9.png" alt="Number对象原型链.png"></p>

        <h3 id="String对象原型链"   >
          <a href="#String对象原型链" class="heading-link"><i class="fas fa-link"></i></a>String对象原型链</h3>
      <p>每个String对象有个proto指向公用的String对象，而公用的String对象的proto会指向Object的属性<br><img src="https://i.loli.net/2019/12/14/pmo4gcD3l5ef8Wt.png" alt="String对象原型链.png"></p>

        <h3 id="Boolean对象原型链"   >
          <a href="#Boolean对象原型链" class="heading-link"><i class="fas fa-link"></i></a>Boolean对象原型链</h3>
      <p>每个Boolean对象有个proto指向公用的Boolean对象，而公用的Boolean对象的proto会指向Object的属性<br><img src="https://i.loli.net/2019/12/14/GwpyEMWvmBIengh.png" alt="Boolean对象原型链.png"></p>

        <h3 id="Object对象原型链"   >
          <a href="#Object对象原型链" class="heading-link"><i class="fas fa-link"></i></a>Object对象原型链</h3>
      <p>每个Object对象有个proto指向公用的Object对象,而公用的Boolean对象的proto是null<br><img src="https://s2.ax1x.com/2019/12/14/QWpJKS.png" alt="Object对象原型链.png"></p>

        <h3 id="它们之间的联系"   >
          <a href="#它们之间的联系" class="heading-link"><i class="fas fa-link"></i></a>它们之间的联系</h3>
      <p><img src="https://i.loli.net/2019/12/14/nsI93CqYkPf6UDc.png" alt="原型关系图.png"></p>
<p>String.prototype是String的公用属性的引用<br>s.<strong>prototype</strong>是String的公用属性的引用</p>

        <h2 id="重要公式"   >
          <a href="#重要公式" class="heading-link"><i class="fas fa-link"></i></a>重要公式</h2>
      <p><code>var 对象 = new 函数（）</code><br><code>对象.__proto__ === 对象的构造函数.prototype</code></p>
<p>上面两行一起看</p>

        <h2 id="proto-和-prototype-的区别是什么？"   >
          <a href="#proto-和-prototype-的区别是什么？" class="heading-link"><i class="fas fa-link"></i></a>__proto__ 和 prototype 的区别是什么？</h2>
      <ol>
<li>不能断章取义，<strong>proto</strong> 和 prototype 只是两个 key 而已</li>
<li>我们一般研究对象的<strong>proto</strong>和函数的prototype</li>
<li>对象.<strong>proto</strong> === 某函数.prototype</li>
<li>如果把函数看成对象，那么函数.<strong>proto</strong> === Function.prototype</li>
<li>如果把 Function 看成对象，那么 Function.<strong>proto</strong> === Function.prototype</li>
</ol>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>实现一个 jQuery 的 API</title>
    <url>/2020/04/03/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%20jQuery%20%E7%9A%84%20API/</url>
    <content><![CDATA[
        <h2 id="JQuery是什么"   >
          <a href="#JQuery是什么" class="heading-link"><i class="fas fa-link"></i></a>JQuery是什么</h2>
      <p>jQuery是一个JavaScript函数库。jQuery是一个轻量级的”写的少，做的多”的JavaScript库。JQuery实质上是一个构造函数，接受一个参数，这个参数可能是节点，然后返回一个方法对象去操作节点(方法使用了闭包)</p>

        <h2 id="要实现的目标"   >
          <a href="#要实现的目标" class="heading-link"><i class="fas fa-link"></i></a>要实现的目标</h2>
      <p>让页面中div添加一个class和改变div的textContent。给div加个名为“red”的类名，将div的textContent内容更改为“hi”。</p>
<figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQuery = ???</span><br><span class="line">  <span class="built_in">window</span>.$ = jQuery</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> $div = $(<span class="string">'div'</span>)</span><br><span class="line">  $div.addClass(<span class="string">'red'</span>) <span class="comment">// 可将所有 div 的 class 添加一个 red</span></span><br><span class="line">  $div.setText(<span class="string">'hi'</span>) <span class="comment">// 可将所有 div 的 textContent 变为 hi</span></span><br></pre></td></tr></table></div></figure>


        <h3 id="第一步-封装两个函数，并命名空间"   >
          <a href="#第一步-封装两个函数，并命名空间" class="heading-link"><i class="fas fa-link"></i></a>第一步 封装两个函数，并命名空间</h3>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQuery = <span class="function"><span class="keyword">function</span>(<span class="params">nodeOrSelector</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> nodes = &#123;&#125;</span><br><span class="line">  nodes.addClass = <span class="function"><span class="keyword">function</span>(<span class="params">classes</span>)</span>&#123;&#125;</span><br><span class="line">  nodes.setText = <span class="function"><span class="keyword">function</span>(<span class="params">text</span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> nodes</span><br></pre></td></tr></table></div></figure>
<p>命名空间是一种设计模式，将不同的函数封装在函数库中并给函数库命名。<br>有两个主要好处<br>1.是知道库的名字方便调用<br>2.避免覆盖全局变量，发生标识符冲突</p>
<a id="more"></a>


        <h3 id="第二步-判断传入参数是节点还是选择器"   >
          <a href="#第二步-判断传入参数是节点还是选择器" class="heading-link"><i class="fas fa-link"></i></a>第二步 判断传入参数是节点还是选择器</h3>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQuery = <span class="function"><span class="keyword">function</span>(<span class="params">nodeOrSelector</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> nodes = &#123;&#125;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> nodeOrSelector === <span class="string">'string'</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> temp = <span class="built_in">document</span>.querySelectorAll(nodeOrSelector)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">0</span>;i&lt;temp.length;i++)&#123;</span><br><span class="line">      nodes[i] = temp[i] </span><br><span class="line">    &#125;</span><br><span class="line">    nodes.length = temp.length</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nodeOrSelector <span class="keyword">instanceof</span> Node)&#123;</span><br><span class="line">    nodes =&#123;</span><br><span class="line">      <span class="number">0</span>:nodeOrSelector,</span><br><span class="line">      length:<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></div></figure>

        <h3 id="第三步-添加class属性"   >
          <a href="#第三步-添加class属性" class="heading-link"><i class="fas fa-link"></i></a>第三步 添加class属性</h3>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用了forEach来遍历nodes里面节点元素并过滤掉不是标签的元素，然后使用for循环为标签添加class</span></span><br><span class="line"> nodes.addClass = <span class="function"><span class="keyword">function</span>(<span class="params">classes</span>)</span>&#123;</span><br><span class="line">    classes.forEach(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123; </span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;nodes.length;i++)&#123;</span><br><span class="line">        nodes[i].classList.add(value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></div></figure>


        <h3 id="第四步-判断text，没有则添加text，有则获取textContent"   >
          <a href="#第四步-判断text，没有则添加text，有则获取textContent" class="heading-link"><i class="fas fa-link"></i></a>第四步 判断text，没有则添加text，有则获取textContent</h3>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="comment">//textContent实现不加参数就是获取文本，加参数就是加入或替换文本。</span></span><br><span class="line">nodes.SetText = <span class="function"><span class="keyword">function</span>(<span class="params">text</span>)</span>&#123;</span><br><span class="line"><span class="comment">//判断参数是否是空</span></span><br><span class="line">    <span class="keyword">if</span>(text === <span class="literal">undefined</span>)&#123;</span><br><span class="line">      <span class="keyword">var</span> texts = []</span><br><span class="line"><span class="comment">//遍历节点，将文本添加到数组中</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;nodes.length;i++)&#123;</span><br><span class="line">        text.push(nodes[i].textContext)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> texts</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//遍历节点，将节点文本设置成文本</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;nodes.length;i++)&#123;</span><br><span class="line">        nodes[i].textContent = text</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></div></figure>


        <h3 id="第五步-再给个缩写吧-alias"   >
          <a href="#第五步-再给个缩写吧-alias" class="heading-link"><i class="fas fa-link"></i></a>第五步 再给个缩写吧 alias</h3>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.$ = jQuery</span><br></pre></td></tr></table></div></figure>
<p>然后输入找到我们要操作的对象所需的参数’div’,来找到所有的div<br>再把这个函数赋值给变量，方便后面的调用，注意在变量前面加上$,表示是对jQuery函数的调用</p>

        <h3 id="第六步-总结"   >
          <a href="#第六步-总结" class="heading-link"><i class="fas fa-link"></i></a>第六步 总结</h3>
      <p>nodes运用了闭包（闭包：操作一个你访问不到的变量）</p>

        <h2 id="具体代码查看"   >
          <a href="#具体代码查看" class="heading-link"><i class="fas fa-link"></i></a>具体代码查看</h2>
      <p><span class="exturl"><a class="exturl__link"   href="http://js.jirengu.com/pewovifolu/2/edit"  target="_blank" rel="noopener">实现一个 jQuery 的 API</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>JQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>普通类型和对象的区别</title>
    <url>/2020/04/03/%E6%99%AE%E9%80%9A%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[
        <h2 id="内存图"   >
          <a href="#内存图" class="heading-link"><i class="fas fa-link"></i></a>内存图</h2>
      <p>JS引擎将内存分为代码区与数据区<br>数据区分为Stack(栈内存)和Heap(堆内存)</p>
<p>简单类型的数据直接存在Stack里面<br>复杂类型的数据是把Heap的地址存在Stack里面</p>

        <h2 id="内存四个面试题"   >
          <a href="#内存四个面试题" class="heading-link"><i class="fas fa-link"></i></a>内存四个面试题</h2>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line">第一题</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span> </span><br><span class="line"><span class="keyword">var</span> b = a</span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">请问a显示多少</span><br><span class="line"></span><br><span class="line">第二题</span><br><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">name</span>:<span class="string">'a'</span>&#125;</span><br><span class="line"><span class="keyword">var</span> b = a</span><br><span class="line">b = &#123;<span class="attr">name</span>:<span class="string">'b'</span>&#125;</span><br><span class="line">请问现在a.name是多少</span><br><span class="line"></span><br><span class="line">第三题</span><br><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">name</span>:<span class="string">'a'</span>&#125;</span><br><span class="line"><span class="keyword">var</span> b = a</span><br><span class="line">b.name = <span class="string">'b'</span></span><br><span class="line">请问现在a.name是多少</span><br><span class="line"></span><br><span class="line">第四题</span><br><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">name</span>:<span class="string">'a'</span>&#125;</span><br><span class="line"><span class="keyword">var</span> b = a</span><br><span class="line">b = <span class="literal">null</span></span><br><span class="line">请问现在a是什么？</span><br></pre></td></tr></table></div></figure>

<a id="more"></a>



        <h2 id="答案解析"   >
          <a href="#答案解析" class="heading-link"><i class="fas fa-link"></i></a>答案解析</h2>
      
        <h3 id="第一题"   >
          <a href="#第一题" class="heading-link"><i class="fas fa-link"></i></a>第一题</h3>
      <p>var a = 1 ===&gt; 在stack里面存储了a = 1<br>var b = a ===&gt; 然后stack里复制一行a = 1 这个就是b=a<br>b = 2 ==&gt; 最后将b=1 那行改为b=2<br>所以可得a = 1</p>

        <h3 id="第二题"   >
          <a href="#第二题" class="heading-link"><i class="fas fa-link"></i></a>第二题</h3>
      <p>var a = {name:’a’} ===&gt; 在stack里面存储a对象的地址，引用在Heap存储{name:’a’}<br>var b = a  ===&gt; 然后在stack里面复制a对象的地址一行，然后引用Heap存储{name:’a’}<br>b = {name:’b’} ===&gt; 然后在Heap存储，新建一个{name:’b’}<br>所以可得a.name是a</p>

        <h3 id="第三题"   >
          <a href="#第三题" class="heading-link"><i class="fas fa-link"></i></a>第三题</h3>
      <p>var a = {name:’a’} ===&gt; 在stack里面存储a对象的地址，引用在Heap存储{name:’a’}<br>var b = a  ===&gt; 然后在stack里面复制a对象的地址一行，然后引用Heap存储{name:’a’}<br>b.name = ‘b’ ===&gt; 然后在Heap存储,将Heap存储{name:’a’}改为{name:’b’}<br>所以可得a.name是b</p>

        <h3 id="第四题"   >
          <a href="#第四题" class="heading-link"><i class="fas fa-link"></i></a>第四题</h3>
      <p>var a = {name:’a’} ===&gt; 在stack里面存储a对象的地址，引用在Heap存储{name:’a’}<br>var b = a ===&gt; 然后在stack里面复制a对象的地址一行，然后引用Heap存储{name:’a’}<br>b = null ===&gt; 然后在stack里面b那行，改为null<br>所以可得a = {name:a}</p>

        <h2 id="引用类型面试及答案分析"   >
          <a href="#引用类型面试及答案分析" class="heading-link"><i class="fas fa-link"></i></a>引用类型面试及答案分析</h2>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">n</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">var</span> b = a:</span><br><span class="line">a.x  = a = &#123;<span class="attr">n</span>:<span class="number">2</span>&#125;</span><br><span class="line">alert(a.x)<span class="comment">// undefined</span></span><br><span class="line">alert(b.x)<span class="comment">//[object object]</span></span><br></pre></td></tr></table></div></figure>

<ol>
<li>在stack里面存储a对象的地址ADDR34，引用在Heap存储{n:1}</li>
<li>然后在stack里面复制a对象的地址ADDR34一行，然后引用Heap存储{n:1}</li>
<li>因为浏览器先算左边再算右边，所以a.x是ADDR34 【难点】在a变值之前已经定好了</li>
<li>a = {n:2} 在stack里面a对象地址改为ADDR54,引用Heap新存储{n:2}；</li>
<li>在Heap34的{n:1}里面新增一个x：ADDR54</li>
<li>a.x也是在ADDR54对象里面，所以它没有值==undefined</li>
<li>b.x也是在ADDR34对象里面，它是x:ADDR54，因为会调用tostring方法，所以会返回[object object]</li>
</ol>

        <h2 id="垃圾回收"   >
          <a href="#垃圾回收" class="heading-link"><i class="fas fa-link"></i></a>垃圾回收</h2>
      <p>如果一个对象没有被引用，它就是垃圾将被回收</p>
<p>IE6有bug，会导致内存泄漏</p>

        <h2 id="浅拷贝与深拷贝"   >
          <a href="#浅拷贝与深拷贝" class="heading-link"><i class="fas fa-link"></i></a>浅拷贝与深拷贝</h2>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> b = a</span><br><span class="line">b = <span class="number">2</span> <span class="comment">//这个时候改变了b</span></span><br><span class="line"><span class="comment">//但a完全不受b的影响，那么我们就说这个是一个深拷贝</span></span><br></pre></td></tr></table></div></figure>


        <h3 id="浅拷贝与深拷贝的区别"   >
          <a href="#浅拷贝与深拷贝的区别" class="heading-link"><i class="fas fa-link"></i></a>浅拷贝与深拷贝的区别</h3>
      <p>对于简单类型的数据来说，赋值就是深拷贝<br>对于复杂类型的数据（对象）来说，才要区分浅拷贝与深拷贝</p>

        <h3 id="浅拷贝"   >
          <a href="#浅拷贝" class="heading-link"><i class="fas fa-link"></i></a>浅拷贝</h3>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">name</span>:<span class="string">'a'</span>&#125;</span><br><span class="line"><span class="keyword">var</span> b = a</span><br><span class="line">b.name = <span class="string">'b'</span></span><br><span class="line">a.name === <span class="string">'b'</span> <span class="comment">//true</span></span><br><span class="line"><span class="comment">//b改变导致a改变，这个就是浅拷贝</span></span><br></pre></td></tr></table></div></figure>


        <h3 id="深拷贝"   >
          <a href="#深拷贝" class="heading-link"><i class="fas fa-link"></i></a>深拷贝</h3>
      <figure class="highlight javascript"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">name</span>:<span class="string">'a'</span>&#125;</span><br><span class="line"><span class="keyword">var</span> b = deepClone(a)</span><br><span class="line">b.name = <span class="string">'b'</span></span><br><span class="line">a.name === <span class="string">'a'</span> <span class="comment">//true </span></span><br><span class="line"><span class="comment">//b改变不导致a改变，这个就是深拷贝</span></span><br></pre></td></tr></table></div></figure>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>理解HTML之空标签、可替换标签</title>
    <url>/2020/04/03/%E7%90%86%E8%A7%A3HTML%E4%B9%8B%E7%A9%BA%E6%A0%87%E7%AD%BE%E3%80%81%E5%8F%AF%E6%9B%BF%E6%8D%A2%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[
        <h2 id="一、W3C-简介"   >
          <a href="#一、W3C-简介" class="heading-link"><i class="fas fa-link"></i></a>一、W3C 简介</h2>
      <p>万维网联盟（英语：World Wide Web Consortium，缩写W3C），又称W3C理事会，是万维网的主要国际标准组织。</p>
<p>万维网联盟（W3C）由蒂姆·伯纳斯-李于1994年10月离开欧洲核子研究中心（CERN）后成立，在欧盟委员会和国防高等研究计划署（DARPA）的支持下成立于麻省理工学院MIT计算机科学与人工智能实验室（MIT／LCS）[2]，DARPA推出了ARPANET，是互联网前身之一。</p>

        <h2 id="二、什么是空标签"   >
          <a href="#二、什么是空标签" class="heading-link"><i class="fas fa-link"></i></a>二、什么是空标签</h2>
      
        <h3 id="2-1-含义"   >
          <a href="#2-1-含义" class="heading-link"><i class="fas fa-link"></i></a>2.1 含义</h3>
      <p>没有闭合的标签称为空标签，如：<br/>和<img/>等。他们不存在成对的情况,通常在一个空元素上使用一个闭标签是无效的。例如， <code>&lt;input type=&quot;text&quot;&gt;&lt;/input&gt;</code>的闭标签是无效的 HTML。</p>

        <h3 id="2-2-HTML-中有以下这些空元素："   >
          <a href="#2-2-HTML-中有以下这些空元素：" class="heading-link"><i class="fas fa-link"></i></a>2.2 HTML 中有以下这些空元素：</h3>
      <figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">area</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">col</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">colgroup</span>&gt;</span> when the span is present</span><br><span class="line"><span class="tag">&lt;<span class="name">command</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">embed</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keygen</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">track</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">wbr</span>&gt;</span></span><br></pre></td></tr></table></div></figure>

<a id="more"></a>


        <h2 id="三、什么是可替换标签"   >
          <a href="#三、什么是可替换标签" class="heading-link"><i class="fas fa-link"></i></a>三、什么是可替换标签</h2>
      
        <h3 id="3-1-含义"   >
          <a href="#3-1-含义" class="heading-link"><i class="fas fa-link"></i></a>3.1 含义</h3>
      <p>在 CSS 中，可替换元素（replaced element）的展现效果不是由 CSS 来控制的。这些元素是一种外部对象，它们外观的渲染，是独立于 CSS 的。</p>

        <h3 id="3-2-典型的可替换元素有："   >
          <a href="#3-2-典型的可替换元素有：" class="heading-link"><i class="fas fa-link"></i></a>3.2 典型的可替换元素有：</h3>
      <figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">embed</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span>&gt;</span></span><br></pre></td></tr></table></div></figure>


        <h3 id="3-3-有些元素仅在特定情况下被作为可替换元素处理，例如："   >
          <a href="#3-3-有些元素仅在特定情况下被作为可替换元素处理，例如：" class="heading-link"><i class="fas fa-link"></i></a>3.3 有些元素仅在特定情况下被作为可替换元素处理，例如：</h3>
      <figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">applet</span>&gt;</span></span><br></pre></td></tr></table></div></figure>


        <h2 id="四、MDN-简介"   >
          <a href="#四、MDN-简介" class="heading-link"><i class="fas fa-link"></i></a>四、MDN 简介</h2>
      <p>MDN Web Docs（旧称Mozilla Developer Network、Mozilla Developer Center，简称MDN）是一个汇集众多Mozilla基金会产品和网络技术开发文档的免费网站。</p>
<p><span class="exturl"><a class="exturl__link"   href="https://developer.mozilla.org/en-US/"  target="_blank" rel="noopener">官方网址</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h2 id="五、MDN上HTML-所有标签列表"   >
          <a href="#五、MDN上HTML-所有标签列表" class="heading-link"><i class="fas fa-link"></i></a>五、MDN上HTML 所有标签列表</h2>
      
        <h3 id="5-1-根元素-lt-html-gt-代表-HTML-或-XHTML-文档的根。其他所有元素必须是这个元素的子节点。"   >
          <a href="#5-1-根元素-lt-html-gt-代表-HTML-或-XHTML-文档的根。其他所有元素必须是这个元素的子节点。" class="heading-link"><i class="fas fa-link"></i></a>5.1 根元素&lt;html&gt;    代表 HTML 或 XHTML 文档的根。其他所有元素必须是这个元素的子节点。</h3>
      
        <h3 id="5-2-文档元数据"   >
          <a href="#5-2-文档元数据" class="heading-link"><i class="fas fa-link"></i></a>5.2 文档元数据</h3>
      <p><code>&lt;head&gt;</code>    代表关于文档元数据的一个集合，包括脚本或样式表的链接或内容。<br><code>&lt;title&gt;</code>    定义文档的标题，将显示在浏览器的标题栏或标签页上。该元素只能包含文本，包含的标签不会被解释。<br><code>&lt;base&gt;</code>    定义页面上相对 URL 的基准 URL。<br><code>&lt;link&gt;</code>    用于链接外部的 CSS 到该文档。<br><code>&lt;meta&gt;</code>    定义其他 HTML 元素无法描述的元数据。<br><code>&lt;style&gt;</code>    用于内联 CSS。</p>

        <h3 id="5-3-脚本"   >
          <a href="#5-3-脚本" class="heading-link"><i class="fas fa-link"></i></a>5.3 脚本</h3>
      <p><code>&lt;script&gt;</code>    定义一个内联脚本或链接到外部脚本。脚本语言是 JavaScript。<br><code>&lt;noscript&gt;</code>    定义当浏览器不支持脚本时显示的替代文字。<br><code>&lt;template&gt;</code> 这个元素在 HTML5 中加入    通过 JavaScript 在运行时实例化内容的容器。</p>

        <h3 id="5-4-章节"   >
          <a href="#5-4-章节" class="heading-link"><i class="fas fa-link"></i></a>5.4 章节</h3>
      <p><code>&lt;body&gt;</code>    代表 HTML 文档的内容。在文档中只能有一个 <code>&lt;body&gt;</code> 元素。<br><code>&lt;section&gt;</code> 这个元素在 HTML5 中加入    定义文档中的一个章节。<br><code>&lt;nav&gt;</code> 这个元素在 HTML5 中加入    定义只包含导航链接的章节。<br><code>&lt;article&gt;</code> 这个元素在 HTML5 中加入    定义可以独立于内容其余部分的完整独立内容块。<br><code>&lt;aside&gt;</code> 这个元素在 HTML5 中加入    定义和页面内容关联度较低的内容——如果被删除，剩下的内容仍然很合理。<br><code>&lt;h1&gt;</code>,<code>&lt;h2&gt;</code>,<code>&lt;h3&gt;</code>,<code>&lt;h4&gt;</code>,<code>&lt;h5&gt;</code>,<code>&lt;h6&gt;</code>    标题元素实现了六层文档标题，<code>&lt;h1&gt;</code> 是最大的标题，<code>&lt;h6&gt;</code> 是最小的标题。标题元素简要地描述章节的主题。<br><code>&lt;header&gt;</code> 这个元素在 HTML5 中加入    定义页面或章节的头部。它经常包含 logo、页面标题和导航性的目录。<br><code>&lt;footer&gt;</code> 这个元素在 HTML5 中加入    定义页面或章节的尾部。它经常包含版权信息、法律信息链接和反馈建议用的地址。<br><code>&lt;address&gt;</code>    定义包含联系信息的一个章节。<br><code>&lt;main&gt;</code>这个元素在 HTML5 中加入    定义文档中主要或重要的内容。</p>

        <h3 id="5-5-组织内容"   >
          <a href="#5-5-组织内容" class="heading-link"><i class="fas fa-link"></i></a>5.5 组织内容</h3>
      <p><code>&lt;p&gt;</code>    定义一个段落。<br><code>&lt;hr&gt;</code>    代表章节、文章或其他长内容中段落之间的分隔符。<br><code>&lt;pre&gt;</code>    代表其内容已经预先排版过，格式应当保留 。<br><code>&lt;blockquote&gt;</code>    代表引用自其他来源的内容。<br><code>&lt;ol&gt;</code>    定义一个有序列表。<br><code>&lt;ul&gt;</code>    定义一个无序列表。<br><code>&lt;li&gt;</code>    定义列表中的一个列表项。<br><code>&lt;dl&gt;</code>    定义一个定义列表（一系列术语和其定义）。<br><code>&lt;dt&gt;</code>    代表一个由下一个 <code>&lt;dd&gt;</code> 定义的术语。<br><code>&lt;dd&gt;</code>    代表出现在它之前术语的定义。<br><code>&lt;figure&gt;</code> 这个元素在 HTML5 中加入    代表一个和文档有关的图例。<br><code>&lt;figcaption&gt;</code> 这个元素在 HTML5 中加入    代表一个图例的说明。<br><code>&lt;div&gt;</code>    代表一个通用的容器，没有特殊含义。</p>

        <h3 id="5-6-文字形式"   >
          <a href="#5-6-文字形式" class="heading-link"><i class="fas fa-link"></i></a>5.6 文字形式</h3>
      <p><code>&lt;a&gt;</code>    代表一个链接到其他资源的超链接 。<br><code>&lt;em&gt;</code>    代表强调 文字。<br><code>&lt;strong&gt;</code>    代表特别重要 文字。<br><code>&lt;small&gt;</code>    代表注释 ，如免责声明、版权声明等，对理解文档不重要。<br><code>&lt;s&gt;</code>    代表不准确或不相关 的内容。<br><code>&lt;cite&gt;</code>    代表作品标题 。<br><code>&lt;q&gt;</code>    代表内联的引用 。<br><code>&lt;dfn&gt;</code>    代表一个术语包含在其最近祖先内容中的定义 。<br><code>&lt;abbr&gt;</code>    代表省略 或缩写 ，其完整内容在 title 属性中。<br><code>&lt;data&gt;</code> 这个元素在 HTML5 中加入    关联一个内容的机器可读的等价形式 （该元素只在 WHATWG 版本的 HTML 标准中，不在 W3C 版本的 HTML5 标准中）。<br><code>&lt;time&gt;</code> 这个元素在 HTML5 中加入    代表日期 和时间 值；机器可读的等价形式通过 datetime 属性指定。<br><code>&lt;code&gt;</code>    代表计算机代码 。<br><code>&lt;var&gt;</code>    代表代码中的变量 。<br><code>&lt;samp&gt;</code>    代表程序或电脑的输出 。<br><code>&lt;kbd&gt;</code>    代表用户输入 ，一般从键盘输出，但也可以代表其他输入，如语音输入。<br><code>&lt;sub&gt;</code>,<code>&lt;sup&gt;</code>    分别代表下标 和上标 。<br><code>&lt;i&gt;</code>    代表一段不同性质 的文字，如技术术语、外文短语等。<br><code>&lt;b&gt;</code>    代表一段需要被关注 的文字。<br><code>&lt;u&gt;</code>    代表一段需要下划线呈现的文本注释，如标记出拼写错误的文字等。<br><code>&lt;mark&gt;</code> 这个元素在 HTML5 中加入    代表一段需要被高亮的引用 文字。<br><code>&lt;ruby&gt;</code> 这个元素在 HTML5 中加入    代表被ruby 注释 标记的文本，如中文汉字和它的拼音。<br><code>&lt;rt&gt;</code> 这个元素在 HTML5 中加入    代表ruby 注释 ，如中文拼音。<br><code>&lt;rp&gt;</code> 这个元素在 HTML5 中加入    代表 ruby 注释两边的额外插入文本 ，用于在不支持 ruby 注释显示的浏览器中提供友好的注释显示。<br><code>&lt;bdi&gt;</code> 这个元素在 HTML5 中加入    代表需要脱离 父元素文本方向的一段文本。它允许嵌入一段不同或未知文本方向格式的文本。<br><code>&lt;bdo&gt;</code>    指定子元素的文本方向 ，显式地覆盖默认的文本方向。<br><code>&lt;span&gt;</code>    代表一段没有特殊含义的文本，当其他语义元素都不适合文本时候可以使用该元素。<br><code>&lt;br&gt;</code>    代表换行 。<br><code>&lt;wbr&gt;</code> 这个元素在 HTML5 中加入    代表建议换行 (Word Break Opportunity) ，当文本太长需要换行时将会在此处添加换行符。</p>

        <h3 id="5-7-编辑"   >
          <a href="#5-7-编辑" class="heading-link"><i class="fas fa-link"></i></a>5.7 编辑</h3>
      <p><code>&lt;ins&gt;</code>    定义增加 到文档的内容。<br><code>&lt;del&gt;</code>    定义从文档移除 的内容。</p>

        <h3 id="5-8-嵌入内容"   >
          <a href="#5-8-嵌入内容" class="heading-link"><i class="fas fa-link"></i></a>5.8 嵌入内容</h3>
      <p><code>&lt;img&gt;</code>    代表一张图片 。<br><code>&lt;iframe&gt;</code>    代表一个内联的框架 。<br><code>&lt;embed&gt;</code> 这个元素在 HTML5 中加入    代表一个嵌入 的外部资源，如应用程序或交互内容。<br><code>&lt;object&gt;</code>    代表一个外部资源 ，如图片、HTML 子文档、插件等。<br><code>&lt;param&gt;</code>    代表 <code>&lt;object&gt;</code> 元素所指定的插件的参数 。<br><code>&lt;video&gt;</code> 这个元素在 HTML5 中加入    代表一段视频 及其视频文件和字幕，并提供了播放视频的用户界面。<br><code>&lt;audio&gt;</code> 这个元素在 HTML5 中加入    代表一段声音 ，或音频流 。<br><code>&lt;source&gt;</code> 这个元素在 HTML5 中加入    为 <code>&lt;video&gt;</code> 或 <code>&lt;audio&gt;</code> 这类媒体元素指定媒体源 。<br><code>&lt;track&gt;</code> 这个元素在 HTML5 中加入    为 <code>&lt;video&gt;</code> 或 <code>&lt;audio&gt;</code> 这类媒体元素指定文本轨道（字幕） 。<br><code>&lt;canvas&gt;</code> 这个元素在 HTML5 中加入    代表位图区域 ，可以通过脚本在它上面实时呈现图形，如图表、游戏绘图等。<br><code>&lt;map&gt;</code>    与 <code>&lt;area&gt;</code> 元素共同定义图像映射 区域。<br><code>&lt;area&gt;</code>    与 <code>&lt;map&gt;</code> 元素共同定义图像映射 区域。<br><code>&lt;svg&gt;</code> 这个元素在 HTML5 中加入    定义一个嵌入式矢量图 。<br><code>&lt;math&gt;</code> 这个元素在 HTML5 中加入    定义一段数学公式 。</p>

        <h3 id="5-9-表格"   >
          <a href="#5-9-表格" class="heading-link"><i class="fas fa-link"></i></a>5.9 表格</h3>
      <p><code>&lt;table&gt;</code>    定义多维数据 。<br><code>&lt;caption&gt;</code>    代表表格的标题 。<br><code>&lt;colgroup&gt;</code>    代表表格中一组单列或多列 。<br><code>&lt;col&gt;</code>    代表表格中的列 。<br><code>&lt;tbody&gt;</code>    代表表格中一块具体数据 （表格主体）。<br><code>&lt;thead&gt;</code>    代表表格中一块列标签 （表头）。<br><code>&lt;tfoot&gt;</code>    代表表格中一块列摘要 （表尾）。<br><code>&lt;tr&gt;</code>    代表表格中的行 。<br><code>&lt;td&gt;</code>    代表表格中的单元格 。<br><code>&lt;th&gt;</code>    代表表格中的头部单元格 。</p>

        <h3 id="5-10-表单"   >
          <a href="#5-10-表单" class="heading-link"><i class="fas fa-link"></i></a>5.10 表单</h3>
      <p><code>&lt;form&gt;</code>    代表一个表单 ，由控件组成。<br><code>&lt;fieldset&gt;</code>    代表控件组 。<br><code>&lt;legend&gt;</code>    代表 <code>&lt;fieldset&gt;</code> 控件组的标题 。<br><code>&lt;label&gt;</code>    代表表单控件的标题 。<br><code>&lt;input&gt;</code>    代表允许用户编辑数据的数据区 （文本框、单选框、复选框等）。<br><code>&lt;button&gt;</code>    代表按钮 。<br><code>&lt;select&gt;</code>    代表下拉框 。<br><code>&lt;datalist&gt;</code> 这个元素在 HTML5 中加入    代表提供给其他控件的一组预定义选项 。<br><code>&lt;optgroup&gt;</code>    代表一个选项分组 。<br><code>&lt;option&gt;</code>    代表一个<code>&lt;select&gt;</code> 元素或 <code>&lt;datalist&gt;</code> 元素中的一个选项<br><code>&lt;textarea&gt;</code>    代表多行文本框 。<br><code>&lt;keygen&gt;</code> 这个元素在 HTML5 中加入    代表一个密钥对生成器 控件。<br><code>&lt;output&gt;</code> 这个元素在 HTML5 中加入    代表计算值 。<br><code>&lt;progress&gt;</code> 这个元素在 HTML5 中加入    代表进度条 。<br><code>&lt;meter&gt;</code> 这个元素在 HTML5 中加入    代表滑动条 。</p>

        <h3 id="5-11-交互元素"   >
          <a href="#5-11-交互元素" class="heading-link"><i class="fas fa-link"></i></a>5.11 交互元素</h3>
      <p><code>&lt;details&gt;</code> 这个元素在 HTML5 中加入    代表一个用户可以(点击)获取额外信息或控件的小部件 。<br><code>&lt;summary&gt;</code> 这个元素在 HTML5 中加入    代表 <code>&lt;details&gt;</code> 元素的综述 或标题 。<br><code>&lt;menuitem&gt;</code> 这个元素在 HTML5 中加入    代表一个用户可以点击的菜单项。<br><code>&lt;menu&gt;</code> 这个元素在 HTML5 中加入    代表菜单。</p>

        <h2 id="六、参考资料"   >
          <a href="#六、参考资料" class="heading-link"><i class="fas fa-link"></i></a>六、参考资料</h2>
      <p><span class="exturl"><a class="exturl__link"   href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/HTML5/HTML5_element_list"  target="_blank" rel="noopener">HTML5 标签列表
</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>理解HTML之a标签、input标签、form标签、table标签</title>
    <url>/2020/04/03/%E7%90%86%E8%A7%A3HTML%E4%B9%8Ba%E6%A0%87%E7%AD%BE%E3%80%81input%E6%A0%87%E7%AD%BE%E3%80%81form%E6%A0%87%E7%AD%BE%E3%80%81table%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[
        <h2 id="一、a标签"   >
          <a href="#一、a标签" class="heading-link"><i class="fas fa-link"></i></a>一、a标签</h2>
      
        <h3 id="1-1-定义"   >
          <a href="#1-1-定义" class="heading-link"><i class="fas fa-link"></i></a>1.1 定义</h3>
      <p>a标签定义超链接，用于从一张页面链接到另一张页面。</p>

        <h3 id="1-2-属性"   >
          <a href="#1-2-属性" class="heading-link"><i class="fas fa-link"></i></a>1.2 属性</h3>
      
        <h4 id="1-2-1-download"   >
          <a href="#1-2-1-download" class="heading-link"><i class="fas fa-link"></i></a>1.2.1 download</h4>
      <p>该属性提示用户将其保存为本地文件</p>
<p>例子：<br><code>&lt;a href=&quot;/images/baiduimage.jpg&quot; download=&quot;baidulogo&quot;&gt;</code></p>

        <h4 id="1-2-2-href"   >
          <a href="#1-2-2-href" class="heading-link"><i class="fas fa-link"></i></a>1.2.2 href</h4>
      <p>该属性指示链接的目标。</p>
<p>例子：<br><code>&lt;a href=&quot;http://www.baidu.com&quot;&gt;baidu&lt;/a&gt;</code></p>

        <h5 id="javascript-伪协议"   >
          <a href="#javascript-伪协议" class="heading-link"><i class="fas fa-link"></i></a>javascript 伪协议</h5>
      <p>例子：<code>&lt;a href=&quot;javascript:;&quot;&gt;&lt;/a&gt;</code></p>
<p>为什么要有 javascript 伪协议：</p>
<ul>
<li>可以在用户点击 a 时执行一段 javascript 代码</li>
<li>在地址栏输入<code>javascript:alert(1)</code> 可以在当前页面执行一段代码</li>
<li>伪协议可以实现「点击之后没有任何动作的 a 标签」，满足一些奇葩需求</li>
</ul>
<a id="more"></a>


        <h5 id="href注意事项"   >
          <a href="#href注意事项" class="heading-link"><i class="fas fa-link"></i></a>href注意事项</h5>
      <ol>
<li><code>http://xxx.com</code>链接写法</li>
<li>不写http或者https，写<code>/</code>,则打开为当前协议（无协议地址写法）</li>
<li>写相关路径，xxx.html，指引目标为参考</li>
<li>锚点 /xxx  锚点为页面中点跳转，不发起请求</li>
<li><code>name=xxx</code>，这样写很自然，发起get请求</li>
<li>伪协议”javascript：alert(1);” 历史遗留问题，一般用法：javascript:; 点击后，不要跳转，满足奇葩要求。</li>
<li>“” 空的话，就会刷新页面</li>
</ol>

        <h4 id="1-2-3-rel"   >
          <a href="#1-2-3-rel" class="heading-link"><i class="fas fa-link"></i></a>1.2.3 rel</h4>
      <p>该属性规定当前文档与被链接文档之间的关系。</p>
<p>作用介绍：</p>
<ul>
<li>rel属性是指定连接的关系类型，表明所连接的文档和此连接的关系;</li>
<li>把这个属性根据实际情况写的话， 对于搜索引擎来说，会起到一定的链接作用。特别是在html5中，部分属性还专门为浏览器或搜索引擎而提供的;</li>
</ul>
<p>例子<br><code>&lt;a rel=&quot;friend&quot; href=&quot;http://www.baidu.com&quot;&gt;baidu&lt;/a&gt;</code></p>

        <h4 id="1-2-4-target"   >
          <a href="#1-2-4-target" class="heading-link"><i class="fas fa-link"></i></a>1.2.4 target</h4>
      <p>该属性指定在何处显示链接的资源。</p>

        <h5 id="显示选项"   >
          <a href="#显示选项" class="heading-link"><i class="fas fa-link"></i></a>显示选项</h5>
      <ul>
<li>_self:默认值，自己页面打开</li>
<li>_blank:空页面打开</li>
<li>_parent:与iframe结合，在父页面打开，在iframe外，整个界面打开</li>
<li>_top:效果与_parent一样，要在祖宗三代页面才有其他效果，是最大的页面打开。</li>
</ul>

        <h3 id="1-3-考点"   >
          <a href="#1-3-考点" class="heading-link"><i class="fas fa-link"></i></a>1.3 考点</h3>
      <ol>
<li><code>&lt;a target=&quot;_top&quot; href=&quot;xxx&quot;&gt;&lt;/a&gt;</code>是在顶层窗口或 iframe窗口打开新页面</li>
<li><code>&lt;a target=&quot;xxx&quot; href=&quot;xxx&quot;&gt;&lt;/a&gt;</code>是在name 为 xxx 的窗口或 iframe窗口打开新页面</li>
<li><code>&lt;a href=&quot;&quot;&gt;link&lt;/a&gt;</code> 标签被点击后 当前页面刷新</li>
<li><code>&lt;a href=&quot;/..&quot;&gt;link&lt;/a&gt;</code> 标签被点击后 浏览器发起 GET / HTTP/1.1 的请求</li>
<li><code>&lt;a href=&quot;#&quot;&gt;link&lt;/a&gt;</code> 标签被点击后 页面锚点变成 <code>#</code>,页面滚动到顶部</li>
</ol>

        <h2 id="二、input标签"   >
          <a href="#二、input标签" class="heading-link"><i class="fas fa-link"></i></a>二、input标签</h2>
      
        <h3 id="2-1-定义"   >
          <a href="#2-1-定义" class="heading-link"><i class="fas fa-link"></i></a>2.1 定义</h3>
      <p><code>&lt;input&gt;</code> 标签规定用户可输入数据的输入字段。<br>根据不同的 type 属性，输入字段有多种形态。输入字段可以是文本字段、复选框、密码字段、单选按钮、按钮等等。</p>

        <h3 id="2-2-type"   >
          <a href="#2-2-type" class="heading-link"><i class="fas fa-link"></i></a>2.2 type</h3>
      
        <h4 id="2-2-1-type-”button”-定义可点击的按钮"   >
          <a href="#2-2-1-type-”button”-定义可点击的按钮" class="heading-link"><i class="fas fa-link"></i></a>2.2.1 type=”button”:定义可点击的按钮</h4>
      <p><code>&lt;input type=&quot;button&quot; value=&quot;点我&quot; onclick=&quot;msg()&quot;&gt;</code></p>

        <h4 id="2-2-2-type-”checkbox”-定义复选框"   >
          <a href="#2-2-2-type-”checkbox”-定义复选框" class="heading-link"><i class="fas fa-link"></i></a>2.2.2 type=”checkbox”:定义复选框</h4>
      <figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;vehicle[]&quot; value&#x3D;&quot;Bike&quot;&gt; 一辆自行车&lt;br&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;vehicle[]&quot; value&#x3D;&quot;Car&quot;&gt; 一辆小轿车&lt;br&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;vehicle[]&quot; value&#x3D;&quot;Boat&quot;&gt;一艘船&lt;br&gt;</span><br></pre></td></tr></table></div></figure>


        <h4 id="2-2-3-type-”email”用于编辑-e-mail-的字段。-合适的时候可以使用-valid-和-invalid-CSS-伪类。"   >
          <a href="#2-2-3-type-”email”用于编辑-e-mail-的字段。-合适的时候可以使用-valid-和-invalid-CSS-伪类。" class="heading-link"><i class="fas fa-link"></i></a>2.2.3 type=”email”用于编辑 e-mail 的字段。 合适的时候可以使用 :valid 和 :invalid CSS 伪类。</h4>
      <p><code>E-mail: &lt;input type=&quot;email&quot; name=&quot;usremail&quot;&gt;</code></p>

        <h4 id="2-2-4-type-”password-“-定义密码字段（密码字段中的字符会被遮蔽）"   >
          <a href="#2-2-4-type-”password-“-定义密码字段（密码字段中的字符会被遮蔽）" class="heading-link"><i class="fas fa-link"></i></a>2.2.4 type=”password “:定义密码字段（密码字段中的字符会被遮蔽）</h4>
      <p><code>&lt;input type=&quot;password&quot; name=&quot;pwd&quot;&gt;</code></p>

        <h4 id="2-2-5-type-”radio”-定义单选按钮。"   >
          <a href="#2-2-5-type-”radio”-定义单选按钮。" class="heading-link"><i class="fas fa-link"></i></a>2.2.5 type=”radio”:定义单选按钮。</h4>
      <figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;gender&quot; value&#x3D;&quot;male&quot;&gt; Male&lt;br&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;gender&quot; value&#x3D;&quot;女&quot;&gt; 女</span><br></pre></td></tr></table></div></figure>


        <h4 id="2-2-6-type-”submit”-用于提交表单的按钮"   >
          <a href="#2-2-6-type-”submit”-用于提交表单的按钮" class="heading-link"><i class="fas fa-link"></i></a>2.2.6 type=”submit”:用于提交表单的按钮</h4>
      <figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;submit&quot;&gt;</span><br></pre></td></tr></table></div></figure>
<p>如果form表单，只有一个按钮<code>&lt;button&gt;</code>,它就会自动升级为sumbit提交按钮</p>

        <h4 id="2-2-7-type-”text”-单行字段；换行会将自动从输入的值中移除。"   >
          <a href="#2-2-7-type-”text”-单行字段；换行会将自动从输入的值中移除。" class="heading-link"><i class="fas fa-link"></i></a>2.2.7 type=”text”:单行字段；换行会将自动从输入的值中移除。</h4>
      <figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">First name: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;fname&quot;&gt;&lt;br&gt;</span><br><span class="line">Last name: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;lname&quot;&gt;&lt;br&gt;</span><br></pre></td></tr></table></div></figure>


        <h3 id="2-3-select-下拉选择"   >
          <a href="#2-3-select-下拉选择" class="heading-link"><i class="fas fa-link"></i></a>2.3 select 下拉选择</h3>
      <figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">&lt;select name&#x3D;&quot;select&quot;&gt;</span><br><span class="line">  &lt;option value&#x3D;&quot;value1&quot;&gt;Value 1&lt;&#x2F;option&gt; </span><br><span class="line">  &lt;option value&#x3D;&quot;value2&quot; selected&gt;Value 2&lt;&#x2F;option&gt;</span><br><span class="line">  &lt;option value&#x3D;&quot;value3&quot; disabled&gt;Value 3&lt;&#x2F;option&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></div></figure>
<p>selected 默认选中<br>disabled 不能选中</p>

        <h3 id="2-4-textarea-文本输入框"   >
          <a href="#2-4-textarea-文本输入框" class="heading-link"><i class="fas fa-link"></i></a>2.4 textarea 文本输入框</h3>
      <figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">&lt;textarea name&#x3D;&quot;textarea&quot; rows&#x3D;&quot;10&quot; cols&#x3D;&quot;50&quot;&gt;Write something here&lt;&#x2F;textarea&gt;</span><br></pre></td></tr></table></div></figure>

<p>style=”resize:none” 固定大小，具体大小用CSS控制</p>

        <h2 id="三、form标签"   >
          <a href="#三、form标签" class="heading-link"><i class="fas fa-link"></i></a>三、form标签</h2>
      
        <h3 id="3-1-定义"   >
          <a href="#3-1-定义" class="heading-link"><i class="fas fa-link"></i></a>3.1 定义</h3>
      <p><code>&lt;form&gt;</code> 标签用于为用户输入创建 HTML 表单。表单用于向服务器传输数据。</p>

        <h3 id="3-2-属性"   >
          <a href="#3-2-属性" class="heading-link"><i class="fas fa-link"></i></a>3.2 属性</h3>
      
        <h4 id="3-2-1-method"   >
          <a href="#3-2-1-method" class="heading-link"><i class="fas fa-link"></i></a>3.2.1 method</h4>
      <p>规定用于发送 form-data 的 HTTP 方法。有get请求与post请求。</p>
<p>post 默认将参数放在第四部分里面<br>get 默认将参数放在查询参数里面</p>
<p>如果form表单没有提交按钮，则无法提交。<br>form表单一般来发post请求</p>
<p>例子</p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">下面的表单拥有两个输入字段以及一个提交按钮，当提交表单时，表单数据会提交到名为 &quot;form_action.asp&quot; 的页面</span><br><span class="line">&lt;form action&#x3D;&quot;form_action.asp&quot; method&#x3D;&quot;get&quot;&gt;</span><br><span class="line">  &lt;p&gt;First name: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;fname&quot; &#x2F;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p&gt;Last name: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;lname&quot; &#x2F;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Submit&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></div></figure>

        <h4 id="3-2-2-action"   >
          <a href="#3-2-2-action" class="heading-link"><i class="fas fa-link"></i></a>3.2.2 action</h4>
      <p>规定当提交表单时向何处发送表单数据</p>

        <h3 id="3-3-考点"   >
          <a href="#3-3-考点" class="heading-link"><i class="fas fa-link"></i></a>3.3 考点</h3>
      <ul>
<li>form 标签在以下哪些情况下可以被用户提交<ul>
<li>form 标签里面有一个 input type=submit 的元素</li>
<li>form 标签里面有一个 button 元素，button 的 type 属性为空</li>
</ul>
</li>
<li>form 标签里面的 input 加不加 name 属性由什么区别？<ul>
<li>如果 input 不加 name，那么在表单提交时，input 的值就不会出现在请求里</li>
</ul>
</li>
</ul>

        <h2 id="四-table标签"   >
          <a href="#四-table标签" class="heading-link"><i class="fas fa-link"></i></a>四. table标签</h2>
      
        <h3 id="4-1-定义"   >
          <a href="#4-1-定义" class="heading-link"><i class="fas fa-link"></i></a>4.1 定义</h3>
      <p>标签定义 HTML 表格,简单的 HTML 表格由 table 元素以及一个或多个 tr、th 或 td 元素组成。</p>

        <h3 id="4-2-元素"   >
          <a href="#4-2-元素" class="heading-link"><i class="fas fa-link"></i></a>4.2 元素</h3>
      
        <h4 id="4-2-1-tr（table-row）"   >
          <a href="#4-2-1-tr（table-row）" class="heading-link"><i class="fas fa-link"></i></a>4.2.1 tr（table row）</h4>
      <p>定义表格行</p>

        <h4 id="4-2-2-th"   >
          <a href="#4-2-2-th" class="heading-link"><i class="fas fa-link"></i></a>4.2.2 th</h4>
      <p>定义表头</p>

        <h4 id="4-2-3-td（table-data）"   >
          <a href="#4-2-3-td（table-data）" class="heading-link"><i class="fas fa-link"></i></a>4.2.3 td（table data）</h4>
      <p>定义表格单元</p>

        <h4 id="4-2-4-caption"   >
          <a href="#4-2-4-caption" class="heading-link"><i class="fas fa-link"></i></a>4.2.4 caption</h4>
      <p>展示一个表格的标题.可选</p>

        <h4 id="4-2-5-thead"   >
          <a href="#4-2-5-thead" class="heading-link"><i class="fas fa-link"></i></a>4.2.5 thead</h4>
      <p>定义了一组定义表格的列头的行.可选</p>

        <h4 id="4-2-6-tfoot"   >
          <a href="#4-2-6-tfoot" class="heading-link"><i class="fas fa-link"></i></a>4.2.6 tfoot</h4>
      <p>定义了一组表格中各列的汇总行<br>tfoot放在thead前面没有效果，浏览器会自动纠正</p>

        <h4 id="4-2-7-colgroup"   >
          <a href="#4-2-7-colgroup" class="heading-link"><i class="fas fa-link"></i></a>4.2.7 colgroup</h4>
      <p>标签用于对表格中的列进行组合，以便对其进行格式化。</p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">两个 colgroup 元素为表格中的三列规定了不同的对齐方式和样式（注意第一个 colgroup 元素横跨两列）：</span><br><span class="line">&lt;table width&#x3D;&quot;100%&quot; border&#x3D;&quot;1&quot;&gt;</span><br><span class="line">  &lt;colgroup span&#x3D;&quot;2&quot; align&#x3D;&quot;left&quot;&gt;&lt;&#x2F;colgroup&gt;</span><br><span class="line">  &lt;colgroup align&#x3D;&quot;right&quot; style&#x3D;&quot;color:#0000FF;&quot;&gt;&lt;&#x2F;colgroup&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;th&gt;ISBN&lt;&#x2F;th&gt;</span><br><span class="line">    &lt;th&gt;Title&lt;&#x2F;th&gt;</span><br><span class="line">    &lt;th&gt;Price&lt;&#x2F;th&gt;</span><br><span class="line">  &lt;&#x2F;tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;3476896&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;td&gt;My first HTML&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;td&gt;$53&lt;&#x2F;td&gt;</span><br><span class="line">  &lt;&#x2F;tr&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br></pre></td></tr></table></div></figure>


        <h4 id="4-2-8-tbody"   >
          <a href="#4-2-8-tbody" class="heading-link"><i class="fas fa-link"></i></a>4.2.8 tbody</h4>
      <p>定义一段表格主体（正文）</p>

        <h3 id="4-3-例子"   >
          <a href="#4-3-例子" class="heading-link"><i class="fas fa-link"></i></a>4.3 例子</h3>
      <figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">&lt;table border&#x3D;&quot;1&quot;&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;th&gt;Month&lt;&#x2F;th&gt;</span><br><span class="line">&lt;th&gt;Savings&lt;&#x2F;th&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;January&lt;&#x2F;td&gt;</span><br><span class="line">&lt;td&gt;$100&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br></pre></td></tr></table></div></figure>
</table>


        <h3 id="4-4-table注意事项"   >
          <a href="#4-4-table注意事项" class="heading-link"><i class="fas fa-link"></i></a>4.4 table注意事项</h3>
      <p>CSS:border-collapse：collapse 没有双线</p>

        <h2 id="五、-参考资料"   >
          <a href="#五、-参考资料" class="heading-link"><i class="fas fa-link"></i></a>五、 参考资料</h2>
      <p><a href="https://my.oschina.net/liangrockman/blog/74468" target="_blank" rel="noopener">HTML中<a>标签的rel属性的含义_HTML5新增属性值 </a><br><a href="https://www.runoob.com/tags/att-input-type.html" target="_blank" rel="noopener">HTML <code>&lt;input&gt;</code> type 属性</a><br><a href="http://www.w3school.com.cn/tags/tag_colgroup.asp" target="_blank" rel="noopener">HTML <code>&lt;colgroup&gt;</code> 标签</a></p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>简单理解HTTP之请求与响应</title>
    <url>/2020/04/03/%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3HTTP%E4%B9%8B%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94/</url>
    <content><![CDATA[
        <h2 id="定义"   >
          <a href="#定义" class="heading-link"><i class="fas fa-link"></i></a>定义</h2>
      <p>超文本传输协议（英语：HyperText Transfer Protocol，缩写：HTTP）是一种用于分布式、协作式和超媒体信息系统的应用层协议。HTTP是万维网的数据通信的基础。</p>
<p>HTTP 的作用就是指导浏览器和服务器如何进行沟通。</p>

        <h2 id="curl命令"   >
          <a href="#curl命令" class="heading-link"><i class="fas fa-link"></i></a>curl命令</h2>
      <p>在Linux中curl是一个利用URL规则在命令行下工作的文件传输工具，可以说是一款很强大的http命令行工具。它支持文件的上传和下载，是综合传输工具，但按传统，习惯称url为下载工具。</p>

        <h3 id="语法"   >
          <a href="#语法" class="heading-link"><i class="fas fa-link"></i></a>语法</h3>
      <p><code>curl [option] [url]</code></p>
<a id="more"></a>


        <h4 id="option"   >
          <a href="#option" class="heading-link"><i class="fas fa-link"></i></a>option</h4>
      <ul>
<li>-H/–header <code>&lt;line&gt;</code>    自定义头信息传递给服务器</li>
<li>-s/–silent 静音模式。不输出任何东西</li>
<li>-V/–version    显示版本信息</li>
<li>-X/–request <code>&lt;command&gt;</code>    指定什么命令</li>
<li>d/–data <code>&lt;data&gt;</code>    HTTP POST方式传送数据</li>
</ul>

        <h2 id="HTTP请求"   >
          <a href="#HTTP请求" class="heading-link"><i class="fas fa-link"></i></a>HTTP请求</h2>
      
        <h3 id="组成部分"   >
          <a href="#组成部分" class="heading-link"><i class="fas fa-link"></i></a>组成部分</h3>
      <figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">1 动词路径协议&#x2F;版本</span><br><span class="line">2 Key1: value1</span><br><span class="line">2 Key2: value2</span><br><span class="line">2 Key3: value3</span><br><span class="line">2 Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">2 Host: www.baidu.com</span><br><span class="line">2 User-Agent: curl&#x2F;7.54.0</span><br><span class="line">3 </span><br><span class="line">4 要上传的数据</span><br></pre></td></tr></table></div></figure>

<p>请求最多包含四部分，最少包含三部分。（也就是说第四部分可以为空）<br>第三部分永远都是一个回车<br>动词有 GET POST PUT PATCH DELETE HEAD OPTIONS 等<br>这里的路径包括「查询参数」，但不包括「锚点」<br>如果没有写路径，那么路径默认为 /<br>第2部分中的 Content-Type 标注了第 4 部分的格式</p>

        <h3 id="例子"   >
          <a href="#例子" class="heading-link"><i class="fas fa-link"></i></a>例子</h3>
      <blockquote>
<p>命令curl -s -v -H “qqq111: xxx” – “<span class="exturl"><a class="exturl__link"   href="https://www.baidu.com&quot;"  target="_blank" rel="noopener">https://www.baidu.com&quot;</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
</blockquote>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">&gt; GET &#x2F; HTTP&#x2F;1.1</span><br><span class="line">&gt; Host: www.baidu.com</span><br><span class="line">&gt; User-Agent: curl&#x2F;7.54.0</span><br><span class="line">&gt; Accept: *&#x2F;*</span><br><span class="line">&gt; qqq111: xxx</span><br><span class="line">&gt;</span><br></pre></td></tr></table></div></figure>


        <h3 id="如何用Chrome开发者工具查看-HTTP-请求内容"   >
          <a href="#如何用Chrome开发者工具查看-HTTP-请求内容" class="heading-link"><i class="fas fa-link"></i></a>如何用Chrome开发者工具查看 HTTP 请求内容</h3>
      <p>1.点右键<br>2.点“检查”<br>3.点“Network”那栏<br>4.在输入框输入baidu.com<br>5.在Network那里会获取相关http信息，找到Name下的<code>www.baidu.com</code>选项点击进去<br>6.找到Request Headers选项<br>7.点击隔壁的view source<br>8.就可以查看到HTTP请求内容</p>

        <h2 id="HTTP响应"   >
          <a href="#HTTP响应" class="heading-link"><i class="fas fa-link"></i></a>HTTP响应</h2>
      
        <h3 id="组成部分-1"   >
          <a href="#组成部分-1" class="heading-link"><i class="fas fa-link"></i></a>组成部分</h3>
      <figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">1 协议&#x2F;版本号状态码状态解释</span><br><span class="line">2 Key1: value1</span><br><span class="line">2 Key2: value2</span><br><span class="line">2 Content-Length: 17931</span><br><span class="line">2 Content-Type: text&#x2F;html</span><br><span class="line">3</span><br><span class="line">4 要下载的内容</span><br></pre></td></tr></table></div></figure>


        <h3 id="状态码"   >
          <a href="#状态码" class="heading-link"><i class="fas fa-link"></i></a>状态码</h3>
      <p>1xx 不常用<br>2xx 表示成功 200<br>3xx 表示滚吧，301 302<br>4xx 表示客户端错误  404<br>5xx 表示好吧，服务器错误  502</p>

        <h3 id="例子-1"   >
          <a href="#例子-1" class="heading-link"><i class="fas fa-link"></i></a>例子</h3>
      <p><code>命令 curl -X POST -d &quot;1234567890&quot; -s -v -H &quot;qqq111: xxx&quot; -- &quot;https://www.baidu.com&quot;</code></p>
<figure class="highlight plain"><div class="table-container"><table><tr><td class="code"><pre><span class="line">&lt; HTTP&#x2F;1.1 302 Found</span><br><span class="line">&lt; Connection: Keep-Alive</span><br><span class="line">&lt; Content-Length: 17931</span><br><span class="line">&lt; Content-Type: text&#x2F;html</span><br><span class="line">&lt; Date: Mon, 10 Jun 2019 03:15:09 GMT</span><br><span class="line">&lt; Etag: &quot;54d9748e-460b&quot;</span><br><span class="line">&lt; Server: bfe&#x2F;1.0.8.18</span><br><span class="line">&lt;</span><br><span class="line">&lt; 下载的内容，省略。。。</span><br></pre></td></tr></table></div></figure>


        <h3 id="HTTP-响应包括哪些部分，如何用Chrome开发者工具查看-HTTP-响应内容"   >
          <a href="#HTTP-响应包括哪些部分，如何用Chrome开发者工具查看-HTTP-响应内容" class="heading-link"><i class="fas fa-link"></i></a>HTTP 响应包括哪些部分，如何用Chrome开发者工具查看 HTTP 响应内容</h3>
      <p>1.点右键<br>2.点“检查”<br>3.点“Network”那栏<br>4.在输入框输入baidu.com<br>5.在Network那里会获取相关http信息，找到Name下的<code>www.baidu.com</code>选项点击进去<br>6.找到Response Headers选项<br>7.点击隔壁的view source<br>8.就可以查看到HTTP响应内容</p>

        <h2 id="参考资料"   >
          <a href="#参考资料" class="heading-link"><i class="fas fa-link"></i></a>参考资料</h2>
      <p>1.<span class="exturl"><a class="exturl__link"   href="https://www.cnblogs.com/duhuo/p/5695256.html"  target="_blank" rel="noopener">Linux curl命令详解</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br>2.<span class="exturl"><a class="exturl__link"   href="http://man.linuxde.net/curl"  target="_blank" rel="noopener">curl命令</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>说说CSS布局那些事</title>
    <url>/2020/04/03/%E8%AF%B4%E8%AF%B4CSS%E5%B8%83%E5%B1%80%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
    <content><![CDATA[
        <h2 id="一、左右布局"   >
          <a href="#一、左右布局" class="heading-link"><i class="fas fa-link"></i></a>一、左右布局</h2>
      
        <h3 id="1-1方法一：margin宽度等于固定宽那栏的宽度"   >
          <a href="#1-1方法一：margin宽度等于固定宽那栏的宽度" class="heading-link"><i class="fas fa-link"></i></a>1.1方法一：margin宽度等于固定宽那栏的宽度</h3>
      
        <h4 id="代码如下"   >
          <a href="#代码如下" class="heading-link"><i class="fas fa-link"></i></a>代码如下</h4>
      <p>HTML部分</p>
<figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container clearfix"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sideBar"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是侧边栏，我是固定宽<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是主体部分，我是自适应的<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></div></figure>

<p>CSS部分</p>
<figure class="highlight css"><div class="table-container"><table><tr><td class="code"><pre><span class="line">  *&#123;</span><br><span class="line">   <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.sideBar</span>&#123;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="number">#FF6200</span>;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">	<span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span>&#123;</span><br><span class="line">	<span class="attribute">background-color</span>:<span class="number">#00A480</span>;</span><br><span class="line">	<span class="attribute">margin-left</span>: <span class="number">200px</span>;<span class="comment">/*减去固定宽的侧边栏的宽度*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.claerfix</span>&#123;</span><br><span class="line">	<span class="attribute">display</span>: inline-block;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">	<span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>,<span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">	<span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;<span class="comment">/*这是让高度铺满页面*/</span></span><br></pre></td></tr></table></div></figure>

<a id="more"></a>


        <h3 id="1-2-方法二：两栏分别左右浮动"   >
          <a href="#1-2-方法二：两栏分别左右浮动" class="heading-link"><i class="fas fa-link"></i></a>1.2 方法二：两栏分别左右浮动</h3>
      
        <h4 id="代码如下-1"   >
          <a href="#代码如下-1" class="heading-link"><i class="fas fa-link"></i></a>代码如下</h4>
      <p>HTML部分</p>
<figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container clearfix"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sideBar"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是左div，我向左浮动<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是右div，我向右浮动<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></div></figure>

<p>CSS部分</p>
<figure class="highlight css"><div class="table-container"><table><tr><td class="code"><pre><span class="line"> *&#123;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.sideBar</span>&#123;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="number">#FF9400</span>;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">	<span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span>&#123;</span><br><span class="line">	<span class="attribute">background-color</span>:<span class="number">#3F8FD2</span>;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">	<span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.claerfix</span>&#123;</span><br><span class="line">	<span class="attribute">display</span>: inline-block;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">	<span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>,<span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">	<span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;<span class="comment">/*这是让高度铺满页面*/</span></span><br></pre></td></tr></table></div></figure>


        <h2 id="二、-左中右布局"   >
          <a href="#二、-左中右布局" class="heading-link"><i class="fas fa-link"></i></a>二、 左中右布局</h2>
      
        <h3 id="2-1-圣杯布局（左右固定宽，中间自适应）"   >
          <a href="#2-1-圣杯布局（左右固定宽，中间自适应）" class="heading-link"><i class="fas fa-link"></i></a>2.1 圣杯布局（左右固定宽，中间自适应）</h3>
      
        <h4 id="代码如下-2"   >
          <a href="#代码如下-2" class="heading-link"><i class="fas fa-link"></i></a>代码如下</h4>
      <p>HTML代码</p>
<figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container clearfix"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是中间div，我是自适应的<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"leftSide"</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是左div<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rgihtSide"</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是右div<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></div></figure>

<p>CSS代码</p>
<figure class="highlight css"><div class="table-container"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">	<span class="attribute">padding</span>:<span class="number">0</span> <span class="number">300px</span> <span class="number">0</span> <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span>&#123;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="number">#61B4CF</span>;</span><br><span class="line">	<span class="attribute">float</span>: left;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.leftSide</span>&#123;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="number">#FF5D40</span>;</span><br><span class="line">	<span class="attribute">float</span>: left;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">	<span class="attribute">left</span>: -<span class="number">100%</span>;</span><br><span class="line">	<span class="attribute">margin-left</span>: -<span class="number">200px</span>;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.rgihtSide</span>&#123;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="number">#87EA00</span>;</span><br><span class="line">	<span class="attribute">float</span>: left;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">	<span class="attribute">right</span>: -<span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">margin-left</span>: -<span class="number">300px</span>;	</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>,<span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">	<span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;<span class="comment">/*这是让高度铺满页面*/</span></span><br></pre></td></tr></table></div></figure>

        <h4 id="注意要点"   >
          <a href="#注意要点" class="heading-link"><i class="fas fa-link"></i></a>注意要点</h4>
      <ul>
<li>在容器最中间的<code>div</code>要先写，然后再写两侧，因为浏览器是从上到下渲染的，要给中间为最下面，否则会出现两侧<code>div</code>会覆盖有bug。</li>
<li><code>.leftSide</code>与<code>.rgihtSide</code>的代码是不同的，要特别注意一下。<ul>
<li>在相对定位的值上，<code>.leftSide</code>的<code>left</code>是用<code>-100%</code>表示，因为在HTML的中，<code>.leftSide</code>是在排中间的，因为CSS要将他排在最左边就，必须用100%。</li>
<li>而<code>.rgihtSide</code>的<code>right</code>是用<code>-300px</code>,是在父元素的右边的外面的300px的意思 </li>
</ul>
</li>
</ul>

        <h3 id="2-2-双飞翼布局"   >
          <a href="#2-2-双飞翼布局" class="heading-link"><i class="fas fa-link"></i></a>2.2 双飞翼布局</h3>
      
        <h4 id="代码如下-3"   >
          <a href="#代码如下-3" class="heading-link"><i class="fas fa-link"></i></a>代码如下</h4>
      <p>HTML部分</p>
<figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center-inner"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是center里间的div，我是自适应的<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"leftSide"</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是左div<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rgihtSide"</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是右div<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></div></figure>
<p>CSS部分</p>
<figure class="highlight css"><div class="table-container"><table><tr><td class="code"><pre><span class="line">  *&#123;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span>,</span><br><span class="line"><span class="selector-class">.leftSide</span>,</span><br><span class="line"><span class="selector-class">.rgihtSide</span>&#123;</span><br><span class="line">	<span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="number">#028E9B</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center-inner</span>&#123;</span><br><span class="line">	<span class="attribute">margin-left</span>: <span class="number">150px</span>;</span><br><span class="line">	<span class="attribute">margin-right</span>: <span class="number">250px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.leftSide</span>&#123;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="number">#BFBB30</span>;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">	<span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.rgihtSide</span>&#123;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="number">#C062D3</span>;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">250px</span>;</span><br><span class="line">	<span class="attribute">margin-left</span>: -<span class="number">250px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>,<span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;<span class="comment">/*这是让高度铺满页面*/</span></span><br></pre></td></tr></table></div></figure>


        <h3 id="2-3-圣杯布局与双飞翼布局的关系"   >
          <a href="#2-3-圣杯布局与双飞翼布局的关系" class="heading-link"><i class="fas fa-link"></i></a>2.3 圣杯布局与双飞翼布局的关系</h3>
      <ul>
<li>圣杯布局是在2006年提出的，而双飞翼布局是在后提出，是在圣杯布局上改进。</li>
<li>相同点<ul>
<li>他们都要让三个布局<code>DIV float：left</code></li>
<li>都要先让HTML最中间的<code>DIV</code>先写先渲染</li>
<li>都设置中间的<code>DIV</code>宽度为100%</li>
<li>都设置负边距，左边<code>DIV</code>左边距为负100%，而右边<code>DIV</code>的左边距为负的自身宽度。</li>
</ul>
</li>
<li>不同点<ul>
<li>圣杯布局结构比双飞翼布局少一层</li>
<li>双飞翼布局没有用相对定位</li>
</ul>
</li>
</ul>

        <h3 id="2-4-flex布局"   >
          <a href="#2-4-flex布局" class="heading-link"><i class="fas fa-link"></i></a>2.4 flex布局</h3>
      <p>flex 这个功能可以说是太强大，无论是在三栏多栏布局，还是水平垂直居中它都可以实现。</p>

        <h4 id="flex简单说明"   >
          <a href="#flex简单说明" class="heading-link"><i class="fas fa-link"></i></a>flex简单说明</h4>
      <ul>
<li><code>display:flex</code>声明flex布局</li>
<li><code>flex-direction</code>决定主轴的方向</li>
<li><code>justify-content</code>项目在主轴上的对齐方式。</li>
<li><code>align-items</code>项目在交叉轴上如何对齐。</li>
</ul>
<p>继续推荐大家看阮一峰大大的对flex讲解文章<span class="exturl"><a class="exturl__link"   href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html"  target="_blank" rel="noopener">Flex 布局教程：语法篇</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>

        <h2 id="三、水平居中方法"   >
          <a href="#三、水平居中方法" class="heading-link"><i class="fas fa-link"></i></a>三、水平居中方法</h2>
      <ul>
<li><p>行内元素<code>text-align：center；</code> </p>
</li>
<li><p>块级元素<code>在width:有宽度 可以使用margin：0 auto；</code></p>
</li>
<li><p>绝对定位实现</p>
</li>
<li><p>display: flex实现水平居中,例子如下</p>
</li>
</ul>
<figure class="highlight"><div class="table-container"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"> <span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">display</span>:flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;   </span><br><span class="line">  &#125;</span><br><span class="line"> <span class="selector-class">.container</span> &gt; <span class="selector-tag">div</span>&#123;</span><br><span class="line">   <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">background-color</span>:blue;</span><br><span class="line"> &#125;</span><br><span class="line"> &lt;/style&gt;</span><br></pre></td></tr></table></div></figure>

<figure class="highlight html"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></div></figure>



        <h2 id="四、-垂直居中方法"   >
          <a href="#四、-垂直居中方法" class="heading-link"><i class="fas fa-link"></i></a>四、 垂直居中方法</h2>
      <ul>
<li>单行文字可以<code>line-height</code></li>
<li>flex布局实现垂直居中 </li>
<li>上下padding相等法</li>
<li>绝对定位和margin实现垂直水平居中<br>例子如下</li>
</ul>
<figure class="highlight css"><div class="table-container"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line"><span class="selector-tag">left</span>: 50%;</span><br><span class="line"><span class="selector-tag">top</span>: 50%;</span><br><span class="line"><span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span><br><span class="line"><span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span><br><span class="line"><span class="selector-tag">margin-left</span><span class="selector-pseudo">:-100px</span>;</span><br><span class="line"><span class="selector-tag">margin-top</span><span class="selector-pseudo">:-50px</span>;</span><br></pre></td></tr></table></div></figure>


        <h2 id="五、-参考资料"   >
          <a href="#五、-参考资料" class="heading-link"><i class="fas fa-link"></i></a>五、 参考资料</h2>
      <p><span class="exturl"><a class="exturl__link"   href="http://www.cnblogs.com/imwtr/p/4441741.html"  target="_blank" rel="noopener">CSS布局 – 圣杯布局 &amp; 双飞翼布局</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><br><span class="exturl"><a class="exturl__link"   href="https://www.zhihu.com/question/20543196"  target="_blank" rel="noopener">用 CSS 实现元素垂直居中，有哪些好的方案？</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>
]]></content>
      <categories>
        <category>前端开发</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
</search>
