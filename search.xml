<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【JavaScript】Promise</title>
    <url>/2020/04/03/%20%E3%80%90JavaScript%E3%80%91Promise/</url>
    <content><![CDATA[<h2 id="一、前置问题：用函数有什么问题？—回调问题"><a href="#一、前置问题：用函数有什么问题？—回调问题" class="headerlink" title="一、前置问题：用函数有什么问题？—回调问题"></a>一、前置问题：用函数有什么问题？—回调问题</h2><p>如果不查阅文档，不知道回调的是什么，成功传到哪里，失败传到哪里。</p>
<p>因为每一个人封装函数的风格，不一致，导致要查看多个文档才能更好调有其他人的库。<br>没有规范，那么在JavaScript中有没有一个规范来定义形式咧？</p>
<p>有，这个规范就是Promise</p>
<p>Promise只是一个确定形式的规范。</p>
<a id="more"></a>

<h2 id="二、Promise的使用"><a href="#二、Promise的使用" class="headerlink" title="二、Promise的使用"></a>二、Promise的使用</h2><h3 id="以jQuery为例"><a href="#以jQuery为例" class="headerlink" title="以jQuery为例"></a>以jQuery为例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//提前引入jQuery文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第一个方法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">responseText</span>)</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">response</span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> myButton.addEventListener(<span class="string">'click'</span>,(e)=&gt;&#123;</span><br><span class="line">  <span class="built_in">window</span>.jQuery.ajax(&#123;</span><br><span class="line">    url:<span class="string">'/frank'</span>,</span><br><span class="line">    method:<span class="string">'get'</span>,</span><br><span class="line">    success:<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">      f1.call(<span class="literal">undefined</span>,x)</span><br><span class="line">      f2.call(<span class="literal">undefined</span>,y)</span><br><span class="line">    &#125;,</span><br><span class="line">    error:<span class="function">(<span class="params">x</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(x)</span><br><span class="line">      <span class="built_in">console</span>.log(x.status)</span><br><span class="line">      <span class="built_in">console</span>.log(x.responseText)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二个方法(Promise方法)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">then</span>(<span class="params">responseText</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(responseText)</span><br><span class="line"> &#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fail</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(response)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> myButton.addEventListener(<span class="string">'click'</span>,(e)=&gt;&#123;</span><br><span class="line">  $ajax(&#123;</span><br><span class="line">    url:<span class="string">'/frank'</span>,</span><br><span class="line">    method:<span class="string">'get'</span>,</span><br><span class="line">  &#125;).then(success,fail)</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//这是一种新的API形式，虽然要传函数，但可以没有名字。</span></span><br><span class="line"><span class="comment">//不用再查找文档，只要记得成功放在第一个参数，失败放在第二个参数。</span></span><br><span class="line"><span class="comment">//代码得以继续优化</span></span><br><span class="line"></span><br><span class="line"> myButton.addEventListener(<span class="string">'click'</span>,(e)=&gt;&#123;</span><br><span class="line">  $ajax(&#123;</span><br><span class="line">    url:<span class="string">'/xxx'</span>,</span><br><span class="line">    method:<span class="string">'get'</span>,</span><br><span class="line">  &#125;).then(</span><br><span class="line">    (responseText) =&gt; &#123;<span class="built_in">console</span>.log(responseText)&#125;,</span><br><span class="line">    (response) =&gt; &#123;<span class="built_in">console</span>.log(<span class="string">'error'</span>)&#125;</span><br><span class="line">  )</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>

<h2 id="三、Promise的意义"><a href="#三、Promise的意义" class="headerlink" title="三、Promise的意义"></a>三、Promise的意义</h2><ul>
<li>第一个意义：完全不用考虑传入的是success还是成功，是error还是fail，直接then一下就可以使用</li>
<li>第二个意义：标准化操作</li>
</ul>
<h2 id="四、问题：如果同时有两个函数要操作，Promise是如何操作？"><a href="#四、问题：如果同时有两个函数要操作，Promise是如何操作？" class="headerlink" title="四、问题：如果同时有两个函数要操作，Promise是如何操作？"></a>四、问题：如果同时有两个函数要操作，Promise是如何操作？</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">myButton.addEventListener(<span class="string">'click'</span>,(e)=&gt;&#123;</span><br><span class="line"> $ajax(&#123;</span><br><span class="line">   url:<span class="string">'/xxx'</span>,</span><br><span class="line">   method:<span class="string">'get'</span>,</span><br><span class="line"> &#125;).then( <span class="comment">//then的中文含义：然后</span></span><br><span class="line">   (responseText) =&gt; &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(responseText);</span><br><span class="line">   <span class="keyword">return</span> responseText</span><br><span class="line">   (response) =&gt; &#123;<span class="built_in">console</span>.log(<span class="string">'error1'</span>);<span class="keyword">return</span> <span class="string">'已经处理'</span></span><br><span class="line"> ).then(</span><br><span class="line">   (上一次的处理结果) =&gt; &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(上一次的处理结果)</span><br><span class="line">   &#125;,</span><br><span class="line">   (response) =&gt; &#123;<span class="built_in">console</span>.log(<span class="string">'error2'</span>);</span><br><span class="line"> )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//这样就把回调规范起来了</span></span><br></pre></td></tr></table></figure>

<p>浏览器结果如下<br><img src="https://i.loli.net/2020/03/04/iCoAa7d1zlGt2kc.png" alt="Promise01.png"></p>
<h2 id="五、自己如何封装Promise"><a href="#五、自己如何封装Promise" class="headerlink" title="五、自己如何封装Promise"></a>五、自己如何封装Promise</h2><p>全局window下的promise，promise接受一个函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQeuery.ajax=<span class="function"><span class="keyword">function</span>(<span class="params">&#123;url,method,body,successFn,failFn,headers&#125;</span>)</span>&#123;</span><br><span class="line"><span class="comment">//请问ajax的返回值是什么？</span></span><br><span class="line"><span class="comment">//答案：Promise new出来的对象(Promise对象，接受一个函数)</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> request = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  request.open(method,url)</span><br><span class="line">  request.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(request.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &gt; <span class="number">300</span> )&#123;</span><br><span class="line">      successFn.call(<span class="literal">undefined</span>,request.responseText)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.status &gt;= <span class="number">400</span> )&#123;</span><br><span class="line">      failFn.call(<span class="literal">undefined</span>，request)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  request.send(body)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>背诵<code>return new Promise(function(resolve,reject){}</code>这是Promise的格式，固定套路</p>
<h3 id="5-1-将resolve-reject套入代码中"><a href="#5-1-将resolve-reject套入代码中" class="headerlink" title="5.1  将resolve,reject套入代码中"></a>5.1  将resolve,reject套入代码中</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQeuery.ajax=<span class="function"><span class="keyword">function</span>(<span class="params">&#123;url,method,body,headers&#125;</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> request = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  request.open(method,url)</span><br><span class="line">  request.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(request.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &gt; <span class="number">300</span> )&#123;</span><br><span class="line">      resolve.call(<span class="literal">undefined</span>,request.responseText)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.status &gt;= <span class="number">400</span> )&#123;</span><br><span class="line">      reject.call(<span class="literal">undefined</span>，request)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  request.send(body)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>




<h3 id="5-2-总结"><a href="#5-2-总结" class="headerlink" title="5.2 总结"></a>5.2 总结</h3><ol>
<li>首先是用then代替了successFn，failFn参数</li>
<li>然后把代码都放入在<code>return new Promise(function(resolve,reject){}</code>格式中</li>
<li>如果成功调用resolve，如果失败调用reject</li>
</ol>
<h3 id="5-3-jquery-ajax使用Promise"><a href="#5-3-jquery-ajax使用Promise" class="headerlink" title="5.3 jquery.ajax使用Promise"></a>5.3 jquery.ajax使用Promise</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">myButton.addEventListener(<span class="string">'click'</span>, (e) =&gt;&#123;</span><br><span class="line">  <span class="built_in">window</span>.jQuery.ajax(&#123;</span><br><span class="line">    <span class="comment">//url:'tony', 这是失败</span></span><br><span class="line">    url:<span class="string">'/xxx'</span>, <span class="comment">//这是成功</span></span><br><span class="line">    method:<span class="string">'get'</span>,</span><br><span class="line">    headers:&#123;</span><br><span class="line">      <span class="string">'content-type'</span>:<span class="string">'application/x-www-form-urlencoded'</span>,</span><br><span class="line">      <span class="string">'tony'</span>:<span class="string">'18'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).then(</span><br><span class="line">  (text)=&gt;&#123;<span class="built_in">console</span>.log(text)&#125;,</span><br><span class="line">  (request)=&gt;&#123;<span class="built_in">console</span>.log(request)  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<p><img src="https://i.loli.net/2020/03/04/xEoJRYHGesrd43p.png" alt="promise.png"><br><img src="https://i.loli.net/2020/03/04/2opqCrs3EmPdJ7i.png" alt="promise02.png"></p>
<h2 id="六、Promise的实现形式"><a href="#六、Promise的实现形式" class="headerlink" title="六、Promise的实现形式"></a>六、Promise的实现形式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.Promise = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//省略中间代码</span></span><br><span class="line">  <span class="keyword">return</span>&#123;</span><br><span class="line">    then:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前面代码格式化上面形式如下</span></span><br><span class="line">myButton.addEventListener(<span class="string">'click'</span>, (e) =&gt;&#123;</span><br><span class="line">  <span class="keyword">let</span> promise = <span class="built_in">window</span>.jQuery.ajax(&#123;</span><br><span class="line">    <span class="comment">//url:'tony', 这是失败</span></span><br><span class="line">    url:<span class="string">'/xxx'</span>, <span class="comment">//这是成功</span></span><br><span class="line">    method:<span class="string">'get'</span>,</span><br><span class="line">    headers:&#123;</span><br><span class="line">      <span class="string">'content-type'</span>:<span class="string">'application/x-www-form-urlencoded'</span>,</span><br><span class="line">      <span class="string">'tony'</span>:<span class="string">'18'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">   promise.then(</span><br><span class="line">  (text)=&gt;&#123;<span class="built_in">console</span>.log(text)&#125;,</span><br><span class="line">  (request)=&gt;&#123;<span class="built_in">console</span>.log(request)  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h2><p> 背诵<code>return new Promise(function(resolve,reject){}</code>这是Promise的格式，固定套路</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS知识归纳</title>
    <url>/2020/04/03/CSS%E7%9F%A5%E8%AF%86%E5%BD%92%E7%BA%B3/</url>
    <content><![CDATA[<h2 id="一、文档流"><a href="#一、文档流" class="headerlink" title="一、文档流"></a>一、文档流</h2><h3 id="1-1-文档流定义"><a href="#1-1-文档流定义" class="headerlink" title="1.1 文档流定义"></a>1.1 文档流定义</h3><p>文档内元素的流动方向</p>
<h3 id="1-2-文档流解释"><a href="#1-2-文档流解释" class="headerlink" title="1.2 文档流解释"></a>1.2 文档流解释</h3><ul>
<li>内联元素：从左向右流动，如果流动遇到阻碍，它是换行继续流动</li>
<li>块级元素：从上向下流动，每个块级元素独占一行。</li>
</ul>
<h3 id="1-3-文档流注意事项"><a href="#1-3-文档流注意事项" class="headerlink" title="1.3 文档流注意事项"></a>1.3 文档流注意事项</h3><ul>
<li>如果一个<code>&lt;span&gt;</code>元素被截断，<code>&lt;span&gt;</code>元素会分成上下两部分，如果是长单词被截断，那么它会另起一行。</li>
<li>解决这个问题可以用CSS中的<code>word-bread</code>属性。</li>
<li><code>word-bread：bread-all</code>全部打断，中文网站推荐使用</li>
<li><code>word-bread：bread-word</code>只有在单词分割地方打断，默认值</li>
<li><code>word-bread：keep-all</code>全部不要打断</li>
<li>span 不接受设置宽高，要设置的话加display：inline-block；</li>
<li>span里面一般不放div，因为容易出bug</li>
</ul>
<h3 id="1-4-div-横向排列方法"><a href="#1-4-div-横向排列方法" class="headerlink" title="1.4 div 横向排列方法"></a>1.4 div 横向排列方法</h3><ul>
<li>float 浮动</li>
<li>display:inline-block 不推荐使用</li>
</ul>
<a id="more"></a>

<h2 id="二、高度"><a href="#二、高度" class="headerlink" title="二、高度"></a>二、高度</h2><h3 id="2-1-div高度"><a href="#2-1-div高度" class="headerlink" title="2.1 div高度"></a>2.1 div高度</h3><p>div高度有其内部文档流元素的高度总和决定</p>
<h3 id="2-2-span高度"><a href="#2-2-span高度" class="headerlink" title="2.2 span高度"></a>2.2 span高度</h3><p>span高度与字体设计大小有关，可以手动用line-height设置，line-height是可以确定内联高度的。</p>
<h3 id="2-3-高度注意事项"><a href="#2-3-高度注意事项" class="headerlink" title="2.3 高度注意事项"></a>2.3 高度注意事项</h3><ul>
<li>一般情况下，能不使用height属性，就不要设置height属性</li>
<li>因为高度定死，会出现许多bug</li>
<li>可以是用 内容+line-height+padding 来下确定整体高度</li>
</ul>
<h2 id="三、position"><a href="#三、position" class="headerlink" title="三、position"></a>三、position</h2><h3 id="3-1-position-fixed"><a href="#3-1-position-fixed" class="headerlink" title="3.1 position:fixed"></a>3.1 position:fixed</h3><p>相对于屏幕</p>
<h3 id="3-2-position：absolute-绝对定位"><a href="#3-2-position：absolute-绝对定位" class="headerlink" title="3.2 position：absolute 绝对定位"></a>3.2 position：absolute 绝对定位</h3><ul>
<li>在子元素上写<code>position:absolute</code></li>
<li>在父元素上写<code>position:relative</code></li>
</ul>
<h2 id="四、如何用CSS做个三角形"><a href="#四、如何用CSS做个三角形" class="headerlink" title="四、如何用CSS做个三角形"></a>四、如何用CSS做个三角形</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.triangle</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">10px</span> solid transparent;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">border-left-color</span>:red;</span><br><span class="line">  //border-top-width:0px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="五、图标居中问题"><a href="#五、图标居中问题" class="headerlink" title="五、图标居中问题"></a>五、图标居中问题</h2><p>添加<code>rertical-align:top</code>可以解决图标上下居中问题</p>
]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Cookie与登录注册</title>
    <url>/2020/04/03/Cookie%E4%B8%8E%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C/</url>
    <content><![CDATA[<h2 id="一、啥是Cookie"><a href="#一、啥是Cookie" class="headerlink" title="一、啥是Cookie"></a>一、啥是Cookie</h2><p>Cookie，又称为“小甜饼”。类型为“小型文本文件”，指某些网站为了辨别用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。由网景公司的前雇员卢·蒙特利在1993年3月发明。</p>
<p>每个 Cookie 的大小一般不能超过4KB。浏览器每次向服务器发出请求，就会自动附上这段信息。</p>
<h2 id="二、-Cookie-的特点"><a href="#二、-Cookie-的特点" class="headerlink" title="二、 Cookie 的特点"></a>二、 Cookie 的特点</h2><ol>
<li>服务器通过 Set-Cookie 响应头设置 Cookie</li>
<li>浏览器得到 Cookie 之后，每次请求都要带上 Cookie</li>
<li>服务器读取 Cookie 就知道登录用户的信息（email）</li>
</ol>
<a id="more"></a>

<h2 id="三、什么时候要设置Cookie"><a href="#三、什么时候要设置Cookie" class="headerlink" title="三、什么时候要设置Cookie"></a>三、什么时候要设置Cookie</h2><p>在登录成功的一瞬间，我们需要设置一个Cookie，如果找这个用户的相关数据，就记录该用户的数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Set-Cookie:&lt;cookie-name&gt;=&lt;cookie-value&gt;</span></span><br><span class="line">response.setHeader(<span class="string">'Set-Cookie'</span>,<span class="string">`sign_in_email=<span class="subst">$&#123;email&#125;</span>`</span>)</span><br></pre></td></tr></table></figure>

<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Set-Cookie" target="_blank" rel="noopener">Set-Cookie </a></p>
<h2 id="四、问题"><a href="#四、问题" class="headerlink" title="四、问题"></a>四、问题</h2><h3 id="4-1-我在-Chrome-登录了得到-Cookie，用-Safari-访问，Safari-会带上-Cookie-吗？"><a href="#4-1-我在-Chrome-登录了得到-Cookie，用-Safari-访问，Safari-会带上-Cookie-吗？" class="headerlink" title="4.1 我在 Chrome 登录了得到 Cookie，用 Safari 访问，Safari 会带上 Cookie 吗？"></a>4.1 我在 Chrome 登录了得到 Cookie，用 Safari 访问，Safari 会带上 Cookie 吗？</h3><p>no</p>
<h3 id="4-2-Cookie-存在哪"><a href="#4-2-Cookie-存在哪" class="headerlink" title="4.2 Cookie 存在哪"></a>4.2 Cookie 存在哪</h3><p>Windows 存在 C 盘的一个文件里</p>
<h3 id="4-3-Cookie会被用户篡改吗？"><a href="#4-3-Cookie会被用户篡改吗？" class="headerlink" title="4.3 Cookie会被用户篡改吗？"></a>4.3 Cookie会被用户篡改吗？</h3><p>可以，可以用Session 来解决这个问题，防止用户篡改</p>
<h3 id="4-4-Cookie-有效期吗？"><a href="#4-4-Cookie-有效期吗？" class="headerlink" title="4.4 Cookie 有效期吗？"></a>4.4 Cookie 有效期吗？</h3><ul>
<li><p>默认有效期20分钟左右，不同浏览器策略不同</p>
</li>
<li><p>端可以强制设置有效期，具体语法看 MDN</p>
</li>
<li><h3 id="4-5-Cookie-遵守同源策略吗？"><a href="#4-5-Cookie-遵守同源策略吗？" class="headerlink" title="4.5 Cookie 遵守同源策略吗？"></a>4.5 Cookie 遵守同源策略吗？</h3><p>也有，不过跟 AJAX 的同源策略稍微有些不同。</p>
</li>
<li><p>当请求 qq.com 下的资源时，浏览器会默认带上 qq.com 对应的 Cookie，不会带上 baidu.com 对应的 Cookie</p>
</li>
<li><p>当请求 v.qq.com 下的资源时，浏览器不仅会带上 v.qq.com 的Cookie，还会带上 qq.com 的 Cookie</p>
</li>
</ul>
<p>另外 Cookie 还可以根据路径做限制，这个功能用得比较少。</p>
<h3 id="五、其他资料"><a href="#五、其他资料" class="headerlink" title="五、其他资料"></a>五、其他资料</h3><ul>
<li><a href="https://zh.wikipedia.org/wiki/Cookie" target="_blank" rel="noopener">Cookie维基百科</a></li>
</ul>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 里的数据类型转换</title>
    <url>/2020/04/03/JS%20%E9%87%8C%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h2 id="任意类型转字符串"><a href="#任意类型转字符串" class="headerlink" title="任意类型转字符串"></a>任意类型转字符串</h2><h3 id="方法一-String-x"><a href="#方法一-String-x" class="headerlink" title="方法一 String(x)"></a>方法一 <code>String(x)</code></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span>(<span class="number">1</span>)</span><br><span class="line"><span class="string">"1"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="string">"true"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">null</span>)</span><br><span class="line"><span class="string">"null"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">undefined</span>)</span><br><span class="line"><span class="string">"undefined"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span>(&#123;&#125;)</span><br><span class="line"><span class="string">"[object Object]"</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="方法二-x-toString"><a href="#方法二-x-toString" class="headerlink" title="方法二 x.toString()"></a>方法二 <code>x.toString()</code></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>).toString()</span><br><span class="line"><span class="string">"1"</span></span><br><span class="line"></span><br><span class="line">(<span class="literal">true</span>).toString()</span><br><span class="line"><span class="string">"true"</span></span><br><span class="line"></span><br><span class="line"><span class="literal">null</span>.toString()</span><br><span class="line">Uncaught <span class="built_in">TypeError</span>: Cannot read property <span class="string">'toString'</span> <span class="keyword">of</span> <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="literal">undefined</span>.toString()</span><br><span class="line">VM1129:<span class="number">1</span> Uncaught <span class="built_in">TypeError</span>: Cannot read property <span class="string">'toString'</span> <span class="keyword">of</span> <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">&#123;&#125;.toString()</span><br><span class="line">Uncaught <span class="built_in">SyntaxError</span>: Unexpected token <span class="string">'.'</span></span><br><span class="line"></span><br><span class="line">(&#123;&#125;).toString()</span><br><span class="line"><span class="string">"[object Object]"</span></span><br></pre></td></tr></table></figure>

<h3 id="方法三-x-39-39-便捷用法"><a href="#方法三-x-39-39-便捷用法" class="headerlink" title="方法三 x + &#39;&#39; 便捷用法"></a>方法三 <code>x + &#39;&#39;</code> 便捷用法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="string">''</span></span><br><span class="line"><span class="string">"1"</span></span><br><span class="line"></span><br><span class="line"><span class="literal">true</span> + <span class="string">''</span></span><br><span class="line"><span class="string">"true"</span></span><br><span class="line"></span><br><span class="line"><span class="literal">null</span> + <span class="string">''</span></span><br><span class="line"><span class="string">"null"</span></span><br><span class="line"></span><br><span class="line"><span class="literal">undefined</span> + <span class="string">''</span></span><br><span class="line"><span class="string">"undefined"</span></span><br><span class="line"></span><br><span class="line">&#123;&#125; + <span class="string">''</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o  = &#123;&#125; </span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">o + <span class="string">''</span></span><br><span class="line"><span class="string">"[object Object]"</span></span><br></pre></td></tr></table></figure>

<h2 id="任意类型转布尔"><a href="#任意类型转布尔" class="headerlink" title="任意类型转布尔"></a>任意类型转布尔</h2><h3 id="方法一-Boolean-x"><a href="#方法一-Boolean-x" class="headerlink" title="方法一 Boolean(x)"></a>方法一 <code>Boolean(x)</code></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Boolean</span>(<span class="built_in">String</span>)</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">null</span>)</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="string">''</span>)</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="number">0</span>)</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">undefined</span>)</span><br><span class="line"><span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Boolean</span>(&#123;&#125;)</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="方法二-x-便捷用法"><a href="#方法二-x-便捷用法" class="headerlink" title="方法二 !!x 便捷用法"></a>方法二 <code>!!x</code> 便捷用法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">!!<span class="built_in">String</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"></span><br><span class="line">!!<span class="literal">null</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"></span><br><span class="line">!!<span class="string">''</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"></span><br><span class="line">!!<span class="number">0</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"></span><br><span class="line">!!<span class="literal">undefined</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"></span><br><span class="line">!!&#123;&#125;</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="五个falsy值（要背诵）"><a href="#五个falsy值（要背诵）" class="headerlink" title="五个falsy值（要背诵）"></a>五个falsy值（要背诵）</h3><ol>
<li><code>0</code></li>
<li><code>NaN</code></li>
<li><code>null</code></li>
<li><code>undefined</code></li>
<li><code>&#39;&#39;</code></li>
</ol>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>只要对象都是true</p>
<h2 id="任意类型转数字"><a href="#任意类型转数字" class="headerlink" title="任意类型转数字"></a>任意类型转数字</h2><h3 id="方法一-Number-x"><a href="#方法一-Number-x" class="headerlink" title="方法一 Number(x)"></a>方法一 <code>Number(x)</code></h3><p><code>Number(&#39;1&#39;) //返回 1</code></p>
<h3 id="方法二-parseInt-x-10"><a href="#方法二-parseInt-x-10" class="headerlink" title="方法二 parseInt(x 10)"></a>方法二 <code>parseInt(x 10)</code></h3><p>parseInt(string, radix)   将一个字符串 string 转换为 radix 进制的整数， radix 为介于2-36之间的数。</p>
<p><code>parseInt(&#39;1&#39;,10) //返回 1</code></p>
<h3 id="方法三-parseFloat-x"><a href="#方法三-parseFloat-x" class="headerlink" title="方法三 parseFloat(x)"></a>方法三 <code>parseFloat(x)</code></h3><p>parseFloat() 函数解析一个参数（必要时先转换为字符串）并返回一个浮点数。给定值被解析成浮点数。如果给定值不能被转换成数值，则会返回 NaN。</p>
<p><code>parseFloat(&#39;1.23&#39;) //返回1.23</code></p>
<h3 id="方法四-x-0-便捷用法"><a href="#方法四-x-0-便捷用法" class="headerlink" title="方法四 x - 0 便捷用法"></a>方法四 <code>x - 0</code> 便捷用法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">'1'</span>- <span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="string">'123'</span>- <span class="number">0</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="string">'1.23'</span>- <span class="number">0</span></span><br><span class="line"><span class="number">1.23</span></span><br></pre></td></tr></table></figure>

<h3 id="方法五-x"><a href="#方法五-x" class="headerlink" title="方法五 + x"></a>方法五 <code>+ x</code></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">+ <span class="string">'1'</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line">+ <span class="string">'1.23'</span></span><br><span class="line"><span class="number">1.23</span></span><br><span class="line"></span><br><span class="line">+ <span class="string">'.1'</span></span><br><span class="line"><span class="number">3.1</span></span><br><span class="line"></span><br><span class="line">+ <span class="string">'-1'</span></span><br><span class="line"><span class="number">-1</span></span><br><span class="line"></span><br><span class="line">-(<span class="string">'-1'</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"></span><br><span class="line">-(-<span class="string">'-1'</span>)</span><br><span class="line"><span class="number">-1</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS的数据类型</title>
    <url>/2020/04/03/JS%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="一、七种数据类型"><a href="#一、七种数据类型" class="headerlink" title="一、七种数据类型"></a>一、七种数据类型</h2><ol>
<li>number</li>
<li>string</li>
<li>boolean</li>
<li>symbol</li>
<li>undefined</li>
<li>null</li>
<li>object</li>
</ol>
<p>注意：没有array类型，也没有function类型，它们属于object</p>
<h2 id="二、number"><a href="#二、number" class="headerlink" title="二、number"></a>二、number</h2><ul>
<li>整数和小数：<code>1</code> 、<code>1.1</code>、<code>.1</code></li>
<li>科学记数法：<code>1.23e2</code> == 123</li>
<li>二进制：<code>0b11</code></li>
<li>八进制：<code>011</code>(后来ES5添加了 0o11 语法)</li>
<li>十六进制：<code>0x11</code></li>
</ul>
<a id="more"></a>

<h2 id="三、String"><a href="#三、String" class="headerlink" title="三、String"></a>三、String</h2><h3 id="3-1-空字符串：-39-39"><a href="#3-1-空字符串：-39-39" class="headerlink" title="3.1 空字符串：&#39;&#39;"></a>3.1 空字符串：<code>&#39;&#39;</code></h3><ul>
<li>空字符串与空格字符串是两个概念。空字符串<code>&#39;&#39;</code>,length等于0，空格字符串<code>&#39; &#39;</code>,length等于1</li>
</ul>
<h3 id="3-2-多行字符串"><a href="#3-2-多行字符串" class="headerlink" title="3.2 多行字符串"></a>3.2 多行字符串</h3><h4 id="写法一"><a href="#写法一" class="headerlink" title="写法一"></a>写法一</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'123456'</span>+</span><br><span class="line"><span class="string">'67890'</span> <span class="comment">// 无回车符号</span></span><br></pre></td></tr></table></figure>

<h4 id="写法二"><a href="#写法二" class="headerlink" title="写法二"></a>写法二</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s  = <span class="string">`12345</span></span><br><span class="line"><span class="string">67890`</span> <span class="comment">//包含回车符号</span></span><br></pre></td></tr></table></figure>

<h4 id="写法三"><a href="#写法三" class="headerlink" title="写法三"></a>写法三</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'123456 \</span></span><br><span class="line"><span class="string">67890'</span>    <span class="comment">//坑人语法。不推荐写</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3-特殊转义符"><a href="#3-3-特殊转义符" class="headerlink" title="3.3 特殊转义符"></a>3.3 特殊转义符</h3><ul>
<li><code>\0</code>：null</li>
<li><code>\b</code> ：后退键</li>
<li><code>\f</code> ：换页符</li>
<li><code>\n</code>：换行符</li>
<li><code>\r</code> ：回车键</li>
<li><code>\t</code>：制表符</li>
<li><code>\v</code> ：垂直制表符</li>
<li><code>\&#39;</code> ：单引号</li>
<li><code>\&quot;</code> ：双引号</li>
<li><code>\\</code> ：反斜杠</li>
</ul>
<h2 id="四、boolean"><a href="#四、boolean" class="headerlink" title="四、boolean"></a>四、boolean</h2><p>两个值:true（真） 与 false(假)</p>
<h3 id="4-1-a-amp-amp-与-b"><a href="#4-1-a-amp-amp-与-b" class="headerlink" title="4.1 a &amp;&amp;(与) b"></a>4.1 a &amp;&amp;(与) b</h3><p>在a和b都为true时，取值为true，否则为false；</p>
<h3 id="4-2-a-或-b"><a href="#4-2-a-或-b" class="headerlink" title="4.2 a ||(或)b"></a>4.2 a ||(或)b</h3><p>在a和b都是false时，取值为false，否则为true</p>
<h2 id="五、undefined-与-null"><a href="#五、undefined-与-null" class="headerlink" title="五、undefined 与 null"></a>五、undefined 与 null</h2><p>它们都表示没有值</p>
<ol>
<li>(规范)如果一个变量没有被赋值，那么这个变量的值就是<code>undefined</code></li>
<li>(习俗)如果想表示一个还没有赋值的对象，就用<code>null</code>。如果想表示还没有赋值的字符串、数字、布尔、symbol就用<code>undefined</code>。</li>
</ol>
<h2 id="六、symbol"><a href="#六、symbol" class="headerlink" title="六、symbol"></a>六、symbol</h2><p>ES6 引入了一种新的原始数据类型Symbol，表示独一无二的值。</p>
<h2 id="七、object"><a href="#七、object" class="headerlink" title="七、object"></a>七、object</h2><p>object是复杂类型，就是上面几种数据类型（无序地）组合在一起</p>
<ul>
<li>object的key一律是字符串，不存在其他类型的key</li>
<li><code>object[&#39;&#39;]</code>是合法</li>
<li><code>object[&#39;key&#39;]</code>可以写作<code>object.key</code></li>
<li>注意<code>object.key</code>与<code>object[key]</code>不同<h3 id="7-1-delete"><a href="#7-1-delete" class="headerlink" title="7.1 delete"></a>7.1 delete</h3>delete命令用于删除对象的属性，删除成功后返回true</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">p</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.keys(obj) <span class="comment">// ["p"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> obj.p <span class="comment">// true</span></span><br><span class="line">obj.p <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">Object</span>.keys(obj) <span class="comment">// []</span></span><br></pre></td></tr></table></figure>
<h3 id="7-2-in"><a href="#7-2-in" class="headerlink" title="7.2 in"></a>7.2 in</h3><p>in运算符用于检查对象是否包含某个属性（注意，检查的是键名，不是键值），如果包含就返回true，否则返回false。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">p</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="string">'p'</span> <span class="keyword">in</span> obj <span class="comment">// true</span></span><br><span class="line"><span class="string">'toString'</span> <span class="keyword">in</span> obj <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="7-3-for…in-循环"><a href="#7-3-for…in-循环" class="headerlink" title="7.3 for…in 循环"></a>7.3 for…in 循环</h3><p>for…in循环用来遍历一个对象的全部属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'键名：'</span>, i);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'键值：'</span>, obj[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 键名： a</span></span><br><span class="line"><span class="comment">// 键值： 1</span></span><br><span class="line"><span class="comment">// 键名： b</span></span><br><span class="line"><span class="comment">// 键值： 2</span></span><br><span class="line"><span class="comment">// 键名： c</span></span><br><span class="line"><span class="comment">// 键值： 3</span></span><br></pre></td></tr></table></figure>


<p>for…in循环有两个使用注意点。</p>
<ul>
<li>它遍历的是对象所有可遍历（enumerable）的属性，会跳过不可遍历的属性。</li>
<li>它不仅遍历对象自身的属性，还遍历继承的属性。</li>
</ul>
<h2 id="八、-typeof操作符"><a href="#八、-typeof操作符" class="headerlink" title="八、 typeof操作符"></a>八、 typeof操作符</h2><ol>
<li>null typeof返回的是object</li>
<li>function typeof返回的是function</li>
<li>注意function并不是一个类型</li>
</ol>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript Array对象类型</title>
    <url>/2020/04/03/JavaScript%20Array%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="什么是标准库"><a href="#什么是标准库" class="headerlink" title="什么是标准库"></a>什么是标准库</h2><ol>
<li>在JS内存里面有Stack、Heap。</li>
<li>而在Stack有一个重要的变量（global/window）</li>
<li>而（global/window），用hash表示，分为标准库与非标准库</li>
<li>标准库里面有可以分为String()、Number()、Array()、Boolean()、Object()</li>
</ol>
<h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><p>Array对象是用于构造数组的全局对象；它是高阶、类似于列表的对象</p>
<h2 id="什么是Array"><a href="#什么是Array" class="headerlink" title="什么是Array"></a>什么是Array</h2><p>数组是按次序排列的一组值</p>
<a id="more"></a>

<h2 id="什么是伪数组"><a href="#什么是伪数组" class="headerlink" title="什么是伪数组"></a>什么是伪数组</h2><ol>
<li>有0，1，2，3，4，5，n，length这些key的对象</li>
<li>原型链没有Array.prototype</li>
</ol>
<p>目前已知的伪数组有</p>
<ol>
<li>argument 对象</li>
<li>document.querySelectAll(‘div’) 返回的对象</li>
</ol>
<h2 id="数组的API"><a href="#数组的API" class="headerlink" title="数组的API"></a>数组的API</h2><p>Array.prototype.forEach</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript中常用的DOMAPI</title>
    <url>/2020/04/03/JavaScript%20%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84DOM%20API/</url>
    <content><![CDATA[<p>本文章是归纳复习本人在学习JavaScript中运用过得DOM api，将不定时的更新补充，完善。</p>
<p>DOM 是 JavaScript 操作网页的接口，全称为“文档对象模型”（Document Object Model）。它的作用是将网页转为一个 JavaScript 对象，从而可以用脚本进行各种操作（比如增删内容）。</p>
<h2 id="一、Element类型"><a href="#一、Element类型" class="headerlink" title="一、Element类型"></a>一、Element类型</h2><h3 id="Element-attributes"><a href="#Element-attributes" class="headerlink" title="Element.attributes"></a>Element.attributes</h3><p>返回一个与该元素相关的所有属性集合</p>
<h3 id="Element-classList"><a href="#Element-classList" class="headerlink" title="Element.classList"></a>Element.classList</h3><p>返回该元素包含的 class 属性,通常用来添加/移除对应的CSS样式</p>
<h3 id="Element-className"><a href="#Element-className" class="headerlink" title="Element.className"></a>Element.className</h3><p>className属性用来读写当前元素节点的class属性</p>
<h3 id="Element-innerHTML"><a href="#Element-innerHTML" class="headerlink" title="Element.innerHTML"></a>Element.innerHTML</h3><p>返回一个字符串，等同于该元素包含的所有 HTML 代码,常用来设置某个节点的内容。它能改写所有元素节点的内容</p>
<a id="more"></a>

<h3 id="Element-getAttribute"><a href="#Element-getAttribute" class="headerlink" title="Element.getAttribute()"></a>Element.getAttribute()</h3><p>Element.getAttribute()方法接受一个字符串作为参数，返回同名属性的值。如果没有该属性，则返回null。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var mydiv &#x3D; document.getElementById(&#39;mydiv&#39;);</span><br><span class="line">var id &#x3D; mydiv.getAttribute(&#39;id&#39;);</span><br><span class="line">上面代码读取mydiv的id的值。</span><br></pre></td></tr></table></figure>




<h2 id="二、document类型"><a href="#二、document类型" class="headerlink" title="二、document类型"></a>二、document类型</h2><h3 id="document-querySelector"><a href="#document-querySelector" class="headerlink" title="document.querySelector"></a>document.querySelector</h3><p>接受一个 CSS 选择器作为参数，返回匹配该选择器的元素节点。</p>
<h3 id="document-querySelectorAll"><a href="#document-querySelectorAll" class="headerlink" title="document.querySelectorAll"></a>document.querySelectorAll</h3><p>document.querySelectorAll() 是 HTML5中引入的新方法，返回文档中匹配的CSS选择器的所有元素节点列表</p>
<h3 id="document-getElementById"><a href="#document-getElementById" class="headerlink" title="document.getElementById"></a>document.getElementById</h3><p>getElementById()返回一个匹配特定 ID的元素</p>
<h3 id="document-getElementsByClassName"><a href="#document-getElementsByClassName" class="headerlink" title="document.getElementsByClassName"></a>document.getElementsByClassName</h3><p>方法返回一个类似数组的对象，</p>
<h3 id="document-getElementsByTagName"><a href="#document-getElementsByTagName" class="headerlink" title="document.getElementsByTagName"></a>document.getElementsByTagName</h3><p>getElementsByClassName() 方法返回文档中所有指定类名的元素集合，作为 NodeList 对象。</p>
<h3 id="document-createElement"><a href="#document-createElement" class="headerlink" title="document.createElement()"></a>document.createElement()</h3><p>创建元素节点。</p>
<h2 id="三、Node类型"><a href="#三、Node类型" class="headerlink" title="三、Node类型"></a>三、Node类型</h2><h3 id="Node-appenChild"><a href="#Node-appenChild" class="headerlink" title="Node.appenChild()"></a>Node.appenChild()</h3><p>方法将一个节点添加到指定父节点的子节点列表末尾。</p>
<h3 id="Node-childNodes"><a href="#Node-childNodes" class="headerlink" title="Node.childNodes"></a>Node.childNodes</h3><p>返回一个包含了该节点所有子节点的实时的NodeList。</p>
<h3 id="Node-nextSibling"><a href="#Node-nextSibling" class="headerlink" title="Node.nextSibling"></a>Node.nextSibling</h3><p>返回与该节点同级的下一个节点 Node，如果没有返回null。</p>
<h3 id="Node-nodeType"><a href="#Node-nodeType" class="headerlink" title="Node.nodeType"></a>Node.nodeType</h3><p>只读属性 Node.nodeType 表示的是该节点的类型。nodeType 属性可用来区分不同类型的节点，比如 元素, 文本 和 注释。</p>
<ul>
<li>Node.ELEMENT_NODE        节点是一个元素节点，nodeType 属性返回 1</li>
<li>Node.TEXT_NODE        节点是一个文本节点，nodeType 属性返回 3</li>
<li>Node.COMMENT_NODE        节点是一个注释节点，nodeType 属性返回 8</li>
<li>Node.DOCUMENT_NODE        一个 Document 节点。 9</li>
</ul>
<p><a href="https://www.runoob.com/jsref/prop-node-nodetype.html" target="_blank" rel="noopener">查看nodeType 属性其它返回节点类型</a></p>
<h3 id="Node-textContent"><a href="#Node-textContent" class="headerlink" title="Node.textContent"></a>Node.textContent</h3><p>textContent属性返回当前节点和它的所有后代节点的文本内容。</p>
<h3 id="Node-parentNode"><a href="#Node-parentNode" class="headerlink" title="Node.parentNode"></a>Node.parentNode</h3><p>返回某节点的父节点</p>
<h2 id="四、DOM事件-鼠标事件"><a href="#四、DOM事件-鼠标事件" class="headerlink" title="四、DOM事件-鼠标事件"></a>四、DOM事件-鼠标事件</h2><h3 id="onclick"><a href="#onclick" class="headerlink" title="onclick"></a>onclick</h3><p>当用户点击某个对象时调用的事件句柄。</p>
<h3 id="onmousedown"><a href="#onmousedown" class="headerlink" title="onmousedown"></a>onmousedown</h3><p>鼠标按钮被按下。</p>
<h3 id="onmouseenter"><a href="#onmouseenter" class="headerlink" title="onmouseenter"></a>onmouseenter</h3><p>当鼠标指针移动到元素上时触发。</p>
<h3 id="onmouseleave"><a href="#onmouseleave" class="headerlink" title="onmouseleave"></a>onmouseleave</h3><p>当鼠标指针移出元素时触发</p>
<h3 id="onmouseup"><a href="#onmouseup" class="headerlink" title="onmouseup"></a>onmouseup</h3><p>鼠标按键被松开。</p>
<h2 id="五、DOM事件-键盘事件"><a href="#五、DOM事件-键盘事件" class="headerlink" title="五、DOM事件-键盘事件"></a>五、DOM事件-键盘事件</h2><h3 id="onkeydown"><a href="#onkeydown" class="headerlink" title="onkeydown"></a>onkeydown</h3><p>某个键盘按键被按下。    </p>
<h3 id="onkeypress"><a href="#onkeypress" class="headerlink" title="onkeypress"></a>onkeypress</h3><p>某个键盘按键被按下并松开。</p>
<h3 id="onkeyup"><a href="#onkeyup" class="headerlink" title="onkeyup"></a>onkeyup</h3><p>某个键盘按键被松开。</p>
<h2 id="六、Console-对象"><a href="#六、Console-对象" class="headerlink" title="六、Console 对象"></a>六、Console 对象</h2><h3 id="console-log"><a href="#console-log" class="headerlink" title="console.log()"></a>console.log()</h3><p>控制台输出一条信息</p>
<h3 id="console-time"><a href="#console-time" class="headerlink" title="console.time()"></a>console.time()</h3><p>计时器，开始计时间，与 timeEnd() 联合使用，用于算出一个操作所花费的准确时间。</p>
<h3 id="console-timeEnd"><a href="#console-timeEnd" class="headerlink" title="console.timeEnd()"></a>console.timeEnd()</h3><p>计时结束</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux入门之常用命令用法解析</title>
    <url>/2020/04/03/Linux%E5%85%A5%E9%97%A8%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E7%94%A8%E6%B3%95%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><p>意思：查看路径（list-罗列）<br>用法：<br>  ls [参数][文件名]</p>
<p>  -a：显示所有文件与目录<br>  -l：除文件名称外，亦将文件型态、权限、拥有者、文件大小等资讯详细列出</p>
<p>例子：</p>
<ul>
<li><code>ls -a 路径</code></li>
<li><code>ls -l 路径</code></li>
<li><code>ls -al 路径</code></li>
</ul>
<a id="more"></a>

<h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p>意思：显示或把多个文本文件连接起来–可以预览文件<br>用法：<br>  cat [参数][文件名]<br>例子：<br>  cat 文件</p>
<h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><p>意思：移动文件（move-移动）<br>用法：<br>  mv [源文件][目标文件]<br>例子：<br>  mv 文件名 文件名 — 将源文件改名为目标文件名<br>  mv 文件名 目录名 — 将文件移动到目标目录</p>
<h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h3><p>意思：用于修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件。<br>用法：<br>  touch [参数][文件]</p>
<p>  -a 改变档案的读取时间记录。<br>  -version 列出版本讯息。</p>
<p>例子：<br>  touch 1.txt </p>
<h3 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h3><p>意思：查看目录结构<br>用法：tree [参数][文件]<br>例子：<br>  tree 文件名</p>
<h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><p>意思：删除文件（remove）<br>用法：rm [参数][文件]<br>  -f 强制删除<br>  -r 递归删除<br>例子：</p>
<ul>
<li>删除文件  <code>rm 文件路径</code></li>
<li>强制删除文件  <code>rm -f 文件路径</code></li>
<li>删除目录  <code>rm -r 目录路径</code></li>
<li>强制删除目录  <code>rm -rf 目录路径</code></li>
</ul>
<h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3><p>意思：显示当前目录<br>用法：pwd<br>例子：pwd</p>
<h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><p>意思：创建目录<br>用法：mkdir [参数][目录名]<br>例子：</p>
<ul>
<li>创建目录  <code>mdir 目录名</code></li>
<li>创建目录  <code>mkdir -p 目录路径</code></li>
</ul>
<h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><p>意思：进入目录    (change directory)<br>用法：cd [目录名]<br>例子：<br>  cd 目录名</p>
<h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><p>意思：在显示器上显示一段文字，一般起到一个提示的作用。<br>用法：echo [ -n ] 字符串<br>例子：</p>
<ul>
<li>创建文件    <code>echo &#39;1&#39; &gt; 文件路径</code></li>
<li>强制创建文件    <code>echo &#39;1&#39; &gt;! 文件路径</code></li>
<li>追加文件内容    <code>echo &#39;1&#39; &gt;&gt; 文件路径</code></li>
</ul>
<h3 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h3><p>意思：建立软链接<br>用法：ln [参数] [真实文件][链接]<br>例子：<br>  ln -s 真实文件 链接</p>
<h3 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h3><p>意思：下载文件<br>用法：curl [参数] [网站] [存储目录]<br>例子：<br>  curl -L <a href="https://www.baidu.com" target="_blank" rel="noopener">https://www.baidu.com</a> &gt; baidu.html</p>
<h3 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h3><p>意思：wget是linux上的命令行的下载工具<br>用法：wget [参数列表] URL<br>例子：<br>  拷贝网页<code>wget -p -H -e robots=off https://www.baidu.com (Windows 不支持 wget)</code></p>
<h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>意思：用来在指定目录下查找文件<br>用法：find [起始目录] 寻找条件 操作<br>例子：ind /-name yum.conf</p>
<h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><ul>
<li>磁盘占用 <code>df -kh</code></li>
<li>当前目录大小    <code>du -sh .</code></li>
<li>各文件大小    <code>du -h</code></li>
</ul>
<h2 id="explainshell-com"><a href="#explainshell-com" class="headerlink" title="explainshell.com"></a>explainshell.com</h2><p>这是一个解析Linux命令的网站，只要将要解析的命令输入进去，便可得到相关具体解析。推荐给大伙用用。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.runoob.com/linux/linux-command-manual.html" target="_blank" rel="noopener">Linux 命令大全</a></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【HTTP】HTTP请求与响应,curl命令知识</title>
    <url>/2020/04/03/%E3%80%90HTTP%E3%80%91HTTP%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94%EF%BC%8Ccurl%E5%91%BD%E4%BB%A4%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h2 id="一、HTTP请求"><a href="#一、HTTP请求" class="headerlink" title="一、HTTP请求"></a>一、HTTP请求</h2><h3 id="1、HTTP请求格式"><a href="#1、HTTP请求格式" class="headerlink" title="1、HTTP请求格式"></a>1、HTTP请求格式</h3><p>1 动词路径协议/版本<br>2 Key1: value1<br>2 Key2: value2<br>2 Key3: value3<br>2 Content-Type: application/x-www-form-urlencoded<br>2 Host: <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a><br>2 User-Agent: curl/7.54.0<br>3<br>4 要上传的数据</p>
<p>请求最多包含四部分，最少包含三部分。（也就是说第四部分可以为空）<br>第三部分永远都是一个回车（\n）<br>动词有 <em>GET POST PUT PATCH DELETE HEAD OPTIONS</em> 等<br>这里的路径包括「查询参数」，但不包括「锚点」<br>如果你没有写路径，那么路径默认为 /<br>第 2 部分中的 Content-Type 标注了第 4 部分的格式</p>
<a id="more"></a>

<h3 id="2、HTTP请求组成格式"><a href="#2、HTTP请求组成格式" class="headerlink" title="2、HTTP请求组成格式"></a>2、HTTP请求组成格式</h3><p>实践命令<code>curl -X POST -s -v -H &quot;hao123: xxx&quot; -- &quot;https://www.baidu.com&quot;</code><br>返回如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; POST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">&gt; Host: www.baidu.com</span><br><span class="line">&gt; User-Agent: curl&#x2F;7.54.0</span><br><span class="line">&gt; Accept: *&#x2F;*</span><br><span class="line">&gt; hao123: xxx</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3、在Chrome-发请求"><a href="#3、在Chrome-发请求" class="headerlink" title="3、在Chrome 发请求"></a>3、在Chrome 发请求</h3><ul>
<li>右键打开打开 Network</li>
<li>地址栏输入网址</li>
<li>在 Network 点击，查看 request，点击「view source」</li>
<li>就可以看到请求的前三部分了</li>
<li>在 FormData 或 Payload 里面可以看到请求的第四部分</li>
</ul>
<h2 id="二、HTTP响应"><a href="#二、HTTP响应" class="headerlink" title="二、HTTP响应"></a>二、HTTP响应</h2><h3 id="1、HTTP响应格式"><a href="#1、HTTP响应格式" class="headerlink" title="1、HTTP响应格式"></a>1、HTTP响应格式</h3><p>1 协议/版本号状态码状态解释<br>2 Key1: value1<br>2 Key2: value2<br>2 Content-Length: 17931<br>2 Content-Type: text/html<br>3<br>4 要下载的内容</p>
<p>第 2 部分中的 Content-Type 标注了第 4 部分的格式<br>第 2 部分中的 Content-Type 遵循 MIME 规范</p>
<h3 id="2、状态码"><a href="#2、状态码" class="headerlink" title="2、状态码"></a>2、状态码</h3><ul>
<li>1xx 不常用</li>
<li>2xx 表示成功，如：200，203</li>
<li>3xx 表示跳转，如：301永久跳转，302临时跳转，304同上次给的一样</li>
<li>4xx 表示客户端错误，如：404</li>
<li>5xx 表示服务器错误，如：502</li>
</ul>
<h3 id="3、HTTP响应组成格式"><a href="#3、HTTP响应组成格式" class="headerlink" title="3、HTTP响应组成格式"></a>3、HTTP响应组成格式</h3><p>实践命令<code>curl -X POST -s -v -H &quot;hao123: xxx&quot; -- &quot;https://www.baidu.com&quot;</code><br>返回如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt; HTTP&#x2F;1.1 302 Found</span><br><span class="line">&lt; Connection: Keep-Alive</span><br><span class="line">&lt; Content-Length: 17931</span><br><span class="line">&lt; Content-Type: text&#x2F;html</span><br><span class="line">&lt; Date: Sun, 24 Nov 2019 07:25:14 GMT</span><br><span class="line">&lt; Etag: &quot;54d9748e-460b&quot;</span><br><span class="line">&lt; Server: bfe&#x2F;1.0.8.18</span><br><span class="line">&lt;</span><br><span class="line">&lt; 要下载的内容（太多，不展示）</span><br></pre></td></tr></table></figure>

<h3 id="4、在Chrome-查看响应"><a href="#4、在Chrome-查看响应" class="headerlink" title="4、在Chrome 查看响应"></a>4、在Chrome 查看响应</h3><ul>
<li>右键打开打开 Network</li>
<li>地址栏输入网址</li>
<li>在 Network 点击，选中第一个响应，查看 Response Headers，点击「view source」</li>
<li>就可以看到响应的前两部分</li>
<li>查看 Response 或者 Preview，就看到响应的第 4 部分</li>
</ul>
<h2 id="curl命令相关知识"><a href="#curl命令相关知识" class="headerlink" title="curl命令相关知识"></a>curl命令相关知识</h2><p>curl命令是一个利用URL规则在命令行下工作的文件传输工具。它支持文件的上传和下载，所以是综合传输工具，但按传统，习惯称curl为下载工具。</p>
<p>例子：<code>curl -X POST -s -v -H &quot;hao123: xxx&quot; -- &quot;https://www.baidu.com&quot;</code><br>-H:–header 添加 HTTP 请求的标头。如：”hao123: xxx”<br>-s:–silent 指定只输出错误信息，通常与-s一起使用<br>-v:–verbose 输出通信的整个过程，用于调试。<br>-X：指定 HTTP 请求的方法。如：POST </p>
<p>详细教程请看<a href="https://www.ruanyifeng.com/blog/2019/09/curl-reference.html" target="_blank" rel="noopener">阮一峰的curl 的用法指南</a></p>
]]></content>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>【JavaScript】JavaScript操作请求与响应</title>
    <url>/2020/04/03/%E3%80%90JavaScript%E3%80%91JavaScript%E6%93%8D%E4%BD%9C%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94/</url>
    <content><![CDATA[<h2 id="一、请求的组成部分"><a href="#一、请求的组成部分" class="headerlink" title="一、请求的组成部分"></a>一、请求的组成部分</h2><ul>
<li>第一部分 GET /xxx HTTP/1.1</li>
<li>第二部分 HOST:examlp.com:8002</li>
<li>第二部分 Content-Type:appliction/x-www-url-encoded</li>
<li>第三部分 </li>
<li>第四部分 要下载的内容<h2 id="二、JavaScript操作请求"><a href="#二、JavaScript操作请求" class="headerlink" title="二、JavaScript操作请求"></a>二、JavaScript操作请求</h2><h3 id="2-1-请求的第一部分-用XMLHttpRequest-open-设置"><a href="#2-1-请求的第一部分-用XMLHttpRequest-open-设置" class="headerlink" title="2.1 请求的第一部分 用XMLHttpRequest.open()设置"></a>2.1 请求的第一部分 用XMLHttpRequest.open()设置</h3><blockquote>
<p>XMLHttpRequest.open() 方法初始化一个请求。该方法要从JavaScript代码使用；从原生代码初始化一个请求，使用openRequest()替代。</p>
</blockquote>
</li>
</ul>
<p>例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">request.open(<span class="string">'get'</span>,<span class="string">'http:examlp.com:8002/xxx'</span>)</span><br></pre></td></tr></table></figure>

<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/open" target="_blank" rel="noopener">XMLHttpRequest.open()</a></p>
<a id="more"></a>

<h3 id="2-2-请求的第二部分-用XMLHttpRequest-setRequestHeader-设置"><a href="#2-2-请求的第二部分-用XMLHttpRequest-setRequestHeader-设置" class="headerlink" title="2.2 请求的第二部分 用XMLHttpRequest.setRequestHeader()设置"></a>2.2 请求的第二部分 用XMLHttpRequest.setRequestHeader()设置</h3><h4 id="JS可以设置任意的请求header吗？"><a href="#JS可以设置任意的请求header吗？" class="headerlink" title="JS可以设置任意的请求header吗？"></a>JS可以设置任意的请求header吗？</h4><blockquote>
<p>mdn :XMLHttpRequest.setRequestHeader() 是设置HTTP请求头部的方法。此方法必须在  open() 方法和 send()   之间调用。如果多次对同一个请求头赋值，只会生成一个合并了多个值的请求头。</p>
</blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/setRequestHeader" target="_blank" rel="noopener">XMLHttpRequest.setRequestHeader()</a></p>
<p>在server.js设置setRequestHeader，然后运行js打开chrome就看到自己设置的请求头，如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">request.open(<span class="string">'get'</span>,<span class="string">'/xxx'</span>) </span><br><span class="line">request.setRequestHeader(<span class="string">'frank'</span>,<span class="string">'18'</span>)</span><br><span class="line">request.send()</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/03/02/JNxeyfQVrzOAwFM.png" alt="setrequestheader01.png"></p>
<h3 id="2-3-请求的第三部分-回车-不需要设置"><a href="#2-3-请求的第三部分-回车-不需要设置" class="headerlink" title="2.3 请求的第三部分 回车 不需要设置"></a>2.3 请求的第三部分 回车 不需要设置</h3><h3 id="2-4-请求的第四部分-用XMLHttpRequest-send-设置"><a href="#2-4-请求的第四部分-用XMLHttpRequest-send-设置" class="headerlink" title="2.4 请求的第四部分 用XMLHttpRequest.send()设置"></a>2.4 请求的第四部分 用XMLHttpRequest.send()设置</h3><p>js set  request body</p>
<blockquote>
<p>mdn: XMLHttpRequest.send() 方法用于发送 HTTP 请求。如果是异步请求（默认为异步请求），则此方法会在请求发送后立即返回；如果是同步请求，则此方法直到响应到达后才会返回。XMLHttpRequest.send() 方法接受一个可选的参数，其作为请求主体；如果请求方法是 GET 或者 HEAD，则应将请求主体设置为 null。</p>
</blockquote>
<blockquote>
<p> XMLHttpRequest.send(body)</p>
</blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/send" target="_blank" rel="noopener">XMLHttpRequest.send()</a></p>
<p>例子如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">request.open(<span class="string">'get'</span>,<span class="string">'/xxx'</span>) </span><br><span class="line">request.setRequestHeader(<span class="string">'frank'</span>,<span class="string">'18'</span>)</span><br><span class="line">request.send(<span class="string">'我偏要设置request第四部分'</span>)</span><br></pre></td></tr></table></figure>

<p>在Chrome没有展示，是因为Chrome认为get请求理论上是没有Request.body,但是这个只是一个约定俗成而已，没有明令禁止，如果要看到请求的第四部分，不要用get请求</p>
<p>例子如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">request.open(<span class="string">'POST'</span>,<span class="string">'/xxx'</span>) </span><br><span class="line">request.setRequestHeader(<span class="string">'frank'</span>,<span class="string">'18'</span>)</span><br><span class="line">request.send(<span class="string">'我偏要设置request第四部分'</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/03/02/jEflIY7crzdyN1h.jpg" alt="setrequestbody01.jpeg"></p>
<p>Request payload就是请求体的意思</p>
<h4 id="2-4-1-不允许设置USer-Agent"><a href="#2-4-1-不允许设置USer-Agent" class="headerlink" title="2.4.1 不允许设置USer-Agent"></a>2.4.1 不允许设置USer-Agent</h4><p>因为浏览器安全问题，不给与设置<br>consloe报错代码 <code>Refused to set unsafe header &quot;User-Agent&quot;</code></p>
<h4 id="2-4-2-设置Content-Type"><a href="#2-4-2-设置Content-Type" class="headerlink" title="2.4.2 设置Content-Type"></a>2.4.2 设置Content-Type</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">request.open(<span class="string">'POST'</span>,<span class="string">'/xxx'</span>) </span><br><span class="line">request.setRequestHeader(<span class="string">'frank'</span>,<span class="string">'18'</span>)</span><br><span class="line">request.setRequestHeader(<span class="string">'Content-Type'</span>,<span class="string">'x-www-form-urlencoded'</span>)</span><br><span class="line">request.send(<span class="string">'我偏要设置request第四部分'</span>)</span><br></pre></td></tr></table></figure>


<p> <img src="https://i.loli.net/2020/03/02/rJiGWvuhjg1faxX.png" alt="setcontentType01.png"></p>
<h2 id="三、-响应的组成部分"><a href="#三、-响应的组成部分" class="headerlink" title="三、 响应的组成部分"></a>三、 响应的组成部分</h2><ul>
<li>第一部分 协议/版本号状态码状态解释</li>
<li>第二部分 Key1: value1</li>
<li>第二部分 Key2: value2</li>
<li>第二部分 Content-Length: 17931</li>
<li>第二部分 Content-Type: text/html</li>
<li>第三部分</li>
<li>第四部分 要下载的内容</li>
</ul>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> HTTP&#x2F;1.1 200 OK</span><br><span class="line"> Content-Type:text&#x2F;html</span><br><span class="line"> </span><br><span class="line">&lt;!DOCTYPE html&gt;&lt;html&gt;.....&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>


<h2 id="四、-获取响应的方法"><a href="#四、-获取响应的方法" class="headerlink" title="四、 获取响应的方法"></a>四、 获取响应的方法</h2><p> js get response header</p>
<blockquote>
<p>XMLHttpRequest.getAllResponseHeaders() 方法返回所有的响应头，以 CRLF 分割的字符串，或者 null 如果没有收到任何响应。 注意： 对于复合请求 （ multipart requests ），这个方法返回当前请求的头部，而不是最初的请求的头部。</p>
</blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/getAllResponseHeaders" target="_blank" rel="noopener"><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/getAllResponseHeaders" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/getAllResponseHeaders</a></a></p>
<p>例子如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &lt; <span class="number">300</span>)&#123;</span><br><span class="line">consloe.log(request.getAllResponseHeaders())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2020/03/02/82hoXQ1dqUHAmYG.png" alt="response01.png"></p>
<h3 id="4-1-响应的第一部分-可以用XMLHttpRequest-statusText来获取"><a href="#4-1-响应的第一部分-可以用XMLHttpRequest-statusText来获取" class="headerlink" title="4.1 响应的第一部分 可以用XMLHttpRequest.statusText来获取"></a>4.1 响应的第一部分 可以用XMLHttpRequest.statusText来获取</h3><p> js get response message</p>
<blockquote>
<p>只读属性 XMLHttpRequest.statusText 返回了XMLHttpRequest 请求中由服务器返回的一个DOMString 类型的文本信息，这则信息中也包含了响应的数字状态码。不同于使用一个数字来指示的状态码XMLHTTPRequest.status，这个属性包含了返回状态对应的文本信息，例如”OK”或是”Not Found”。如果请求的状态readyState的值为”UNSENT”或者”OPENED”，则这个属性的值将会是一个空字符串。</p>
</blockquote>
<p> 如果服务器未明确指定一个状态文本信息，则statusText的值将会被自动赋值为”OK”。<br>例子</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/statusText" target="_blank" rel="noopener">XMLHttpRequest.statusText</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(request.readState === <span class="number">4</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(request.status)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> chrome浏览器consloe打印出<br> ok</p>
<h3 id="4-2-响应头的第二部分-可以用-XMLHttpRequest-getResponseHeader-获取"><a href="#4-2-响应头的第二部分-可以用-XMLHttpRequest-getResponseHeader-获取" class="headerlink" title="4.2 响应头的第二部分 可以用 XMLHttpRequest.getResponseHeader() 获取"></a>4.2 响应头的第二部分 可以用 XMLHttpRequest.getResponseHeader() 获取</h3><h4 id="4-2-1-获取响应头的Content-Type"><a href="#4-2-1-获取响应头的Content-Type" class="headerlink" title="4.2.1 获取响应头的Content-Type"></a>4.2.1 获取响应头的Content-Type</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &lt; <span class="number">300</span>)&#123;</span><br><span class="line">  consloe.log(request.getResponseHeaders(<span class="string">'Content-Type'</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><img src="https://i.loli.net/2020/03/02/ONIV8lsEDXTfrwH.png" alt="response-content-type-01.png"></p>
<h3 id="4-3-响应头的第三部分-是空格-不用获取"><a href="#4-3-响应头的第三部分-是空格-不用获取" class="headerlink" title="4.3 响应头的第三部分 是空格 不用获取"></a>4.3 响应头的第三部分 是空格 不用获取</h3><h2 id="4-4-响应头的第四部分-用XMLHttpRequest-responseText获取"><a href="#4-4-响应头的第四部分-用XMLHttpRequest-responseText获取" class="headerlink" title="4.4 响应头的第四部分 用XMLHttpRequest.responseText获取"></a>4.4 响应头的第四部分 用XMLHttpRequest.responseText获取</h2><p> XMLHttpRequest.responseText 在一个请求被发送后，从服务器端返回文本。</p>
<p>例子：<br> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &lt; <span class="number">300</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(request.responseText)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="五、代码如下"><a href="#五、代码如下" class="headerlink" title="五、代码如下"></a>五、代码如下</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">myButton.addEventListener(<span class="string">'click'</span>,(e)=&gt;&#123;</span><br><span class="line"><span class="keyword">let</span> request = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  request.open(<span class="string">'get'</span>,<span class="string">'http:examlp.com:8002/xxx'</span>) <span class="comment">//配置request</span></span><br><span class="line">  request.send()</span><br><span class="line">  request.onreadstatechange = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(request.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'请求响应都完毕了'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(request.status)</span><br><span class="line">    <span class="keyword">if</span>(request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &lt; <span class="number">300</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'说明请求成功'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> request.responseText)</span><br><span class="line">    <span class="built_in">console</span>.log(request.responseText)</span><br><span class="line">    <span class="keyword">let</span> string = request.responseText</span><br><span class="line">    <span class="comment">//把符号JSON语法的字符串转换成JS对应的值</span></span><br><span class="line">    <span class="keyword">let</span> object = <span class="built_in">window</span>.JSON.pares(string)</span><br><span class="line">    <span class="comment">//JSON.parse 是浏览器提高的</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> object)</span><br><span class="line">    <span class="built_in">console</span>.log(object)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'object.note'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(object.note)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.status &gt;= <span class="number">400</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'说明请求失败'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><p>通过AJXA，除了部分因为安全原因不给用设置完，我们可以任意设置请求与响应的四部分的所有数据。</p>
<p>这就是AJAX的厉害之处</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>【JavaScript】MVC知识概括</title>
    <url>/2020/04/03/%E3%80%90JavaScript%E3%80%91MVC%E7%9F%A5%E8%AF%86%E6%A6%82%E6%8B%AC/</url>
    <content><![CDATA[<p>CRM-使用别人的东西</p>
<ul>
<li>Copy 抄代码</li>
<li>Run  运行代码</li>
<li>Modify  修改代码</li>
</ul>
<h2 id="一、MAC的前提：模块化"><a href="#一、MAC的前提：模块化" class="headerlink" title="一、MAC的前提：模块化"></a>一、MAC的前提：模块化</h2><h3 id="1-1-什么是MVC"><a href="#1-1-什么是MVC" class="headerlink" title="1.1 什么是MVC"></a>1.1 什么是MVC</h3><ul>
<li>M:Model 模式</li>
<li>v:View  视图</li>
<li>C:Controller 控制器</li>
</ul>
<h3 id="1-2-问题：怎么解决代码一写就忘记？"><a href="#1-2-问题：怎么解决代码一写就忘记？" class="headerlink" title="1.2 问题：怎么解决代码一写就忘记？"></a>1.2 问题：怎么解决代码一写就忘记？</h3><ul>
<li>模块化编程：一块代码，只操作一种功能<ul>
<li>例如：将混乱的一个js文件，按功能分为不同的js文件</li>
</ul>
</li>
<li>MVC的前提就是代码要有模块化</li>
</ul>
<h2 id="二、立即执行函数的使用"><a href="#二、立即执行函数的使用" class="headerlink" title="二、立即执行函数的使用"></a>二、立即执行函数的使用</h2><ul>
<li>判断代码乱不乱—代码多就乱、代码少就不乱</li>
<li>怎么减少代码又兼顾功能——引入MVC思想</li>
</ul>
<a id="more"></a>

<h3 id="2-1-问题：一个变量用var声明会自动变成全局变量，如何解决这个问题？"><a href="#2-1-问题：一个变量用var声明会自动变成全局变量，如何解决这个问题？" class="headerlink" title="2.1 问题：一个变量用var声明会自动变成全局变量，如何解决这个问题？"></a>2.1 问题：一个变量用var声明会自动变成全局变量，如何解决这个问题？</h3><ul>
<li>全局变量可以互相影响</li>
<li>解决方法：不要使用全局变量，使用局部变量</li>
</ul>
<h4 id="2-1-在ES5，使用局部变量方法"><a href="#2-1-在ES5，使用局部变量方法" class="headerlink" title="2.1 在ES5，使用局部变量方法"></a>2.1 在ES5，使用局部变量方法</h4><p> 只要函数里面才有局部变量，于是声明一个<code>function xxx</code>，然后<code>xxx.call()</code>，这个时候<code>xxx</code>是全局变量（全局函数），所以不能给这个函数名字，所以<code>function().call()</code>,但是chrome会报错，语法错误</p>
<h5 id="2-1-1-两个方法不报错-加个！和加个-包裹函数"><a href="#2-1-1-两个方法不报错-加个！和加个-包裹函数" class="headerlink" title="2.1.1 两个方法不报错  加个！和加个()包裹函数"></a>2.1.1 两个方法不报错  加个<code>！</code>和加个<code>()</code>包裹函数</h5><ul>
<li><code>！function().call()</code></li>
<li>虽然<code>！</code>会改变匿名函数的返回值，但是这里我们不关心函数的返回值，所以没关系</li>
<li><code>(function().call())</code></li>
<li>但是有个bug 函数前面加个数字就会 被迫调用  不推荐使用</li>
</ul>
<h4 id="2-2-es5使用局部变量方法"><a href="#2-2-es5使用局部变量方法" class="headerlink" title="2.2 es5使用局部变量方法"></a>2.2 es5使用局部变量方法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//错误如下</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//单用一个&#123;&#125;是不能使用到局部变量，因为var会变量提升</span></span><br><span class="line">    <span class="comment">//var会变量提升到当前函数或者是全局作用域最顶端上</span></span><br><span class="line">    <span class="comment">//虽然java和C++可以，但是JavaScript就是不能</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"> <span class="comment">//成功如下 方法一 </span></span><br><span class="line"> ！<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//用一个函数函数包裹，然后call调用</span></span><br><span class="line"> &#125;.call()</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//成功如下 方法二 </span></span><br><span class="line"> (<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123; </span><br><span class="line">  <span class="comment">//用一个函数函数包裹，然后call调用 ,有bug不推荐使用</span></span><br><span class="line"> &#125;.call())</span><br></pre></td></tr></table></figure>



<h2 id="三、闭包的使用"><a href="#三、闭包的使用" class="headerlink" title="三、闭包的使用"></a>三、闭包的使用</h2><h3 id="3-1-前置问题：如果采用了上面的局部变量方法，若是确实要两个模块要交互的话，怎么解决？"><a href="#3-1-前置问题：如果采用了上面的局部变量方法，若是确实要两个模块要交互的话，怎么解决？" class="headerlink" title="3.1 前置问题：如果采用了上面的局部变量方法，若是确实要两个模块要交互的话，怎么解决？"></a>3.1 前置问题：如果采用了上面的局部变量方法，若是确实要两个模块要交互的话，怎么解决？</h3><h3 id="3-2-一个例子"><a href="#3-2-一个例子" class="headerlink" title="3.2 一个例子"></a>3.2 一个例子</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> accessor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//变量</span></span><br><span class="line">    <span class="keyword">var</span> person =  &#123;</span><br><span class="line">        name: <span class="string">'tony'</span>,</span><br><span class="line">        age: <span class="number">17</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="comment">//匿名函数，用了外面的变量,这person和这个匿名函数就是闭包</span></span><br><span class="line">        person.age += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> person.age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//这是一个返回了匿名函数的函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> growUp = accessor.call()</span><br><span class="line"></span><br><span class="line">growUp()</span><br></pre></td></tr></table></figure>


<h3 id="3-3-闭包是什么"><a href="#3-3-闭包是什么" class="headerlink" title="3.3 闭包是什么"></a>3.3 闭包是什么</h3><p>  一个函数，访问了外面的变量,这变量和这个函数就是闭包。</p>
<p>  闭包有与立即执行函数一起使用，没有立即执行函数就没有闭包。</p>
<h3 id="3-4-闭包的作用"><a href="#3-4-闭包的作用" class="headerlink" title="3.4 闭包的作用"></a>3.4 闭包的作用</h3><ol>
<li>闭包用来对数据进行隐藏细节</li>
<li>进行访问控制</li>
</ol>
<h3 id="3-5-问题：如果没有立即执行函数，上面例子会出现什么？"><a href="#3-5-问题：如果没有立即执行函数，上面例子会出现什么？" class="headerlink" title="3.5 问题：如果没有立即执行函数，上面例子会出现什么？"></a>3.5 问题：如果没有立即执行函数，上面例子会出现什么？</h3><p>  立即执行函数是隔离作用域的，如果没有立即执行函数，这个闭包毫无意义。因为var的person变量就是全局变量，没有必要封装它。<br>量</p>
<ul>
<li>立即执行函数使得person无法被外部访问</li>
<li>闭包使得匿名函数可以操作person</li>
<li>window.tonyGrowUp 保存了匿名函数的肚子鼓</li>
<li>任何地方都可以使用window.tonyGrowUp</li>
</ul>
<p>上面四点可以推论出:</p>
<ul>
<li>任何地方都可以使用window.tonyGrowUp操作person，但是不能直接访问person</li>
</ul>
<h2 id="四、MVC的V和C"><a href="#四、MVC的V和C" class="headerlink" title="四、MVC的V和C"></a>四、MVC的V和C</h2><h3 id="4-1-view的作用"><a href="#4-1-view的作用" class="headerlink" title="4.1 view的作用"></a>4.1 view的作用</h3><p>view作用是告诉js，页面中的哪些代码块是我这个模块对应的东西</p>
<h3 id="4-2-Controller"><a href="#4-2-Controller" class="headerlink" title="4.2 Controller"></a>4.2 Controller</h3><p>Controller作用是控制视图(view)</p>
<p>一个Controller事件只操作一个事件。</p>
<h3 id="4-3-MVC的作用"><a href="#4-3-MVC的作用" class="headerlink" title="4.3 MVC的作用"></a>4.3 MVC的作用</h3><p>以前每有一个情况写一个东西，导致结构都不相同，而现在有了MVC之后，结构一致。都有一个view、controller。</p>
<p>controller去操作view</p>
<p>所有的代码都一样</p>
<h3 id="4-4-this"><a href="#4-4-this" class="headerlink" title="4.4 this"></a>4.4 this</h3><p>this只有转变成call，才能确定</p>
<p>箭头函数没有this</p>
<p>箭头函数内外，this不变</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//chrome console控制操作</span></span><br><span class="line"><span class="keyword">this</span> <span class="comment">//返回window对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">//返回undefined</span></span><br><span class="line"></span><br><span class="line">f.call(&#123;<span class="attr">name</span>:<span class="string">'tony'</span>&#125;) <span class="comment">//返回还是window对象</span></span><br><span class="line"><span class="comment">//箭头函数不存在this</span></span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/03/05/5AKV8zYHuSM9PIv.png" alt="mvc-this01.png"></p>
<h2 id="五、MVC的Model"><a href="#五、MVC的Model" class="headerlink" title="五、MVC的Model"></a>五、MVC的Model</h2><p>v 只负责看见的东西<br>c 负责将二者组合<br>m 跟数据相关的操作（请求，存数据）</p>
<h2 id="六、MVC总结"><a href="#六、MVC总结" class="headerlink" title="六、MVC总结"></a>六、MVC总结</h2><p>MVC就是把代码分成三块</p>
<ul>
<li>第一块 V(view)告诉程序，你的代码长什么样子，或者你的代码在页面的哪一块</li>
<li>第二块 M(Model)你的数据有哪些操作，操作(初始化，获取，保存)</li>
<li>第三 C(Controll)负责其他所有的事情，Controll比较复杂点</li>
<li>这就是MVC</li>
</ul>
<p>总的来说，V就是视图，M是数据，所有相关数据的操作都应该放在model里面，Controll是控制器，它来控制其他所有的代码。</p>
<p>MVC是一种代码组织形式。它不是任何一种框架，也不是任何一种技术。<br>它就是一种组织代码的思想。</p>
<p><img src="https://i.loli.net/2020/03/10/sk4p5SmLcMiRahP.png" alt="mvc01-min.png"></p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>【JavaScript】自己封装AJXA</title>
    <url>/2020/04/03/%E3%80%90JavaScript%E3%80%91%E8%87%AA%E5%B7%B1%E5%B0%81%E8%A3%85AJXA%20/</url>
    <content><![CDATA[<p>ajax能获取响应头，node.js能设置响应头</p>
<h2 id="一、前置-TCP知识"><a href="#一、前置-TCP知识" class="headerlink" title="一、前置-TCP知识"></a>一、前置-TCP知识</h2><ul>
<li>HTML/CSS/JavaScript/JSON是基于HTTP传输</li>
<li>HTTP是基于TCP/IP协议传输</li>
<li>一次请求不是一下子全部给客户端的，要经过“三次握手”，“三次握手”要确定客户服务双方都能请求（request）与响应（response）</li>
<li>先获取响应头，在获取响应头</li>
<li>浏览器是一开始就判断响应的状态（200，404wait），然后下载完全部响应内容。</li>
</ul>
<h2 id="二、自己封装jQuery-ajax"><a href="#二、自己封装jQuery-ajax" class="headerlink" title="二、自己封装jQuery.ajax"></a>二、自己封装jQuery.ajax</h2><h3 id="2-1-window-jQuery-ajax的结构"><a href="#2-1-window-jQuery-ajax的结构" class="headerlink" title="2.1 window.jQuery.ajax的结构"></a>2.1 window.jQuery.ajax的结构</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQuery.ajax = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line"><span class="comment">//代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="2-2-ajax功能"><a href="#2-2-ajax功能" class="headerlink" title="2.2 ajax功能"></a>2.2 ajax功能</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">request.open()</span><br><span class="line">request.setRequestHeader()</span><br><span class="line">request.send()</span><br><span class="line">reuqest.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ajax功能是将xmlHttprequest的上面四行代码变成一行代码</span></span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">###  2.3 封装window.jQuery </span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> javascript</span><br><span class="line"><span class="built_in">window</span>.jQuery = <span class="function"><span class="keyword">function</span>(<span class="params">nodeOrSelector</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> nondes = &#123;&#125;</span><br><span class="line">  nodes.addClass = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  nodes.html = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> nodes</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">###  2.4 封装window.jQuery.ajax </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> javascript</span><br><span class="line"><span class="built_in">window</span>.jQuery.ajax = <span class="function"><span class="keyword">function</span>(<span class="params">url,method,body,successFn,failFn</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> request = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  request.open(method,url)</span><br><span class="line">  request.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(request.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &gt; <span class="number">300</span> )&#123;</span><br><span class="line">      successFn.call(<span class="literal">undefined</span>,request.responseText)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.status &gt;= <span class="number">400</span> )&#123;</span><br><span class="line">      failFn.call(<span class="literal">undefined</span>，request)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  request.send(body)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.$ = <span class="built_in">window</span>.jQuery</span><br></pre></td></tr></table></figure>

<h3 id="2-5-运用window-jQuery-ajax函数"><a href="#2-5-运用window-jQuery-ajax函数" class="headerlink" title="2.5 运用window.jQuery.ajax函数"></a>2.5 运用window.jQuery.ajax函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">myButtons.addEventListener(<span class="string">'click'</span>,(e)=&gt;&#123;</span><br><span class="line">  <span class="built_in">window</span>.jQuery.ajax(</span><br><span class="line">  <span class="string">'/xxx'</span>,  <span class="comment">//路径</span></span><br><span class="line">  <span class="string">'post'</span>,  <span class="comment">//方法体</span></span><br><span class="line">  <span class="string">'a=1&amp;b=2'</span>,  <span class="comment">//请求体</span></span><br><span class="line">  (responseText)=&gt;&#123;<span class="built_in">console</span>.log(<span class="number">1</span>)&#125;, <span class="comment">//成功函数</span></span><br><span class="line">  (response)=&gt;&#123;<span class="built_in">console</span>.log(<span class="number">2</span>)&#125;  <span class="comment">//失败函数</span></span><br><span class="line">  )&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="2-6-window-jQuery-ajax函数优化-给参数命名"><a href="#2-6-window-jQuery-ajax函数优化-给参数命名" class="headerlink" title="2.6 window.jQuery.ajax函数优化-给参数命名"></a>2.6 window.jQuery.ajax函数优化-给参数命名</h3><p>上面函数容易不确定其中参数的意思，所以解决这个问题，有个技巧，传一个有结构的参数，即对象，例子如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">myButtons.addEventListener(<span class="string">'click'</span>,(e)=&gt;&#123;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;</span><br><span class="line">    url:<span class="string">'/xxx'</span>,</span><br><span class="line">    method:<span class="string">'get'</span>,</span><br><span class="line">    successFn:()=&#123;&#125;,</span><br><span class="line">    fail:()=&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">window</span>.jQuery.ajax(obj)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为采用了对象，所以window.jQuery.ajax也要修改，修改如下</span></span><br><span class="line"><span class="built_in">window</span>.jQuery.ajxa = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> url = options.url</span><br><span class="line">  <span class="keyword">let</span> method = options.method</span><br><span class="line">  <span class="keyword">let</span> body = options.body</span><br><span class="line">  <span class="keyword">let</span> successFn = options.successFn</span><br><span class="line">  <span class="keyword">let</span> fail = options.failFn</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> request = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  request.open(method,url)</span><br><span class="line">  request.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(request.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &gt; <span class="number">300</span> )&#123;</span><br><span class="line">      successFn.call(<span class="literal">undefined</span>,request.responseText)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.status &gt;= <span class="number">400</span> )&#123;</span><br><span class="line">      failFn.call(<span class="literal">undefined</span>，request)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  request.send(body)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-7-window-jQuery-ajax函数优化-不要中间的obj"><a href="#2-7-window-jQuery-ajax函数优化-不要中间的obj" class="headerlink" title="2.7 window.jQuery.ajax函数优化-不要中间的obj"></a>2.7 window.jQuery.ajax函数优化-不要中间的obj</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">myButtons.addEventListener(<span class="string">'click'</span>,(e)=&gt;&#123;</span><br><span class="line"><span class="built_in">window</span>.jQuery.ajax(&#123;</span><br><span class="line">    url:<span class="string">'/xxx'</span>,</span><br><span class="line">    method:<span class="string">'get'</span>,</span><br><span class="line">    successFn:()=&#123;&#125;,</span><br><span class="line">    fail:()=&#123;&#125;</span><br><span class="line">  &#125;) </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h2 id="三、什么是回调（callback）"><a href="#三、什么是回调（callback）" class="headerlink" title="三、什么是回调（callback）"></a>三、什么是回调（callback）</h2><p>例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下面代码称为使用方代码</span></span><br><span class="line">myButtons.addEventListener(<span class="string">'click'</span>,(e)=&gt;&#123;</span><br><span class="line"><span class="built_in">window</span>.jQuery.ajax(&#123;</span><br><span class="line">    url:<span class="string">'/xxx'</span>,</span><br><span class="line">    method:<span class="string">'get'</span>,</span><br><span class="line">    successFn:(x)=&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(x)<span class="comment">//请问x代表是什么？</span></span><br><span class="line">      <span class="comment">//x代表的是request.responseText   </span></span><br><span class="line">    &#125;,</span><br><span class="line">    fail:()=&#123;&#125;</span><br><span class="line">  &#125;) </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>回调：向反方向call，自己主动调叫call，要其他函数调叫callback，call就是一个函数，上面的<code>(x)={console.log(x)}</code>就是一个回调函数</p>
</li>
<li><p>技巧 callback === function</p>
</li>
</ul>
<h3 id="3-1-如果请求失败，有没有可能存在响应第四部分（response-body）"><a href="#3-1-如果请求失败，有没有可能存在响应第四部分（response-body）" class="headerlink" title="3.1 如果请求失败，有没有可能存在响应第四部分（response.body）?"></a>3.1 如果请求失败，有没有可能存在响应第四部分（response.body）?</h3><p>有，第四部分与状态码无关，与第二部分有关</p>
<p>例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//服务器</span></span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    response.statusCode = <span class="number">404</span></span><br><span class="line">    response.setHeader(<span class="string">'content-Type'</span>,<span class="string">'text/html;charset=utf-8'</span>)</span><br><span class="line">    response.write(<span class="string">`</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        "error":"not found "</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    `</span>) <span class="comment">//书写错误提示</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端</span></span><br><span class="line">fail:<span class="function">(<span class="params">x</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x)</span><br><span class="line">  <span class="built_in">console</span>.log(x.status)</span><br><span class="line">  <span class="built_in">console</span>.log(x.responseText) <span class="comment">//打印响应文本</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>chrome控制台结果如下</p>
<p> <img src="https://i.loli.net/2020/03/03/8pHLCMbGqKahzV6.png" alt="xresponsetext01.png"></p>
<h3 id="3-2-需求一：请求成功之后，执行两个f1与f2函数怎么办-请问怎么传参？"><a href="#3-2-需求一：请求成功之后，执行两个f1与f2函数怎么办-请问怎么传参？" class="headerlink" title="3.2 需求一：请求成功之后，执行两个f1与f2函数怎么办,请问怎么传参？"></a>3.2 需求一：请求成功之后，执行两个f1与f2函数怎么办,请问怎么传参？</h3><p>问题与代码如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">responseText</span>)</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">responseText</span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">myButtons.addEventListener(<span class="string">'click'</span>,(e)=&gt;&#123;</span><br><span class="line"><span class="built_in">window</span>.jQuery.ajax(&#123;</span><br><span class="line">    url:<span class="string">'/xxx'</span>,</span><br><span class="line">    method:<span class="string">'get'</span>,</span><br><span class="line">    successFn:(x)=&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(x)   </span><br><span class="line">    &#125;,</span><br><span class="line">    fail:<span class="function">(<span class="params">x</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(x)</span><br><span class="line">      <span class="built_in">console</span>.log(x.status)</span><br><span class="line">      <span class="built_in">console</span>.log(x.responseText) </span><br><span class="line">  &#125;</span><br><span class="line">  &#125;) </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//外面一个大函数，把函数作为参数传进去，一次调用</span></span><br><span class="line"><span class="comment">//答案如下</span></span><br><span class="line">myButtons.addEventListener(<span class="string">'click'</span>,(e)=&gt;&#123;</span><br><span class="line"><span class="built_in">window</span>.jQuery.ajax(&#123;</span><br><span class="line">    url:<span class="string">'/xxx'</span>,</span><br><span class="line">    method:<span class="string">'get'</span>,</span><br><span class="line">    successFn:(x)=&#123;</span><br><span class="line">      f1.call(<span class="literal">undefined</span>.x)</span><br><span class="line">      f2.call(<span class="literal">undefined</span>.x)</span><br><span class="line">    &#125;,</span><br><span class="line">    fail:<span class="function">(<span class="params">x</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(x)</span><br><span class="line">      <span class="built_in">console</span>.log(x.status)</span><br><span class="line">      <span class="built_in">console</span>.log(x.responseText) </span><br><span class="line">  &#125;&#125;</span><br><span class="line">  &#125;) </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h3 id="3-2-需求二：如果要设置headers，怎么操作？"><a href="#3-2-需求二：如果要设置headers，怎么操作？" class="headerlink" title="3.2 需求二：如果要设置headers，怎么操作？"></a>3.2 需求二：如果要设置headers，怎么操作？</h3><p>答：把要设置的header，添加到window.jQuery.ajax中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//答案如下</span></span><br><span class="line"><span class="comment">//首先在window.jQuery.ajxa中新增变量headers与关于header的for循环</span></span><br><span class="line"><span class="built_in">window</span>.jQuery.ajxa = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> headers = options.headers </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> headers)&#123;</span><br><span class="line">  <span class="keyword">let</span> value = headers[key]</span><br><span class="line">  request.setRequestsetHeader(key,value)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">myButtons.addEventListener(<span class="string">'click'</span>,(e)=&gt;&#123;</span><br><span class="line"><span class="built_in">window</span>.jQuery.ajax(&#123;</span><br><span class="line">    url:<span class="string">'/xxx'</span>,</span><br><span class="line">    method:<span class="string">'get'</span>,</span><br><span class="line">    headers:&#123;</span><br><span class="line">      <span class="string">'content-type'</span>:<span class="string">'application/x-www-form-urlencode'</span>,</span><br><span class="line">      <span class="string">'frank'</span>:<span class="string">'18'</span> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加到请求的window.jQuery.ajax中.分别调用headers就可以</span></span><br><span class="line">    successFn:(x)=&#123;</span><br><span class="line">      f1.call(<span class="literal">undefined</span>.x)</span><br><span class="line">      f2.call(<span class="literal">undefined</span>.x)</span><br><span class="line">    &#125;,</span><br><span class="line">    fail:<span class="function">(<span class="params">x</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(x)</span><br><span class="line">      <span class="built_in">console</span>.log(x.status)</span><br><span class="line">      <span class="built_in">console</span>.log(x.responseText) </span><br><span class="line">  &#125;&#125;</span><br><span class="line">  &#125;) </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>chrome控制台结果如下<br><img src="https://i.loli.net/2020/03/03/TJx9wcGZPtWQpCF.png" alt="setheaders01.png"></p>
<h2 id="四、jQuery文档中ajax与自己封装的ajax的区别"><a href="#四、jQuery文档中ajax与自己封装的ajax的区别" class="headerlink" title="四、jQuery文档中ajax与自己封装的ajax的区别"></a>四、jQuery文档中ajax与自己封装的ajax的区别</h2><p><a href="https://api.jquery.com/jQuery.ajax/" target="_blank" rel="noopener">jQuery.ajax()英文文档地址</a></p>
<p><a href="https://www.jquery123.com/jQuery.ajax/" target="_blank" rel="noopener">jQuery.ajax()中文文档地址</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//jquery 文档的ajax例子：发送id作为数据发送到服务器， 保存一些数据到服务器上， 并通一旦它的完成知用户。  如果请求失败，则提醒用户。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> menuId = $(<span class="string">"ul.nav"</span>).first().attr(<span class="string">"id"</span>);</span><br><span class="line"><span class="keyword">var</span> request = $.ajax(&#123;</span><br><span class="line">  url: <span class="string">"script.php"</span>,</span><br><span class="line">  type: <span class="string">"POST"</span>,<span class="comment">//type就是我们设置的methods</span></span><br><span class="line">  data: &#123;<span class="attr">id</span> : menuId&#125;,<span class="comment">//data就是我们设置的body</span></span><br><span class="line">  dataType: <span class="string">"html"</span> <span class="comment">//dataType就是我们设置的Content-type</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">request.done(<span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">  $(<span class="string">"#log"</span>).html( msg );</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">request.fail(<span class="function"><span class="keyword">function</span>(<span class="params">jqXHR, textStatus</span>) </span>&#123;</span><br><span class="line">  alert( <span class="string">"Request failed: "</span> + textStatus );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<h3 id="4-1-继续优化自己的window-jquery-ajax-像jquery一样接受两种形式的参数"><a href="#4-1-继续优化自己的window-jquery-ajax-像jquery一样接受两种形式的参数" class="headerlink" title="4.1 继续优化自己的window.jquery.ajax-像jquery一样接受两种形式的参数"></a>4.1 继续优化自己的window.jquery.ajax-像jquery一样接受两种形式的参数</h3><p><img src="https://i.loli.net/2020/03/03/baoPF2UB7vSKrpR.png" alt="jqueryajax03.png"></p>
<p>代码如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQuery.ajxa = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//下面代码意思是：接受两种形式的参数</span></span><br><span class="line">  <span class="keyword">let</span> url</span><br><span class="line">  <span class="keyword">if</span>(argument.length === <span class="number">1</span>)&#123;</span><br><span class="line">     url = options.url</span><br><span class="line">    </span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">arguments</span>.length === <span class="number">2</span> )&#123;</span><br><span class="line">     url = argunments[<span class="number">0</span>]</span><br><span class="line">     options = <span class="built_in">arguments</span>[<span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//上面代码意思是：接受两种形式的参数</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> method = options.method</span><br><span class="line">  <span class="keyword">let</span> body = options.body</span><br><span class="line">  <span class="keyword">let</span> successFn = options.successFn</span><br><span class="line">  <span class="keyword">let</span> fail = options.failFn</span><br><span class="line">  <span class="keyword">let</span> header = otions.headers</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> request = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  request.open(method,url)</span><br><span class="line">  request.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(request.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &gt; <span class="number">300</span> )&#123;</span><br><span class="line">      successFn.call(<span class="literal">undefined</span>,request.responseText)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.status &gt;= <span class="number">400</span> )&#123;</span><br><span class="line">      failFn.call(<span class="literal">undefined</span>，request)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  request.send(body)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="五、结构化编程"><a href="#五、结构化编程" class="headerlink" title="五、结构化编程"></a>五、结构化编程</h2><ol>
<li>顺序执行</li>
<li>if…else</li>
<li>while/for</li>
</ol>
<p>只要一个编程，有上面的三点就是完备的编程，其他是多余的。</p>
<p><a href="https://zh.wikipedia.org/wiki/%E7%BB%93%E6%9E%84%E5%8C%96%E7%BC%96%E7%A8%8B" target="_blank" rel="noopener">结构化编程</a></p>
<h3 id="维基百科解释"><a href="#维基百科解释" class="headerlink" title="维基百科解释"></a>维基百科解释</h3><p>结构化程序设计（英语：Structured programming），一种编程典范。它采用子程序、代码区块、for循环以及while循环等结构，来取代传统的 goto。希望借此来改善计算机程序的明晰性、质量以及开发时间，并且避免写出面条式代码。</p>
<h2 id="六、用ES6-解构赋值-优化window-jQuery-ajax"><a href="#六、用ES6-解构赋值-优化window-jQuery-ajax" class="headerlink" title="六、用ES6-解构赋值-优化window.jQuery.ajax"></a>六、用ES6-解构赋值-优化window.jQuery.ajax</h2><h3 id="6-1-第一次优化"><a href="#6-1-第一次优化" class="headerlink" title="6.1 第一次优化"></a>6.1 第一次优化</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQuery.ajxa = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">   <span class="comment">//ES5 </span></span><br><span class="line">  <span class="keyword">let</span> url = options.url</span><br><span class="line">  <span class="keyword">let</span> method = options.method</span><br><span class="line">  <span class="keyword">let</span> body = options.body</span><br><span class="line">  <span class="keyword">let</span> successFn = options.successFn</span><br><span class="line">  <span class="keyword">let</span> fail = options.failFn</span><br><span class="line">  <span class="keyword">let</span> headers = optionss.headers</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//ES6 解构赋值</span></span><br><span class="line">  <span class="keyword">let</span> &#123;url,method,body,successFn,failFn,headers&#125; = options <span class="comment">//等价于上面6行</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> request = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  request.open(method,url)</span><br><span class="line">  request.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(request.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &gt; <span class="number">300</span> )&#123;</span><br><span class="line">      successFn.call(<span class="literal">undefined</span>,request.responseText)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.status &gt;= <span class="number">400</span> )&#123;</span><br><span class="line">      failFn.call(<span class="literal">undefined</span>，request)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  request.send(body)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-2-解构赋值"><a href="#6-2-解构赋值" class="headerlink" title="6.2 解构赋值"></a>6.2 解构赋值</h3><p>解构赋值语法是一种 Javascript 表达式。通过解构赋值, 可以将属性/值从对象/数组中取出,赋值给其他变量。<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" target="_blank" rel="noopener">MDN-解构赋值</a></p>
<p>例子代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a, b, rest;</span><br><span class="line">[a, b] = [<span class="number">10</span>, <span class="number">20</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line">[a, b, ...rest] = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 20</span></span><br><span class="line"><span class="built_in">console</span>.log(rest); <span class="comment">// [30, 40, 50]</span></span><br><span class="line"></span><br><span class="line">(&#123; a, b &#125; = &#123; <span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: <span class="number">20</span> &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Stage 4（已完成）提案中的特性</span></span><br><span class="line">(&#123;a, b, ...rest&#125; = &#123;<span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: <span class="number">20</span>, <span class="attr">c</span>: <span class="number">30</span>, <span class="attr">d</span>: <span class="number">40</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 20</span></span><br><span class="line"><span class="built_in">console</span>.log(rest); <span class="comment">// &#123;c: 30, d: 40&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="6-2-1-问题-如何交换两个变量的值"><a href="#6-2-1-问题-如何交换两个变量的值" class="headerlink" title="6.2.1 问题 如何交换两个变量的值"></a>6.2.1 问题 如何交换两个变量的值</h4><h5 id="用es5方法"><a href="#用es5方法" class="headerlink" title="用es5方法"></a>用es5方法</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'a'</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">'b'</span></span><br><span class="line">temp = a </span><br><span class="line">a = b</span><br><span class="line">b = temp</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">//b</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">//a</span></span><br></pre></td></tr></table></figure>
<h5 id="用ES6解构语法"><a href="#用ES6解构语法" class="headerlink" title="用ES6解构语法"></a>用ES6解构语法</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'a'</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">'b'</span></span><br><span class="line">[a,b] = [b,a]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">//b</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">//a</span></span><br></pre></td></tr></table></figure>


<h4 id="6-2-2-ES5与ES6对比"><a href="#6-2-2-ES5与ES6对比" class="headerlink" title="6.2.2 ES5与ES6对比"></a>6.2.2 ES5与ES6对比</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">let</span> a <span class="comment">// ES6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125; <span class="comment">// ES5</span></span><br><span class="line"></span><br><span class="line">f2 = <span class="function">(<span class="params">a</span>) =&gt;</span> &#123;<span class="built_in">console</span>.log()&#125; <span class="comment">// ES6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">'???'</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;</span><br><span class="line">o[x] = <span class="literal">true</span> <span class="comment">// '???' as key </span></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">'???'</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">  [x]:<span class="literal">true</span></span><br><span class="line">&#125;<span class="comment">// ES6</span></span><br></pre></td></tr></table></figure>

<h3 id="6-3-第二次优化"><a href="#6-3-第二次优化" class="headerlink" title="6.3 第二次优化"></a>6.3 第二次优化</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//直接从第一个参数拿到这六个变量，同时声明这六个变量</span></span><br><span class="line"><span class="built_in">window</span>.jQeuery.ajax=<span class="function"><span class="keyword">function</span>(<span class="params">&#123;url,method,body,successFn,failFn,headers&#125;</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> request = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">  request.open(method,url)</span><br><span class="line">  request.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(request.readyState === <span class="number">4</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &gt; <span class="number">300</span> )&#123;</span><br><span class="line">      successFn.call(<span class="literal">undefined</span>,request.responseText)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(request.status &gt;= <span class="number">400</span> )&#123;</span><br><span class="line">      failFn.call(<span class="literal">undefined</span>，request)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  request.send(body)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>【前端项目】一个会动的简历-总结</title>
    <url>/2020/04/03/%E3%80%90%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E3%80%91%E4%B8%80%E4%B8%AA%E4%BC%9A%E5%8A%A8%E7%9A%84%E7%AE%80%E5%8E%86-%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="一、预览"><a href="#一、预览" class="headerlink" title="一、预览"></a>一、预览</h2><p><a href="https://qiuzp.com/animation-resume/">预览地址</a><br><a href="https://github.com/qiuzp94/animation-resume" target="_blank" rel="noopener">源码地址</a></p>
<h2 id="二、原理"><a href="#二、原理" class="headerlink" title="二、原理"></a>二、原理</h2><h3 id="2-1-参考网址"><a href="#2-1-参考网址" class="headerlink" title="2.1 参考网址"></a>2.1 参考网址</h3><p><a href="https://www.strml.net/" target="_blank" rel="noopener">strml.net</a><br><a href="https://fangyinghang.com/animating-resume/" target="_blank" rel="noopener">animating-resume</a></p>
<a id="more"></a>

<h3 id="2-2-具体原理"><a href="#2-2-具体原理" class="headerlink" title="2.2 具体原理"></a>2.2 具体原理</h3><p>字在页面依次出现</p>
<h3 id="2-3-依次显示原理例子"><a href="#2-3-依次显示原理例子" class="headerlink" title="2.3 依次显示原理例子"></a>2.3 依次显示原理例子</h3><p><a href="https://jsbin.com/dekuroyehi/edit?html,js,output" target="_blank" rel="noopener">在线预览地址</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS Bin<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> result = <span class="string">'1234567890'</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> n = <span class="number">0</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> id = setInterval(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span></span><br><span class="line">  n += 1</span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.body.innerHTML = result.substring(<span class="number">0</span>,n)</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(n+<span class="string">'轮'</span>)</span></span><br><span class="line">  if(n &gt;= result.length)&#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.clearInterval(id)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,600)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/substring" target="_blank" rel="noopener">String.prototype.substring()</a></p>
<h3 id="2-4-CSS展示-依次显示原理例子"><a href="#2-4-CSS展示-依次显示原理例子" class="headerlink" title="2.4 CSS展示+依次显示原理例子"></a>2.4 CSS展示+依次显示原理例子</h3><p>因为在HTML里面,回车、Tab连续出现多个，浏览器会自动认为一个回车、Tab<br>所以要用<code>&lt;pre&gt;</code>标签包裹内容</p>
<p>【原理】: 将css样式代码，一边展示在页面中，一边同步将代码放入style标签里面，这样就可以得出效果。</p>
<p><a href="https://jsbin.com/yatinivufu/edit?html,js,output" target="_blank" rel="noopener">在线预览地址</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS Bin<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">id</span>=<span class="string">"styleTag"</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pre</span> <span class="attr">id</span>=<span class="string">"code"</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> result = `</span></span><br><span class="line">*&#123;</span><br><span class="line">  transition:all 1s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body&#123;</span><br><span class="line">background:#61D7A4;</span><br><span class="line">color:#fff;</span><br><span class="line">&#125;</span><br><span class="line">`</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> n = <span class="number">0</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> id = setInterval(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span></span><br><span class="line">n += 1</span><br><span class="line">code.innerHTML = result.substring(0,n)</span><br><span class="line">styleTag.innerHTML = result.substring(0,n)</span><br><span class="line">if(n &gt;= result.length)&#123;</span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.clearInterval(id)</span></span><br><span class="line">&#125; </span><br><span class="line">&#125;,10 )</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="三、技术栈"><a href="#三、技术栈" class="headerlink" title="三、技术栈"></a>三、技术栈</h2><ul>
<li>原生JS</li>
<li>JS定时器</li>
<li>prmisjs</li>
<li>箭头函数</li>
<li>异步与回调</li>
</ul>
<h2 id="四、代码高亮"><a href="#四、代码高亮" class="headerlink" title="四、代码高亮"></a>四、代码高亮</h2><h3 id="4-1-第一次尝试"><a href="#4-1-第一次尝试" class="headerlink" title="4.1 第一次尝试"></a>4.1 第一次尝试</h3><p>添加下面代码</p>
<p><code>code.innerHTML = code.innerHTMl.replace(&#39;html&#39;,&#39;&lt;span style=&quot;color:red;&quot;&gt;body&lt;/span&gt;&#39;)</code></p>
<p>如果用这种方法，处理多个标签要使用正则匹配，这里我们可以采用开源库<br><code>Prism.js</code></p>
<h3 id="4-2-关于Prism-js"><a href="#4-2-关于Prism-js" class="headerlink" title="4.2 关于Prism.js"></a>4.2 关于Prism.js</h3><p>Prism 是一款轻量、可扩展的代码语法高亮库，使用现代化的 Web 标准构建。</p>
<p>它能把一个字符串的其中的关键字加上高亮</p>
<p><a href="https://prismjs.com/" target="_blank" rel="noopener">Prism.js官网地址</a></p>
<h4 id="如何使用Prism-js"><a href="#如何使用Prism-js" class="headerlink" title="如何使用Prism.js"></a>如何使用Prism.js</h4><p>详情请看<a href="https://prismjs.com/#basic-usage" target="_blank" rel="noopener">官网介绍</a></p>
<h5 id="下载css与js文件后引入"><a href="#下载css与js文件后引入" class="headerlink" title="下载css与js文件后引入"></a>下载css与js文件后引入</h5><p><a href="https://prismjs.com/download.html#themes=prism&languages=markup+css+clike+javascript" target="_blank" rel="noopener">链接地址</a></p>
<h5 id="使用Prism-js"><a href="#使用Prism-js" class="headerlink" title="使用Prism.js"></a>使用Prism.js</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">code.innerHTML = Prism.highlight(code.innerHTML, Prism.languages.css, <span class="string">'css'</span>);</span><br><span class="line"><span class="string">``</span><span class="string">`   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 五、故意代码高亮</span></span><br><span class="line"><span class="string">### 第一步 </span></span><br><span class="line"><span class="string">添加默认样式default.css,先覆盖prism高亮的样式</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> CSS</span><br><span class="line"><span class="comment">//default.css</span></span><br><span class="line"></span><br><span class="line">.token.selector&#123;</span><br><span class="line">    color:black;</span><br><span class="line">&#125;</span><br><span class="line">.token.property&#123;</span><br><span class="line">    color:black;</span><br><span class="line">&#125;</span><br><span class="line">.token.punctuation&#123;</span><br><span class="line">    color:black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意default.css要在prism.css后面</p>
<h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>在result添加会prism高亮的样式,js执行到相关代码就会高亮</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="string">`</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">/* 我需要一点代码高亮 */</span></span><br><span class="line"><span class="string">.token.selector&#123;</span></span><br><span class="line"><span class="string">  color:#690;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">.token.property&#123;</span></span><br><span class="line"><span class="string">  color:#905;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">.token.punctuation&#123;</span></span><br><span class="line"><span class="string">  color:#999;</span></span><br><span class="line"><span class="string">&#125; </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure>


<h2 id="六、加动画效果"><a href="#六、加动画效果" class="headerlink" title="六、加动画效果"></a>六、加动画效果</h2><h2 id="七、添加简历内容"><a href="#七、添加简历内容" class="headerlink" title="七、添加简历内容"></a>七、添加简历内容</h2><h3 id="第一步-新建-result2变量-来存储数据"><a href="#第一步-新建-result2变量-来存储数据" class="headerlink" title="第一步 新建 result2变量 来存储数据"></a>第一步 新建 result2变量 来存储数据</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="keyword">var</span> result2 = <span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure>


<h3 id="第二步-在第一个定时器上添加fn2与fn3函数"><a href="#第二步-在第一个定时器上添加fn2与fn3函数" class="headerlink" title="第二步 在第一个定时器上添加fn2与fn3函数"></a>第二步 在第一个定时器上添加fn2与fn3函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> id = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">window</span>.clearInterval(id)</span><br><span class="line">    fn2()</span><br><span class="line">    fn3(result)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<h3 id="第三步-在DOM树上添加pre标签即构造createPaper函数内容"><a href="#第三步-在DOM树上添加pre标签即构造createPaper函数内容" class="headerlink" title="第三步 在DOM树上添加pre标签即构造createPaper函数内容"></a>第三步 在DOM树上添加pre标签即构造createPaper函数内容</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> paper = <span class="built_in">document</span>.createElement(<span class="string">'pre'</span>)</span><br><span class="line">  paper.id = <span class="string">'paper'</span></span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(paper)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="第四步-构造关于白纸内容的f3函数"><a href="#第四步-构造关于白纸内容的f3函数" class="headerlink" title="第四步 构造关于白纸内容的f3函数"></a>第四步 构造关于白纸内容的f3函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params">preResult</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="string">`</span></span><br><span class="line"><span class="string">#paper&#123;</span></span><br><span class="line"><span class="string">    width:100px; height:100px;</span></span><br><span class="line"><span class="string">    background:white;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">var</span> n = <span class="number">0</span></span><br><span class="line">  <span class="keyword">var</span> id = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">    code.innerHTML = preResult + result.substring(<span class="number">0</span>,<span class="number">1</span>) </span><br><span class="line">    code.innerHTML =</span><br><span class="line">    Prism.highlight(code.innerHTML, Prism.languages.css, <span class="string">'css'</span>);</span><br><span class="line">    styleTag.innerHTML = preResult + result.substring(<span class="number">0</span>, n)</span><br><span class="line">    <span class="keyword">if</span> (n &gt;= result.length) &#123;</span><br><span class="line">      <span class="built_in">window</span>.clearInterval(id)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="八、封装函数"><a href="#八、封装函数" class="headerlink" title="八、封装函数"></a>八、封装函数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeCode</span>(<span class="params">code</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> domCode = <span class="built_in">document</span>.querySelector(<span class="string">'#code'</span>)</span><br><span class="line">  <span class="keyword">let</span> n = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> id = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">    domCode.innerHTML = </span><br><span class="line">      Prism.highlight(code.substring(<span class="number">0</span>,n), Prism.languages.css, <span class="string">'css'</span>);</span><br><span class="line">    styleTag.innerHTML = code.substring(<span class="number">0</span>, n)</span><br><span class="line">    <span class="keyword">if</span> (n &gt;= result.length) &#123;</span><br><span class="line">      <span class="built_in">window</span>.clearInterval(id)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">10</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="九、异步与回调"><a href="#九、异步与回调" class="headerlink" title="九、异步与回调"></a>九、异步与回调</h2><p>因为writeCode(result）只负责定闹钟<br>createPaper在写代码之前</p>
<ol>
<li>定闹钟</li>
<li>writeCode返回</li>
<li>执行createPaper()</li>
<li>闹钟时间到</li>
<li>写第一行代码</li>
</ol>
<h3 id="9-1-一个例子-买黄牛票"><a href="#9-1-一个例子-买黄牛票" class="headerlink" title="9.1 一个例子 买黄牛票"></a>9.1 一个例子 买黄牛票</h3><ul>
<li>让黄牛去买票，然后站着等（同步）</li>
<li>让黄牛去买票（告诉黄牛，你买到票就call我），然后去做别的(异步)</li>
</ul>
<p>告诉黄牛，你买到票就打（回）电话我<br>when you get the ticket,call me back。</p>
<h3 id="9-2-异步的解释"><a href="#9-2-异步的解释" class="headerlink" title="9.2 异步的解释"></a>9.2 异步的解释</h3><p>异步就是先写代码后执行，<code>不等结果</code>直接进行下一步</p>
<p>如果想写完代码之后再执行createPaper，这需要回调</p>
<p>writeCode就是一个异步，因为我们不会等它把代码写完，因为它是一个定时器（闹钟）,只要是不等它做完，直接执行createPaper。这就说明writeCode就是一个异步任务。</p>
<p>异步的精髓在于<code>不等结果</code></p>
<h3 id="9-3-如何获取异步结果"><a href="#9-3-如何获取异步结果" class="headerlink" title="9.3 如何获取异步结果"></a>9.3 如何获取异步结果</h3><p>使用回调可以获取异步的结果</p>
<ul>
<li>回调是拿到异步结果的一种方式</li>
<li>回调也可以拿同步结果</li>
</ul>
<p>异步有缺点，就是拿不到结果，所以就要把回调放在异步里面</p>
<h3 id="9-4-使用异步"><a href="#9-4-使用异步" class="headerlink" title="9.4 使用异步"></a>9.4 使用异步</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//main.js</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">writeCode</span>(<span class="params">code,fn</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">        fn.call()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">10</span>) </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> ...</span><br><span class="line"> </span><br><span class="line">writeCode(result,()=&gt;&#123;</span><br><span class="line">  createPaper(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;)</span><br><span class="line">&#125;) </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">createPaper</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  fn.call()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="十、在已有代码上追加内容"><a href="#十、在已有代码上追加内容" class="headerlink" title="十、在已有代码上追加内容"></a>十、在已有代码上追加内容</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeCode</span>(<span class="params">prefix,code,fn</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    domCode.innerHTML =</span><br><span class="line">      Prism.highlight(prefix + code.substring(<span class="number">0</span>, n), Prism.languages.css, <span class="string">'css'</span>);</span><br><span class="line">    styleTag.innerHTML = prefix + code.substring(<span class="number">0</span>, n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">writeCode(<span class="string">''</span>,result,()=&gt;&#123;</span><br><span class="line">  createPaper(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    writeCode(result,result2)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<h2 id="十一、代码往下滚动"><a href="#十一、代码往下滚动" class="headerlink" title="十一、代码往下滚动"></a>十一、代码往下滚动</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">writeCode</span>(<span class="params">prefix, code, fn</span>) </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    domCode.scrollTop = domCode.scrollHeight</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="十二、其他知识"><a href="#十二、其他知识" class="headerlink" title="十二、其他知识"></a>十二、其他知识</h2><p>pre 全称preview </p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace" target="_blank" rel="noopener">replace() 方法返回一个由替换值（replacement）替换一些或所有匹配的模式（pattern）后的新字符串。</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollTop" target="_blank" rel="noopener">Element.scrollTop</a></p>
<h3 id="12-1-JS的功能"><a href="#12-1-JS的功能" class="headerlink" title="12.1 JS的功能"></a>12.1 JS的功能</h3><ol>
<li>操作页面</li>
<li>AJAX</li>
</ol>
]]></content>
      <tags>
        <tag>前端项目</tag>
      </tags>
  </entry>
  <entry>
    <title>【前端项目】添加轮播swiper总结</title>
    <url>/2020/04/03/%E3%80%90%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E3%80%91%E6%B7%BB%E5%8A%A0%E8%BD%AE%E6%92%ADswiper%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="一、-swiper是什么"><a href="#一、-swiper是什么" class="headerlink" title="一、 swiper是什么"></a>一、 swiper是什么</h2><p>swiper是一个轮播插件</p>
<p><a href="https://swiperjs.com/" target="_blank" rel="noopener">swiper-官方地址</a><br><a href="https://github.com/nolimits4web/swiper" target="_blank" rel="noopener">swiper-官方仓库地址</a></p>
<h2 id="二-、-使用swiper"><a href="#二-、-使用swiper" class="headerlink" title="二 、 使用swiper"></a>二 、 使用swiper</h2><h3 id="2-1-怎么引入swiper"><a href="#2-1-怎么引入swiper" class="headerlink" title="2.1 怎么引入swiper"></a>2.1 怎么引入swiper</h3><h4 id="2-1-1-方法一-npm-安装"><a href="#2-1-1-方法一-npm-安装" class="headerlink" title="2.1.1 方法一 npm 安装"></a>2.1.1 方法一 npm 安装</h4><p><code>npm install swiper</code></p>
<h4 id="2-1-2-方法二-CDN-引入"><a href="#2-1-2-方法二-CDN-引入" class="headerlink" title="2.1.2 方法二 CDN 引入"></a>2.1.2 方法二 CDN 引入</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://unpkg.com/swiper/css/swiper.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://unpkg.com/swiper/css/swiper.min.css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/swiper/js/swiper.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/swiper/js/swiper.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>


<h3 id="2-2-项目添加swiper-css与js文件"><a href="#2-2-项目添加swiper-css与js文件" class="headerlink" title="2.2 项目添加swiper.css与js文件"></a>2.2 项目添加swiper.css与js文件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    //...省略无关代码</span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://unpkg.com/swiper/css/swiper.min.css"</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/swiper/js/swiper.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>个人简历<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-1-测试swiper是否引入成功"><a href="#2-2-1-测试swiper是否引入成功" class="headerlink" title="2.2.1 测试swiper是否引入成功"></a>2.2.1 测试swiper是否引入成功</h4><p>chrome控制台测试Swiper对象是否成功打印出</p>
<p><img src="https://i.loli.net/2020/03/04/LDfEawUy6l25qsb.png" alt="swiper02.png"></p>
<h3 id="2-2-2-添加swiper-html代码框架到项目中"><a href="#2-2-2-添加swiper-html代码框架到项目中" class="headerlink" title="2.2.2 添加swiper html代码框架到项目中"></a>2.2.2 添加swiper html代码框架到项目中</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--swiper html代码框架如下 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Slider main container --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-container"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Additional required wrapper --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-wrapper"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Slides --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-slide"</span>&gt;</span>Slide 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-slide"</span>&gt;</span>Slide 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-slide"</span>&gt;</span>Slide 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- If we need pagination --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-pagination"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- If we need navigation buttons --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-button-prev"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-button-next"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- If we need scrollbar --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-scrollbar"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">### 2.2.3 添加swiper css样式到项目中</span><br><span class="line"></span><br><span class="line">``` css</span><br><span class="line">//swiper css样式如下</span><br><span class="line">.swiper-container &#123;</span><br><span class="line">    width: 600px;</span><br><span class="line">    height: 300px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-4-初始化swiper-到项目中"><a href="#2-2-4-初始化swiper-到项目中" class="headerlink" title="2.2.4 初始化swiper 到项目中"></a>2.2.4 初始化swiper 到项目中</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化swiper 代码如下</span></span><br><span class="line"><span class="keyword">var</span> mySwiper = <span class="keyword">new</span> Swiper (<span class="string">'.swiper-container'</span>, &#123;</span><br><span class="line">    <span class="comment">// Optional parameters</span></span><br><span class="line">    direction: <span class="string">'vertical'</span>,<span class="comment">//列轮播提示</span></span><br><span class="line">    loop: <span class="literal">true</span>, <span class="comment">//是否是无缝轮播</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we need pagination</span></span><br><span class="line">    pagination: &#123;</span><br><span class="line">      el: <span class="string">'.swiper-pagination'</span>, <span class="comment">//是否需要分页器</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Navigation arrows</span></span><br><span class="line">    navigation: &#123;</span><br><span class="line">      nextEl: <span class="string">'.swiper-button-next'</span>, <span class="comment">//是否需要上一个轮播按钮</span></span><br><span class="line">      prevEl: <span class="string">'.swiper-button-prev'</span>,<span class="comment">//是否需要下一个轮播按钮</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// And if we need scrollbar</span></span><br><span class="line">    scrollbar: &#123;</span><br><span class="line">      el: <span class="string">'.swiper-scrollbar'</span>,<span class="comment">//是否需要滚动条</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2-2-5-swiper初始化效果如下"><a href="#2-2-5-swiper初始化效果如下" class="headerlink" title="2.2.5 swiper初始化效果如下"></a>2.2.5 swiper初始化效果如下</h3><p><img src="https://i.loli.net/2020/03/04/pzGQEK9x4soCjvq.png" alt="swiper03.png"></p>
<h3 id="2-2-6-修改swiper文件适配项目"><a href="#2-2-6-修改swiper文件适配项目" class="headerlink" title="2.2.6 修改swiper文件适配项目"></a>2.2.6 修改swiper文件适配项目</h3><ul>
<li>去掉列轮播提示选项<code>direction: &#39;vertical&#39;</code></li>
<li>去掉需要滚动条js<code>&#39;.swiper-scrollbar</code></li>
<li>去掉需要滚动条<code>class=&quot;swiper-scrollba</code></li>
</ul>
<h3 id="2-2-7-适配效果如下"><a href="#2-2-7-适配效果如下" class="headerlink" title="2.2.7 适配效果如下"></a>2.2.7 适配效果如下</h3><p><img src="https://i.loli.net/2020/03/04/fnCUDtGpsv6cOFb.png" alt="swiper04.png"></p>
]]></content>
      <tags>
        <tag>前端项目</tag>
      </tags>
  </entry>
  <entry>
    <title>【前端项目】简历项目添加LeanCloud留言功能</title>
    <url>/2020/04/03/%E3%80%90%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E3%80%91%E7%AE%80%E5%8E%86%E9%A1%B9%E7%9B%AE%E6%B7%BB%E5%8A%A0LeanCloud%E7%95%99%E8%A8%80%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h2 id="一、什么是LeanCLoud"><a href="#一、什么是LeanCLoud" class="headerlink" title="一、什么是LeanCLoud"></a>一、什么是LeanCLoud</h2><h3 id="1-1-问题：前端要存储一个数据要怎么操作？"><a href="#1-1-问题：前端要存储一个数据要怎么操作？" class="headerlink" title="1.1 问题：前端要存储一个数据要怎么操作？"></a>1.1 问题：前端要存储一个数据要怎么操作？</h3><p>没有方法存储，用户刷新或者换一台设备，数据就会没有。<br>存数据只能存储在服务器（server）上，这样才能做到，跨设备数据保存。</p>
<h2 id="1-2-LeanCLoud是什么"><a href="#1-2-LeanCLoud是什么" class="headerlink" title="1.2 LeanCLoud是什么"></a>1.2 LeanCLoud是什么</h2><p>在请求量低，LeanCloud提供免费数据库API</p>
<blockquote>
<p>leancloud 领先的 BaaS 提供商,提供数据存储、文件存储、云引擎、容器、即时通讯、消息推送、短信、游戏云等多项服务,为移动开发提供强有力的后端支持</p>
</blockquote>
<p><a href="https://www.leancloud.cn/" target="_blank" rel="noopener">LeanCloud官网</a></p>
<a id="more"></a>

<ul>
<li>一个自带数据库和增删改查（CRUD）功能的后台系统<ul>
<li>登录注册、手机验证码功能（收费）</li>
<li>存储任意信息</li>
<li>读取任意信息</li>
<li>搜索任意信息</li>
<li>删除任意信息</li>
<li>更新任意信息</li>
<li>等等功能</li>
</ul>
</li>
</ul>
<h2 id="二、前期准备"><a href="#二、前期准备" class="headerlink" title="二、前期准备"></a>二、前期准备</h2><h3 id="1-1-注册一个leadcloud"><a href="#1-1-注册一个leadcloud" class="headerlink" title="1.1 注册一个leadcloud"></a>1.1 注册一个leadcloud</h3><h3 id="1-2-选择节点"><a href="#1-2-选择节点" class="headerlink" title="1.2 选择节点"></a>1.2 选择节点</h3><p>  如果域名在国内备案了，选择华北或者华东节点，反之选国际版</p>
<p><img src="https://i.loli.net/2020/03/09/zOdSJq6pacNbsBR.png" alt="leadcloud01-min.png"></p>
<h3 id="1-3-创建一个应用"><a href="#1-3-创建一个应用" class="headerlink" title="1.3 创建一个应用"></a>1.3 创建一个应用</h3><p><img src="https://i.loli.net/2020/03/09/HT4u1AfzwyvIp9W.png" alt="leadcloud02-min.png"></p>
<h2 id="三、初始化LeadCloud"><a href="#三、初始化LeadCloud" class="headerlink" title="三、初始化LeadCloud"></a>三、初始化LeadCloud</h2><h3 id="3-1-创建一个CLass"><a href="#3-1-创建一个CLass" class="headerlink" title="3.1 创建一个CLass"></a>3.1 创建一个CLass</h3><p><img src="https://i.loli.net/2020/03/09/9Dj6MExuNWwBokH.png" alt="leadCloud03-min.png"></p>
<h3 id="3-2-绑定自定义域名"><a href="#3-2-绑定自定义域名" class="headerlink" title="3.2 绑定自定义域名"></a>3.2 绑定自定义域名</h3><p><img src="https://i.loli.net/2020/03/09/uCXmcg7vPp9ODYx.png" alt="uCXmcg7vPp9ODYx.png"></p>
<h3 id="3-3-引入leadcloud数据库"><a href="#3-3-引入leadcloud数据库" class="headerlink" title="3.3 引入leadcloud数据库"></a>3.3 引入leadcloud数据库</h3><p>具体操作<a href="https://tab.leancloud.cn/docs/start.html" target="_blank" rel="noopener">可以查看LeanCloud 文档</a></p>
<h4 id="3-3-1-cdn引入leadcloud"><a href="#3-3-1-cdn引入leadcloud" class="headerlink" title="3.3.1 cdn引入leadcloud"></a>3.3.1 cdn引入leadcloud</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 存储服务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.jsdelivr.net/npm/leancloud-storage@4.2.0/dist/av-min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>引入成功，可以在chrome的控制台打印出<code>AV</code>的全局变量</p>
</blockquote>
<h4 id="3-3-2-添加个人的leadCloud信息到js上"><a href="#3-3-2-添加个人的leadCloud信息到js上" class="headerlink" title="3.3.2 添加个人的leadCloud信息到js上"></a>3.3.2 添加个人的leadCloud信息到js上</h4><p><img src="https://i.loli.net/2020/03/09/dwLfy5OsXMI6Y2t.png" alt="leadCloud05-min.png"></p>
<h2 id="四、测试LeadCloud"><a href="#四、测试LeadCloud" class="headerlink" title="四、测试LeadCloud"></a>四、测试LeadCloud</h2><h3 id="4-1-ping-自己设置的自定义域名-有响应就成功"><a href="#4-1-ping-自己设置的自定义域名-有响应就成功" class="headerlink" title="4.1 ping 自己设置的自定义域名 有响应就成功"></a>4.1 ping 自己设置的自定义域名 有响应就成功</h3><p>具体可以看看leadCloud文档的<code>验证</code>部分</p>
<p><a href="https://tab.leancloud.cn/docs/start.html" target="_blank" rel="noopener">SDK 安装指南 - LeanCloud 文档</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="keyword">var</span> TestObject = AV.Object.extend(<span class="string">'TestObject'</span>);</span><br><span class="line"><span class="keyword">var</span> testObject = <span class="keyword">new</span> TestObject();</span><br><span class="line">testObject.set(<span class="string">'words'</span>, <span class="string">'Hello world!'</span>);</span><br><span class="line">testObject.save().then(<span class="function"><span class="keyword">function</span> (<span class="params">testObject</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'保存成功。'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="4-2-提高数据库安全性"><a href="#4-2-提高数据库安全性" class="headerlink" title="4.2 提高数据库安全性"></a>4.2 提高数据库安全性</h3><ol>
<li>在<code>设置</code>-&gt;<code>风险监测</code>中，把不要的Class能删除就删除，不能删除的就改为更高级别的权限。</li>
<li>在<code>设置</code>-&gt;<code>安全中心</code>-&gt;<code>服务开关</code>,把不需要的服务统统关闭。</li>
<li>在<code>设置</code>-&gt;<code>安全中心</code>-&gt;<code>Web安全域名域名</code>添加自己数据库自定义域名上去</li>
</ol>
<h2 id="五、添加留言表单"><a href="#五、添加留言表单" class="headerlink" title="五、添加留言表单"></a>五、添加留言表单</h2><h3 id="5-1-添加留言表单的HTMl"><a href="#5-1-添加留言表单的HTMl" class="headerlink" title="5.1 添加留言表单的HTMl"></a>5.1 添加留言表单的HTMl</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">id</span>=<span class="string">"postMessageForm"</span> <span class="attr">class</span>=<span class="string">"postMessageForm"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"name"</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"content"</span>&gt;</span>评论内容<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="5-2-添加留言表单的CSS"><a href="#5-2-添加留言表单的CSS" class="headerlink" title="5.2 添加留言表单的CSS"></a>5.2 添加留言表单的CSS</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.postMessageForm</span>&#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">7px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.7</span>); <span class="attribute">box-sizing</span>:border-box; <span class="attribute">border</span>:<span class="number">20px</span> solid white; <span class="attribute">background-color</span>:<span class="number">#fff</span>; &#125;</span><br><span class="line"><span class="selector-class">.postMessageForm</span> &gt; <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span>&#123; <span class="attribute">width</span>:<span class="number">300px</span>; <span class="attribute">height</span>:<span class="number">30px</span>; &#125;</span><br><span class="line"><span class="selector-class">.postMessageForm</span> &gt; <span class="selector-tag">input</span><span class="selector-attr">[name=name]</span>,</span><br><span class="line"><span class="selector-class">.postMessageForm</span> &gt; <span class="selector-tag">input</span><span class="selector-attr">[name=content]</span>&#123; <span class="attribute">margin-right</span>: <span class="number">30px</span>; &#125;</span><br><span class="line"><span class="selector-class">.postMessageForm</span> &gt; <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span><span class="selector-pseudo">:focus</span>&#123; <span class="attribute">outline</span>: none; &#125;</span><br><span class="line"><span class="selector-class">.postMessageForm</span> &gt; <span class="selector-tag">label</span>&#123; <span class="attribute">line-height</span>: <span class="number">30px</span>; <span class="attribute">font-size</span>:<span class="number">18px</span>; &#125;</span><br><span class="line"><span class="selector-class">.postMessageForm</span> &gt; <span class="selector-tag">input</span><span class="selector-attr">[type=submit]</span>&#123; <span class="attribute">background-color</span>:<span class="number">#e4696c</span>; <span class="attribute">opacity</span>: <span class="number">0.6</span>; <span class="attribute">color</span>:<span class="number">#efefef</span>; <span class="attribute">width</span>: <span class="number">100px</span>; <span class="attribute">text-align</span>: center; <span class="attribute">line-height</span>: <span class="number">32px</span>; &#125;</span><br><span class="line"><span class="selector-class">.postMessageForm</span> &gt; <span class="selector-tag">input</span><span class="selector-attr">[type=submit]</span><span class="selector-pseudo">:focus</span>&#123; <span class="attribute">outline</span>: none; &#125;</span><br><span class="line"><span class="selector-class">.postMessageForm</span> &gt; <span class="selector-tag">input</span><span class="selector-attr">[type=submit]</span><span class="selector-pseudo">:hover</span>&#123; <span class="attribute">opacity</span>: <span class="number">1</span>; <span class="attribute">transition</span>: all <span class="number">0.4s</span>; <span class="attribute">cursor</span>: pointer; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-3-添加留言表单的JS"><a href="#5-3-添加留言表单的JS" class="headerlink" title="5.3 添加留言表单的JS"></a>5.3 添加留言表单的JS</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myForm = <span class="built_in">document</span>.querySelector(<span class="string">'#postMessageForm'</span>)</span><br><span class="line">myForm.addEventListener(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.preventDefault()<span class="comment">//阻止默认事件，否则会有默认跳转</span></span><br><span class="line">    <span class="keyword">let</span> content = myForm.querySelector(<span class="string">'input[name=content]'</span>).value</span><br><span class="line">    <span class="keyword">let</span> name = myForm.querySelector(<span class="string">'input[name=name]'</span>).value</span><br><span class="line">    <span class="keyword">var</span> Message = AV.Object.extend(<span class="string">'Message'</span>);</span><br><span class="line">    <span class="keyword">var</span> message = <span class="keyword">new</span> Message();</span><br><span class="line">    message.set(&#123;</span><br><span class="line">        <span class="string">'content'</span>: content,</span><br><span class="line">        <span class="string">'name'</span>: name,</span><br><span class="line">    &#125;)</span><br><span class="line">    message.save().then(<span class="function"><span class="keyword">function</span> (<span class="params">Object</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>)</span><br><span class="line">        li.innerText = <span class="string">`<span class="subst">$&#123;object.attributes.name&#125;</span>: <span class="subst">$&#123;object.attributes.content&#125;</span>`</span></span><br><span class="line">        <span class="keyword">let</span> messageList = <span class="built_in">document</span>.querySelector(<span class="string">'#messageList'</span>)</span><br><span class="line">        messageList.appendChild(li)</span><br><span class="line">        location.reload(<span class="literal">true</span>);<span class="comment">//刷新页面</span></span><br><span class="line">    &#125;)</span><br><span class="line">    alert(<span class="string">'留言成功啦'</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="六、添加留言板代码"><a href="#六、添加留言板代码" class="headerlink" title="六、添加留言板代码"></a>六、添加留言板代码</h2><h3 id="6-1-添加留言板html"><a href="#6-1-添加留言板html" class="headerlink" title="6.1 添加留言板html"></a>6.1 添加留言板html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">id</span>=<span class="string">"messageList"</span> <span class="attr">class</span>=<span class="string">"messageList"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6-2-添加留言板css"><a href="#6-2-添加留言板css" class="headerlink" title="6.2 添加留言板css"></a>6.2 添加留言板css</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.messageList</span> &gt; <span class="selector-tag">li</span>&#123; <span class="attribute">font-size</span>: <span class="number">18px</span>; <span class="attribute">line-height</span>: <span class="number">40px</span>; <span class="attribute">background-color</span>:<span class="number">#eee</span>; <span class="attribute">padding</span>:<span class="number">0px</span> <span class="number">20px</span>; &#125;</span><br><span class="line"><span class="selector-class">.messageList</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span>&#123; <span class="attribute">border-top-left-radius</span>: <span class="number">10px</span>; <span class="attribute">border-top-right-radius</span>: <span class="number">10px</span>; &#125;</span><br><span class="line"><span class="selector-class">.messageList</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span>&#123; <span class="attribute">border-bottom-left-radius</span>: <span class="number">10px</span>; <span class="attribute">border-bottom-right-radius</span>: <span class="number">10px</span>; &#125;</span><br><span class="line"><span class="selector-class">.messageList</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(2n+1)</span>&#123; <span class="attribute">background-color</span>:<span class="number">#fff</span>; &#125; </span><br><span class="line"><span class="selector-class">.messageList</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span>&#123; <span class="attribute">background-color</span>:<span class="number">#e4696c</span>; <span class="attribute">color</span>:<span class="number">#fff</span>; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-3-添加留言板JS"><a href="#6-3-添加留言板JS" class="headerlink" title="6.3 添加留言板JS"></a>6.3 添加留言板JS</h3><p>打开项目就会读取leadCloud上的留言数据，然后存放在ol的li中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> query = <span class="keyword">new</span> AV.Query(<span class="string">'Message'</span>);</span><br><span class="line">query.find()</span><br><span class="line">    .then(</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">messages</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> array = messages.map(<span class="function">(<span class="params">item</span>) =&gt;</span> item.attributes)</span><br><span class="line">            array.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>)</span><br><span class="line">                li.innerText = <span class="string">`<span class="subst">$&#123;item.name&#125;</span>:<span class="subst">$&#123;item.content&#125;</span>`</span></span><br><span class="line">                <span class="keyword">let</span> messageList = <span class="built_in">document</span>.querySelector(<span class="string">'#messageList'</span>)</span><br><span class="line">                messageList.appendChild(li)</span><br><span class="line">                myForm.querySelector(<span class="string">'input[name=content]'</span>).value = <span class="string">''</span></span><br><span class="line">                myForm.querySelector(<span class="string">'input[name=name]'</span>).value = <span class="string">''</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; </span><br><span class="line">    );</span><br></pre></td></tr></table></figure>


<h2 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h2><h3 id="7-1效果如下"><a href="#7-1效果如下" class="headerlink" title="7.1效果如下"></a>7.1效果如下</h3><p><img src="https://i.loli.net/2020/03/09/rFOQxntULyaC6Yc.png" alt="leancloud06.png"></p>
<h3 id="7-2-问：为什么要监听form，而不是button？"><a href="#7-2-问：为什么要监听form，而不是button？" class="headerlink" title="7.2 问：为什么要监听form，而不是button？"></a>7.2 问：为什么要监听form，而不是button？</h3><p>假设用户在文本框输入了文字，但不点提交按钮，直接点回车，怎么办？用户回车要不要提交表单？ 要</p>
<p>所以要监听提按钮也要监听回车</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下面是错误示范</span></span><br><span class="line"><span class="keyword">let</span> button = myForm.querySelector(<span class="string">'input[type=submit]'</span>)</span><br><span class="line">button.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br><span class="line"><span class="keyword">let</span> input = myForm.querySelector(<span class="string">'input[name=content]'</span>)</span><br><span class="line">input.addEventListener(<span class="string">'keypress'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(e.keyCode === <span class="number">13</span>)&#123;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//但是上面代码也可以等于下面,比较简单</span></span><br><span class="line">myForm.addEventListener(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>sumblit 包含提交，在任意的input打回车</strong></p>
]]></content>
      <tags>
        <tag>前端项目</tag>
      </tags>
  </entry>
  <entry>
    <title>【JavaScript】面向对象编程-全局命名空间&amp;&amp;new是什么</title>
    <url>/2020/04/03/%E3%80%90JavaScript%E3%80%91%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B-%E5%85%A8%E5%B1%80%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4&amp;&amp;new%E6%98%AF%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<h2 id="一、-什么是面向对象？"><a href="#一、-什么是面向对象？" class="headerlink" title="一、 什么是面向对象？"></a>一、 什么是面向对象？</h2><p>在编程里面，面向的意思以什么什么为主。<br>面向对象编程的意思，代码中主要是对象。<br>面向对象不是一个概念，而是一个经验知识。</p>
<h3 id="1-1-知乎大佬对面向对象概念的解释"><a href="#1-1-知乎大佬对面向对象概念的解释" class="headerlink" title="1.1 知乎大佬对面向对象概念的解释"></a>1.1 知乎大佬对面向对象概念的解释</h3><ul>
<li>把一组数据结构和处理他们的方法组成<code>对象（Object）</code>，</li>
<li>把相同行为的对象归纳为<code>类（class）</code>,</li>
<li>通过类的<code>封装（encapsulation）</code>隐藏内部细节，</li>
<li>通过<code>继承（inheritance）</code>实现类的<code>特化（specialization）/泛化（generalization）</code></li>
<li>通过<code>多态（polymorphism）</code>实现基于对象类型的<code>动态分派（dynamic dispath）</code></li>
</ul>
<a id="more"></a>

<h3 id="1-2-面向对象的中英与简称"><a href="#1-2-面向对象的中英与简称" class="headerlink" title="1.2 面向对象的中英与简称"></a>1.2 面向对象的中英与简称</h3><p>introduction_to_Object-Oriented<br>面向对象编程  Object Oriented Programming<br>面向对象设计  object-oriented design<br>面向对象编程 OO编程</p>
<h3 id="1-3-MDN文档对面向对象的解释"><a href="#1-3-MDN文档对面向对象的解释" class="headerlink" title="1.3 MDN文档对面向对象的解释"></a>1.3 MDN文档对面向对象的解释</h3><blockquote>
<p>面向对象编程是用抽象方式创建基于现实世界模型的一种编程模式。它使用先前建立的范例，包括模块化，多态和封装几种技术。今天，许多流行的编程语言（如Java，JavaScript，C＃，C+ +，Python，PHP，Ruby和Objective-C）都支持面向对象编程（OOP）。</p>
<p>相对于「一个程序只是一些函数的集合，或简单的计算机指令列表。」的传统软件设计观念而言，面向对象编程可以看作是使用一系列对象相互协作的软件设计。 <strong>在 OOP 中，每个对象能够接收消息，处理数据和发送消息给其他对象</strong>。每个对象都可以被看作是一个拥有清晰角色或责任的独立小机器。</p>
</blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Introduction_to_Object-Oriented_JavaScript" target="_blank" rel="noopener">JavaScript面向对象简介 - JavaScript | MDN</a></p>
<h3 id="1-4-术语"><a href="#1-4-术语" class="headerlink" title="1.4 术语"></a>1.4 术语</h3><h4 id="Namespace-命名空间"><a href="#Namespace-命名空间" class="headerlink" title="Namespace 命名空间"></a>Namespace 命名空间</h4><p>  比如<code>window.jQuery = 函数或者对象</code>；<code>window.jquery.ajax=</code>他们都有一个共同的前缀jQuery，jQuery就是一个命名空间。</p>
<h4 id="Class-类"><a href="#Class-类" class="headerlink" title="Class 类"></a>Class 类</h4><h4 id="Object-对象"><a href="#Object-对象" class="headerlink" title="Object 对象"></a>Object 对象</h4><h4 id="Property-属性"><a href="#Property-属性" class="headerlink" title="Property 属性"></a>Property 属性</h4><p> 属性就是对象里面的key：value的每个key就是属性</p>
<h4 id="Method-方法"><a href="#Method-方法" class="headerlink" title="Method 方法"></a>Method 方法</h4><p>如果一个对象属性是一个函数function()，那么这个function就是method方法。</p>
<h4 id="Constructor-构造函数"><a href="#Constructor-构造函数" class="headerlink" title="Constructor 构造函数"></a>Constructor 构造函数</h4><p>比如：Object()是一个构造函数 Number()是一个构造函数 String()是一个构造函数</p>
<h4 id="inheritance-继承"><a href="#inheritance-继承" class="headerlink" title="inheritance 继承"></a>inheritance 继承</h4><h4 id="Encapsulation-封装"><a href="#Encapsulation-封装" class="headerlink" title="Encapsulation 封装"></a>Encapsulation 封装</h4><h4 id="Abstraction-抽象"><a href="#Abstraction-抽象" class="headerlink" title="Abstraction 抽象"></a>Abstraction 抽象</h4><h4 id="Polymorphism-多态"><a href="#Polymorphism-多态" class="headerlink" title="Polymorphism 多态"></a>Polymorphism 多态</h4><h3 id="1-5-面向对象的核心"><a href="#1-5-面向对象的核心" class="headerlink" title="1.5 面向对象的核心"></a>1.5 面向对象的核心</h3><p>继承、封装、抽象、多态</p>
<h2 id="二、javascript-小技巧"><a href="#二、javascript-小技巧" class="headerlink" title="二、javascript 小技巧"></a>二、javascript 小技巧</h2><h3 id="2-1-一个运算符例子"><a href="#2-1-一个运算符例子" class="headerlink" title="2.1 一个运算符例子"></a>2.1 一个运算符例子</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> || <span class="number">2</span> <span class="comment">//这表达式的值是什么？</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//答案：1</span></span><br></pre></td></tr></table></figure>

<p>JavaScript 或操作符 且操作符<br><code>a||b</code>，<code>c||d</code>的值基本上不可能是true或false。</p>
<p>这是因为五个false值<code>（null、undefined、0、&#39;&#39;、NaN）</code>,而上面的或与且操作符一般不是falsy或者truy值，所以值是从自身a、b；c、d上选一个值</p>
<h3 id="2-2-与运算（-amp-amp-）"><a href="#2-2-与运算（-amp-amp-）" class="headerlink" title="2.2 与运算（&amp;&amp;）"></a>2.2 与运算<code>（&amp;&amp;）</code></h3><p>与是找false值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> &amp;&amp; <span class="number">0</span> <span class="comment">//0</span></span><br><span class="line"><span class="number">1</span> &amp;&amp; <span class="number">0</span> &amp;&amp; <span class="number">2</span> <span class="comment">//0</span></span><br><span class="line"><span class="number">1</span> &amp;&amp; <span class="number">0</span> &amp;&amp; <span class="number">2</span> &amp;&amp; <span class="number">3</span>  &amp;&amp; <span class="number">4</span> &amp;&amp; <span class="number">5</span>  <span class="comment">//0</span></span><br><span class="line"><span class="comment">//规律：浏览器会把一个false的值返回出来，后面的运算不看</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> &amp;&amp; <span class="number">0</span> &amp;&amp; <span class="built_in">console</span>.log(<span class="number">3</span>) <span class="comment">//console.log(3)会执行吗？</span></span><br><span class="line"><span class="comment">//答案：不会，直接返回0 </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>)<span class="comment">//值是什么？ //undefined</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>&amp;&amp;<span class="number">2</span>&amp;&amp;<span class="number">33</span> <span class="comment">// 3</span></span><br><span class="line"><span class="comment">//规律2：如果与运算中，没有false值，这返回最后一个值。</span></span><br></pre></td></tr></table></figure>


<h3 id="2-3-或运算"><a href="#2-3-或运算" class="headerlink" title="2.3  或运算||"></a>2.3  或运算<code>||</code></h3><p>或是找真值,只要一个是真就是真，说整个式子是真，则返回第一个真值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> || undefeined || <span class="literal">null</span> || <span class="number">1</span>  <span class="comment">// 1 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = b || &#123;&#125; </span><br><span class="line"><span class="comment">//如果b不是一个false值，是一个真值，那么a = b；</span></span><br><span class="line"><span class="comment">//如果b是一个真值，那么a等于空对象&#123;&#125;</span></span><br><span class="line"><span class="comment">//等于下面形式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(b)&#123;</span><br><span class="line">  a = b</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">  a = &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<p>三、 <code>var MYAPP = MYAPP || {};</code>是什么意思</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局命名空间</span></span><br><span class="line"><span class="keyword">var</span> MYAPP = MYAPP || &#123;&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>因为它要确保程序员不乱写代码</p>
</blockquote>
<h2 id="三、-全局命名空间"><a href="#三、-全局命名空间" class="headerlink" title="三、 全局命名空间"></a>三、 全局命名空间</h2><h3 id="3-1-理解全局命名空间"><a href="#3-1-理解全局命名空间" class="headerlink" title="3.1 理解全局命名空间"></a>3.1 理解全局命名空间</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = &#123;&#125; </span><br><span class="line"><span class="comment">//这是一个危险代码，因为你不知道app之前等于是什么，就采取覆盖app</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//应该用if来写,a是我的一个初始化对象。</span></span><br><span class="line"><span class="keyword">if</span>(app)&#123;</span><br><span class="line">  app = app <span class="comment">//废话 没有什么作用</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  a= <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//所以上面形式就可以简化成</span></span><br><span class="line"><span class="keyword">var</span> app = app || &#123;&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-2-全局命名空间的作用"><a href="#3-2-全局命名空间的作用" class="headerlink" title="3.2 全局命名空间的作用"></a>3.2 全局命名空间的作用</h3><p>全局命名空间的作用：以后所以的变量都挂着MYAPP上面,MYAPP包含所以的命名，MYAPP就像一个房间装着所以的属性，所以叫命名空间。</p>
<p>例如<br><code>MYAPP.event ={}</code><br><code>MYAPP.commonMethod={}</code> </p>
<h2 id="四、new是什么？"><a href="#四、new是什么？" class="headerlink" title="四、new是什么？"></a>四、new是什么？</h2><h3 id="4-1-一个例子"><a href="#4-1-一个例子" class="headerlink" title="4.1 一个例子"></a>4.1 一个例子</h3><h4 id="4-1-1-士兵属性与怎么使用士兵"><a href="#4-1-1-士兵属性与怎么使用士兵" class="headerlink" title="4.1.1 士兵属性与怎么使用士兵"></a>4.1.1 士兵属性与怎么使用士兵</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">var</span> 士兵 = &#123;</span><br><span class="line">  ID :<span class="number">1</span>,</span><br><span class="line">  兵种 :<span class="string">"美国大兵"</span></span><br><span class="line">  攻击力 : <span class="number">6</span></span><br><span class="line">  生命值: <span class="number">45</span>,</span><br><span class="line">  行走 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  奔跑 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  死亡 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  防御 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="comment">//怎么使用这个士兵？</span></span><br><span class="line">  兵营.制造（士兵）</span><br></pre></td></tr></table></figure>

<h4 id="4-1-2-多个士兵代码"><a href="#4-1-2-多个士兵代码" class="headerlink" title="4.1.2 多个士兵代码"></a>4.1.2 多个士兵代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果要有100个士兵，是不是重新写100？</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> 士兵<span class="number">2</span> = &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> 士兵<span class="number">3</span> = &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> 士兵<span class="number">4</span> = &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">兵营.制造（士兵<span class="number">2</span>）</span><br><span class="line">兵营.制造（士兵<span class="number">3</span>）</span><br><span class="line">兵营.制造（士兵<span class="number">4</span>）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//为此我们可以用一个循环代码来写</span></span><br><span class="line"><span class="keyword">var</span> 士兵们 = []</span><br><span class="line"><span class="keyword">var</span> 士兵 = &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">  ID :<span class="number">1</span>,</span><br><span class="line">  兵种 :<span class="string">"美国大兵"</span></span><br><span class="line">  攻击力 : <span class="number">6</span></span><br><span class="line">  生命值: <span class="number">45</span>,</span><br><span class="line">  行走 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  奔跑 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  死亡 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  防御 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  士兵们.push(士兵)</span><br><span class="line">&#125;</span><br><span class="line">兵营.批量制造(士兵们)</span><br></pre></td></tr></table></figure>


<h4 id="4-1-3-优化公共代码"><a href="#4-1-3-优化公共代码" class="headerlink" title="4.1.3 优化公共代码"></a>4.1.3 优化公共代码</h4><p> 上面循环代码在内存图里面大量重复代码，我们可以声明一个对象包含它们共同的函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 士兵共有属性 = &#123;</span><br><span class="line">  兵种 :<span class="string">"美国大兵"</span></span><br><span class="line">  攻击力 : <span class="number">6</span></span><br><span class="line">  行走 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  奔跑 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  死亡 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  防御 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> 士兵们 = []</span><br><span class="line">  <span class="keyword">var</span> 士兵 = &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">    士兵 = &#123;</span><br><span class="line">      ID：i，<span class="comment">//ID不能重复</span></span><br><span class="line">      生命值：<span class="number">42</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/* 工作不要这样写，因为__proto__不是标准属性*/</span></span><br><span class="line">士兵.__proto__ =  士兵共有属性</span><br><span class="line"></span><br><span class="line">  士兵们.push(士兵)</span><br><span class="line">&#125;</span><br><span class="line">兵营.批量制造(士兵们)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//上面代码还可以优化</span></span><br><span class="line"><span class="keyword">var</span> 士兵共有属性 = &#123;</span><br><span class="line">  兵种 :<span class="string">"美国大兵"</span></span><br><span class="line">  攻击力 : <span class="number">6</span></span><br><span class="line">  行走 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  奔跑 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  死亡 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  防御 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">create</span>士兵(<span class="params">id</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> 士兵 = &#123;</span><br><span class="line">      ID : id:<span class="comment">//ID不能重复</span></span><br><span class="line">      生命值：<span class="number">41</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 工作不要这样写，因为__proto__不是标准属性*/</span></span><br><span class="line">士兵.__proto__ =  士兵共有属性</span><br><span class="line"><span class="keyword">return</span>   士兵</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用如下</span></span><br><span class="line"><span class="keyword">var</span> 士兵们 = []</span><br><span class="line"><span class="keyword">var</span> 士兵</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">  士兵们.push(create士兵(i))</span><br><span class="line">&#125;</span><br><span class="line">兵营.批量制造(士兵们)</span><br><span class="line"></span><br><span class="line"><span class="comment">//这叫模块化</span></span><br></pre></td></tr></table></figure>

<h4 id="4-1-4-解决优化代码的命名问题"><a href="#4-1-4-解决优化代码的命名问题" class="headerlink" title="4.1.4 解决优化代码的命名问题"></a>4.1.4 解决优化代码的命名问题</h4><p>上面代码命名不好<br>没有人知道“士兵共有属性”与“create士兵”有关联<br>如果离开了“士兵共有属性”这个对象，“create士兵”这个函数就失效了,<br>说明这个“create士兵”函数和士兵共有属性”这个对象是有关系的</p>
<p>那怎么处理？<br>把它们放在一起，直接把“士兵共有属性”这个对象作为这个函数“create士兵”的一个属性</p>
<p>但是，没有办法将这个函数“create士兵”作为这个对象“士兵共有属性”的一个属性，这是因为“create士兵”不是共有属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//var temp = &#123;&#125;</span></span><br><span class="line">  <span class="comment">//this = temp</span></span><br><span class="line">  <span class="comment">//this.__proto__ = create士兵.prototype</span></span><br><span class="line">  <span class="keyword">this</span>.ID = id, </span><br><span class="line">  <span class="keyword">this</span>.生命值 = <span class="number">42</span> <span class="comment">//自有属性</span></span><br><span class="line">  <span class="comment">//return this</span></span><br><span class="line">&#125;</span><br><span class="line">create 士兵.士兵共有属性 = &#123;</span><br><span class="line">  兵种:<span class="string">"美国大兵"</span></span><br><span class="line">  攻击力：<span class="number">5</span></span><br><span class="line">  行走 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  奔跑 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  死亡 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  防御 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> 士兵们 = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++)&#123;</span><br><span class="line">  士兵们.push(<span class="keyword">new</span> create士兵(i))</span><br><span class="line">&#125;</span><br><span class="line">兵营.批量制造(士兵们)</span><br></pre></td></tr></table></figure>



<h4 id="4-1-5-最终优化"><a href="#4-1-5-最终优化" class="headerlink" title="4.1.5 最终优化"></a>4.1.5 最终优化</h4><p>由于new后面的函数是用来创造对象的，所以没有必要在函数前面再写create </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 士兵(<span class="params">id</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//var temp = &#123;&#125;</span></span><br><span class="line">  <span class="comment">//this = temp</span></span><br><span class="line">  <span class="comment">//士兵.prototype =&#123;constructor:士兵&#125;</span></span><br><span class="line">  <span class="comment">//this.__proto__ = create士兵.prototype //3</span></span><br><span class="line">  <span class="keyword">this</span>.ID = id, </span><br><span class="line">  <span class="keyword">this</span>.生命值 = <span class="number">42</span> <span class="comment">//自有属性</span></span><br><span class="line">  <span class="comment">//return this</span></span><br><span class="line">&#125;</span><br><span class="line">士兵.prototype.兵种 = <span class="string">"美国大兵"</span></span><br><span class="line">士兵.prototype.攻击力 = <span class="number">5</span></span><br><span class="line">士兵.prototype = &#123;</span><br><span class="line">  <span class="comment">//共有属性</span></span><br><span class="line">  <span class="keyword">constructor</span>:士兵，</span><br><span class="line">  兵种:"美国大兵"</span><br><span class="line">  攻击力：5</span><br><span class="line">  行走 : function()&#123;&#125;</span><br><span class="line">  奔跑 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  死亡 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  防御 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-总结"><a href="#4-2-总结" class="headerlink" title="4.2 总结"></a>4.2 总结</h3><p>  对象要么是属性，要么是有函数</p>
<p>  new 是给你一个去写一个函数，这个函数可以指定两个东西，一个是自由属性，一个是共有属性。</p>
<h3 id="4-3-new的过程"><a href="#4-3-new的过程" class="headerlink" title="4.3 new的过程"></a>4.3 new的过程</h3><p>new的过程就是帮程序员操作了4个步骤</p>
<ol>
<li>创建一个临时对象</li>
<li>这个临时对象指向this或者这个this指向这个临时对象</li>
<li>这个this的prototype指向这个函数的prototype</li>
<li>return this</li>
</ol>
<p>一个new等于4句话</p>
<h3 id="4-4-关于new的约定"><a href="#4-4-关于new的约定" class="headerlink" title="4.4 关于new的约定"></a>4.4 关于new的约定</h3><p>由于new后面的函数是用来创造对象的，所以没有必要在函数前面再写create。</p>
<h3 id="4-5-思考"><a href="#4-5-思考" class="headerlink" title="4.5 思考"></a>4.5 思考</h3><h4 id="4-5-1当写var-object-new-Object-的时候，到底做了什么？"><a href="#4-5-1当写var-object-new-Object-的时候，到底做了什么？" class="headerlink" title="4.5.1当写var object = new Object()的时候，到底做了什么？"></a>4.5.1当写<code>var object = new Object()</code>的时候，到底做了什么？</h4><p>答: 就是new会给object加上一些自有属性，然后让object.<strong>proto</strong>(object原型)指向Object.prototype</p>
<blockquote>
<p><code>object.__proto___ === Object.prototype</code></p>
</blockquote>
<p>比如我们生成一个var array = new Array(a,b,c),这行代码操作了什么？</p>
<ul>
<li>自有属性0:’a’，1:’b’， 2:’c’;</li>
<li>length:2;</li>
<li>array.<strong>proto</strong> === Array.prototype(指向它构造函数的prototype)，而Array里面又有push、pop等等方法。</li>
<li>Array.prototype.<strong>proto</strong> ==== Object.prototype</li>
</ul>
<p>var fn = new Funciton(‘x’,’y’,’return x+y’)</p>
<ul>
<li>自有属性 length:2</li>
<li>不可见的函数体：’return x+y’</li>
<li>fn.<strong>proto</strong> === Function.prototype</li>
</ul>
<p>Array是一个函数,所以Array.<strong>proto</strong> === Function.prototype。</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>初识this</title>
    <url>/2020/04/03/%E5%88%9D%E8%AF%86this/</url>
    <content><![CDATA[<h2 id="一、结论：this是call的第一个参数"><a href="#一、结论：this是call的第一个参数" class="headerlink" title="一、结论：this是call的第一个参数"></a>一、结论：this是call的第一个参数</h2><h2 id="二、如何调用函数"><a href="#二、如何调用函数" class="headerlink" title="二、如何调用函数"></a>二、如何调用函数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> f.call(asThis,input1,input2)</span><br><span class="line"> <span class="comment">//其中，asThis会被当做 this , [input1,input2]会被当做arguments</span></span><br><span class="line"> <span class="comment">// 禁止使用f(input1,input2)</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//this和arguments</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line">f.call(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="comment">//this为1,arguments为[1,2,3]</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="三、不明白this-是因为你不用call"><a href="#三、不明白this-是因为你不用call" class="headerlink" title="三、不明白this,是因为你不用call"></a>三、不明白this,是因为你不用call</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">items.getSiblings()</span><br><span class="line"><span class="comment">//上面无法确认this，要改写成下面形式</span></span><br><span class="line">item3.getSiblings.call(item3) <span class="comment">//this就是item3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">item3.addCLass([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>])</span><br><span class="line"><span class="comment">//itme3.addCLass.call(item,[a,b,c])</span></span><br></pre></td></tr></table></figure>


<h2 id="四、this的四种绑定规则"><a href="#四、this的四种绑定规则" class="headerlink" title="四、this的四种绑定规则"></a>四、this的四种绑定规则</h2><h3 id="4-1-默认绑定"><a href="#4-1-默认绑定" class="headerlink" title="4.1 默认绑定"></a>4.1 默认绑定</h3><p>比如我们创建一个函数，函数里面直接输出this,然后在全局范围内调用函数，结果在控制台输出window对象，这就是默认绑定，函数被调用的时候，this默认指向全局window对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">girl</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line">girl();</span><br><span class="line"></span><br><span class="line"><span class="comment">//控制台输出window对象</span></span><br></pre></td></tr></table></figure>

<h3 id="4-2-隐式绑定、显式绑定、new-绑定"><a href="#4-2-隐式绑定、显式绑定、new-绑定" class="headerlink" title="4.2 隐式绑定、显式绑定、new 绑定"></a>4.2 隐式绑定、显式绑定、new 绑定</h3><h3 id="五、-相关例子思考"><a href="#五、-相关例子思考" class="headerlink" title="五、 相关例子思考"></a>五、 相关例子思考</h3><h4 id="5-1-onclick中this是什么"><a href="#5-1-onclick中this是什么" class="headerlink" title="5.1 onclick中this是什么"></a>5.1 onclick中this是什么</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">button.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//this是什么？</span></span><br><span class="line"><span class="comment">//根据mdn文档可是，这里的this是触发事件的元素也就是button</span></span><br></pre></td></tr></table></figure>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalEventHandlers/onclick" target="_blank" rel="noopener">MDN文档中onclick资料</a></p>
<h4 id="5-2-addEventLister中this是什么"><a href="#5-2-addEventLister中this是什么" class="headerlink" title="5.2 addEventLister中this是什么"></a>5.2 addEventLister中this是什么</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">button.addEventLister(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//this是什么？</span></span><br><span class="line"><span class="comment">//根据mdn文档可是，这里的this是该元素的引用 button</span></span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">[MDN文档中addEventListener资料](https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#### 5.3 jQuery中this是什么</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span> JavaScript</span><br><span class="line">$(<span class="string">'ul'</span>).on(<span class="string">'click'</span>,<span class="string">'li'</span><span class="comment">/*selector*/</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//this是什么？</span></span><br><span class="line"><span class="comment">//这里的this则代表了与selector相匹配的元素</span></span><br><span class="line"><span class="comment">//li元素</span></span><br></pre></td></tr></table></figure>
<p><a href="https://www.jquery123.com/on/" target="_blank" rel="noopener">.on() : 在选定的元素上绑定一个或多个事件处理函数</a></p>
<p><a href="https://api.jquery.com/on/" target="_blank" rel="noopener">.on() /| jQuery API Documentation</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="5-4-确定this的方法"><a href="#5-4-确定this的方法" class="headerlink" title="5.4 确定this的方法"></a>5.4 确定this的方法</h3><p>确定this的方法是看call的第一个参数，如果没有call，就要去看源码或相关文档确认。</p>
<h2 id="六、-三道复杂的this题"><a href="#六、-三道复杂的this题" class="headerlink" title="六、 三道复杂的this题"></a>六、 三道复杂的this题</h2><h3 id="6-1-第一题"><a href="#6-1-第一题" class="headerlink" title="6.1 第一题"></a>6.1 第一题</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//请问是A被调用还是B被调用，打印出来的是什么？</span></span><br><span class="line"><span class="comment">//B    </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">X</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> object = &#123;</span><br><span class="line">    name:<span class="string">'object'</span>,</span><br><span class="line">    f1(x)&#123;</span><br><span class="line">      x.f2()</span><br><span class="line">    &#125;,</span><br><span class="line">    f2()&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>)<span class="comment">//A</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">  name:<span class="string">'options'</span>,</span><br><span class="line">  f1(x)&#123;&#125;,</span><br><span class="line">  f2()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)<span class="comment">//B</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = X()</span><br><span class="line">x.f1(options)</span><br></pre></td></tr></table></figure>


<h3 id="6-2-第二题"><a href="#6-2-第二题" class="headerlink" title="6.2 第二题"></a>6.2 第二题</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//请问是C被调用还是D被调用，打印出来object还是options?？</span></span><br><span class="line"><span class="comment">//D options</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">X</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> object = &#123;</span><br><span class="line">    name:<span class="string">'object'</span>,</span><br><span class="line">    f1(x)&#123;</span><br><span class="line">      x.f2.call(<span class="keyword">this</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    f2()&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>)<span class="comment">//C object/options?</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">  name:<span class="string">'options'</span>,</span><br><span class="line">  f1()&#123;&#125;,</span><br><span class="line">  f2()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)<span class="comment">//D obejctions?</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = X()</span><br><span class="line">x.f1(options)</span><br></pre></td></tr></table></figure>

<h3 id="6-3-第三题"><a href="#6-3-第三题" class="headerlink" title="6.3 第三题"></a>6.3 第三题</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">X</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> object = &#123;</span><br><span class="line">    name:<span class="string">'object'</span>,</span><br><span class="line">    options:<span class="literal">null</span>,</span><br><span class="line">    f1(x)&#123;</span><br><span class="line">      <span class="keyword">this</span>.options = x</span><br><span class="line">      <span class="keyword">this</span>.f2()</span><br><span class="line">    &#125;,</span><br><span class="line">    f2(x)&#123;</span><br><span class="line">      <span class="keyword">this</span>.option.f2.call(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">  name:<span class="string">'options'</span>,</span><br><span class="line">  f1()&#123;&#125;,</span><br><span class="line">  f2()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>) <span class="comment">//this 是什么？</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = X()</span><br><span class="line">x.f1(options)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//答案是：object</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>原型与原型链</title>
    <url>/2020/04/03/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    <content><![CDATA[<h2 id="全局对象"><a href="#全局对象" class="headerlink" title="全局对象"></a>全局对象</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul>
<li>在ECMA规定全局对象叫做global，在浏览器中把window叫做全局对象</li>
<li>window就是一个哈希表，有很多的属性，在控制台打开输入window返回，就是出现相关属性</li>
<li>window的属性就是全局变量</li>
</ul>
<p><img src="https://i.loli.net/2019/12/14/BUuyR9LTa8z3pob.png" alt="控制台查看window全部属性.png"></p>
<h3 id="全局对象的分类"><a href="#全局对象的分类" class="headerlink" title="全局对象的分类"></a>全局对象的分类</h3><h4 id="一种是ECMAScript标准规定的"><a href="#一种是ECMAScript标准规定的" class="headerlink" title="一种是ECMAScript标准规定的"></a>一种是ECMAScript标准规定的</h4><p>如</p>
<ul>
<li>global.parseInt</li>
<li>global.parseFloat</li>
<li>global.Number</li>
<li>global.String</li>
<li>global.Boolean</li>
<li>global.Object</li>
<li>等等</li>
</ul>
<a id="more"></a>

<h4 id="另一种是浏览器自己加的属性-私有，Chrome-Fire-fox"><a href="#另一种是浏览器自己加的属性-私有，Chrome-Fire-fox" class="headerlink" title="另一种是浏览器自己加的属性(私有，Chrome/Fire fox)"></a>另一种是浏览器自己加的属性(私有，Chrome/Fire fox)</h4><p>如</p>
<ul>
<li>window.alert 弹框提示</li>
<li>window.prompt 用户填写</li>
<li>window.comfirm  确定</li>
<li>window.console.log  开发者–打印</li>
<li>window.console.dir 在控制台中显示指定JavaScript对象的属性，并通过类似文件树样式的交互列表显示</li>
<li>window.document</li>
<li>window.document.createElement</li>
<li>window.document.getElementById</li>
<li>window.setTimeout</li>
</ul>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window" target="_blank" rel="noopener">在mdn查看window属性</a></p>
<h2 id="全局函数"><a href="#全局函数" class="headerlink" title="全局函数"></a>全局函数</h2><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><p><code>var n = 1</code><br><code>var n2 = new Number(1)</code>创建一个Number对象<br>1 与new Number(1)的区别是什么？<br>1就是一个1而已，而Number(1)，除了1，还有一些关于1的函数</p>
<p><img src="https://i.loli.net/2019/12/14/X5YGOL6b7yCKZTA.png" alt="Number函数情况.png"></p>
<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p><code>var s = &#39;hello&#39;</code><br><code>var s2 = new String(&#39;hello&#39;)</code>创建一个String对象<br>‘hello’与new String(‘hello’)的区别是什么？<br>‘hello’是基本字符串，而new String(‘hello’)是一个对象的哈希</p>
<p><img src="https://i.loli.net/2019/12/14/EbCi8FQ562Itxne.png" alt="string与string对象的区别.png"></p>
<p>常见的String()API有</p>
<ul>
<li>charAt(x) 第x个字符是什么</li>
<li>charCodeAt(x) 第x个字符的Uncode编点是什么</li>
<li>trim()  去除空格</li>
<li>concat  连接连个字符串</li>
<li>slice(开始位置,数量) 切片，方法提取某个字符串的一部分，并返回一个新的字符串，且不会改动原字符串。</li>
<li>replace() 替换字符串，方法返回一个由替换值（replacement）替换一些或所有匹配的模式（pattern）后的新字符串。</li>
<li>includes() 方法用于判断一个字符串是否包含在另一个字符串中，根据情况返回 true 或 false。</li>
</ul>
<p><img src="https://i.loli.net/2019/12/14/XFHKIZTD8k76BpQ.png" alt="String对象的部分API.png"></p>
<h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h3><p><code>var b2 = new Boolean(true)</code>创建一个Boolean对象<br>true与new Boolean(true)的区别是什么？<br>true是布尔值true，而new Boolean(true)是Boolean对象<br><img src="https://i.loli.net/2019/12/14/l6THjGIoJWt1wfF.png" alt="Boolean对象.png"></p>
<h4 id="考题"><a href="#考题" class="headerlink" title="考题"></a>考题</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="literal">false</span></span><br><span class="line"><span class="keyword">var</span> f2 = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>)</span><br><span class="line"><span class="keyword">if</span>(f)&#123;<span class="built_in">console</span>.log(<span class="number">1</span>)&#125;</span><br><span class="line"><span class="keyword">if</span>(f2)&#123;<span class="built_in">console</span>.log(<span class="number">2</span>)&#125;</span><br><span class="line">请问会打印<span class="number">1</span>还是<span class="number">2</span>？</span><br></pre></td></tr></table></figure>

<p>答案是2</p>
<p>解题思路</p>
<ol>
<li>因为根据对象是返回是true</li>
<li>所以f2是一个对象</li>
<li>所以可以通过if语句，打印出2</li>
</ol>
<h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><p><code>var o1 = {}</code><br><code>var o2 = new Object()</code><br>o1与o2一样可以新建对象，但是o1 === o2 是false，因为它们在heap内存存储位置是不相同的</p>
<p><img src="https://i.loli.net/2019/12/14/mBxfed5uEQIhTwi.png" alt="Object对象.png"> </p>
<h2 id="公用属性（原型）（prototype）"><a href="#公用属性（原型）（prototype）" class="headerlink" title="公用属性（原型）（prototype）"></a>公用属性（原型）（prototype）</h2><p>JavaScript把toString和valueOf放在一个对象里（公用属性组成的对象），然后让每个对象的<strong>prototype</strong>存储这个（公用属性组成的对象）的地址</p>
<h3 id="Number对象原型链"><a href="#Number对象原型链" class="headerlink" title="Number对象原型链"></a>Number对象原型链</h3><p>每个Number对象有个proto指向公用的Number对象，而公用的Number对象的proto会指向Object的属性<br><img src="https://i.loli.net/2019/12/14/jrU2I1VWRJbaKm9.png" alt="Number对象原型链.png"></p>
<h3 id="String对象原型链"><a href="#String对象原型链" class="headerlink" title="String对象原型链"></a>String对象原型链</h3><p>每个String对象有个proto指向公用的String对象，而公用的String对象的proto会指向Object的属性<br><img src="https://i.loli.net/2019/12/14/pmo4gcD3l5ef8Wt.png" alt="String对象原型链.png"></p>
<h3 id="Boolean对象原型链"><a href="#Boolean对象原型链" class="headerlink" title="Boolean对象原型链"></a>Boolean对象原型链</h3><p>每个Boolean对象有个proto指向公用的Boolean对象，而公用的Boolean对象的proto会指向Object的属性<br><img src="https://i.loli.net/2019/12/14/GwpyEMWvmBIengh.png" alt="Boolean对象原型链.png"></p>
<h3 id="Object对象原型链"><a href="#Object对象原型链" class="headerlink" title="Object对象原型链"></a>Object对象原型链</h3><p>每个Object对象有个proto指向公用的Object对象,而公用的Boolean对象的proto是null<br><img src="https://s2.ax1x.com/2019/12/14/QWpJKS.png" alt="Object对象原型链.png"></p>
<h3 id="它们之间的联系"><a href="#它们之间的联系" class="headerlink" title="它们之间的联系"></a>它们之间的联系</h3><p><img src="https://i.loli.net/2019/12/14/nsI93CqYkPf6UDc.png" alt="原型关系图.png"></p>
<p>String.prototype是String的公用属性的引用<br>s.<strong>prototype</strong>是String的公用属性的引用</p>
<h2 id="重要公式"><a href="#重要公式" class="headerlink" title="重要公式"></a>重要公式</h2><p><code>var 对象 = new 函数（）</code><br><code>对象.__proto__ === 对象的构造函数.prototype</code></p>
<p>上面两行一起看</p>
<h2 id="proto-和-prototype-的区别是什么？"><a href="#proto-和-prototype-的区别是什么？" class="headerlink" title="__proto__ 和 prototype 的区别是什么？"></a><code>__proto__ 和 prototype</code> 的区别是什么？</h2><ol>
<li>不能断章取义，<strong>proto</strong> 和 prototype 只是两个 key 而已</li>
<li>我们一般研究对象的<strong>proto</strong>和函数的prototype</li>
<li>对象.<strong>proto</strong> === 某函数.prototype</li>
<li>如果把函数看成对象，那么函数.<strong>proto</strong> === Function.prototype</li>
<li>如果把 Function 看成对象，那么 Function.<strong>proto</strong> === Function.prototype</li>
</ol>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>实现一个 jQuery 的 API</title>
    <url>/2020/04/03/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%20jQuery%20%E7%9A%84%20API/</url>
    <content><![CDATA[<h2 id="JQuery是什么"><a href="#JQuery是什么" class="headerlink" title="JQuery是什么"></a>JQuery是什么</h2><p>jQuery是一个JavaScript函数库。jQuery是一个轻量级的”写的少，做的多”的JavaScript库。JQuery实质上是一个构造函数，接受一个参数，这个参数可能是节点，然后返回一个方法对象去操作节点(方法使用了闭包)</p>
<h2 id="要实现的目标"><a href="#要实现的目标" class="headerlink" title="要实现的目标"></a>要实现的目标</h2><p>让页面中div添加一个class和改变div的textContent。给div加个名为“red”的类名，将div的textContent内容更改为“hi”。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQuery = ???</span><br><span class="line">  <span class="built_in">window</span>.$ = jQuery</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> $div = $(<span class="string">'div'</span>)</span><br><span class="line">  $div.addClass(<span class="string">'red'</span>) <span class="comment">// 可将所有 div 的 class 添加一个 red</span></span><br><span class="line">  $div.setText(<span class="string">'hi'</span>) <span class="comment">// 可将所有 div 的 textContent 变为 hi</span></span><br></pre></td></tr></table></figure>

<h3 id="第一步-封装两个函数，并命名空间"><a href="#第一步-封装两个函数，并命名空间" class="headerlink" title="第一步 封装两个函数，并命名空间"></a>第一步 封装两个函数，并命名空间</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQuery = <span class="function"><span class="keyword">function</span>(<span class="params">nodeOrSelector</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> nodes = &#123;&#125;</span><br><span class="line">  nodes.addClass = <span class="function"><span class="keyword">function</span>(<span class="params">classes</span>)</span>&#123;&#125;</span><br><span class="line">  nodes.setText = <span class="function"><span class="keyword">function</span>(<span class="params">text</span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> nodes</span><br></pre></td></tr></table></figure>
<p>命名空间是一种设计模式，将不同的函数封装在函数库中并给函数库命名。<br>有两个主要好处<br>1.是知道库的名字方便调用<br>2.避免覆盖全局变量，发生标识符冲突</p>
<a id="more"></a>

<h3 id="第二步-判断传入参数是节点还是选择器"><a href="#第二步-判断传入参数是节点还是选择器" class="headerlink" title="第二步 判断传入参数是节点还是选择器"></a>第二步 判断传入参数是节点还是选择器</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQuery = <span class="function"><span class="keyword">function</span>(<span class="params">nodeOrSelector</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> nodes = &#123;&#125;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> nodeOrSelector === <span class="string">'string'</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> temp = <span class="built_in">document</span>.querySelectorAll(nodeOrSelector)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">0</span>;i&lt;temp.length;i++)&#123;</span><br><span class="line">      nodes[i] = temp[i] </span><br><span class="line">    &#125;</span><br><span class="line">    nodes.length = temp.length</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nodeOrSelector <span class="keyword">instanceof</span> Node)&#123;</span><br><span class="line">    nodes =&#123;</span><br><span class="line">      <span class="number">0</span>:nodeOrSelector,</span><br><span class="line">      length:<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="第三步-添加class属性"><a href="#第三步-添加class属性" class="headerlink" title="第三步 添加class属性"></a>第三步 添加class属性</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用了forEach来遍历nodes里面节点元素并过滤掉不是标签的元素，然后使用for循环为标签添加class</span></span><br><span class="line"> nodes.addClass = <span class="function"><span class="keyword">function</span>(<span class="params">classes</span>)</span>&#123;</span><br><span class="line">    classes.forEach(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123; </span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;nodes.length;i++)&#123;</span><br><span class="line">        nodes[i].classList.add(value)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="第四步-判断text，没有则添加text，有则获取textContent"><a href="#第四步-判断text，没有则添加text，有则获取textContent" class="headerlink" title="第四步 判断text，没有则添加text，有则获取textContent"></a>第四步 判断text，没有则添加text，有则获取textContent</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//textContent实现不加参数就是获取文本，加参数就是加入或替换文本。</span></span><br><span class="line">nodes.SetText = <span class="function"><span class="keyword">function</span>(<span class="params">text</span>)</span>&#123;</span><br><span class="line"><span class="comment">//判断参数是否是空</span></span><br><span class="line">    <span class="keyword">if</span>(text === <span class="literal">undefined</span>)&#123;</span><br><span class="line">      <span class="keyword">var</span> texts = []</span><br><span class="line"><span class="comment">//遍历节点，将文本添加到数组中</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;nodes.length;i++)&#123;</span><br><span class="line">        text.push(nodes[i].textContext)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> texts</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//遍历节点，将节点文本设置成文本</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;nodes.length;i++)&#123;</span><br><span class="line">        nodes[i].textContent = text</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="第五步-再给个缩写吧-alias"><a href="#第五步-再给个缩写吧-alias" class="headerlink" title="第五步 再给个缩写吧 alias"></a>第五步 再给个缩写吧 alias</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.$ = jQuery</span><br></pre></td></tr></table></figure>
<p>然后输入找到我们要操作的对象所需的参数’div’,来找到所有的div<br>再把这个函数赋值给变量，方便后面的调用，注意在变量前面加上$,表示是对jQuery函数的调用</p>
<h3 id="第六步-总结"><a href="#第六步-总结" class="headerlink" title="第六步 总结"></a>第六步 总结</h3><p>nodes运用了闭包（闭包：操作一个你访问不到的变量）</p>
<h2 id="具体代码查看"><a href="#具体代码查看" class="headerlink" title="具体代码查看"></a>具体代码查看</h2><p><a href="http://js.jirengu.com/pewovifolu/2/edit" target="_blank" rel="noopener">实现一个 jQuery 的 API</a></p>
]]></content>
      <tags>
        <tag>JQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>普通类型和对象的区别</title>
    <url>/2020/04/03/%E6%99%AE%E9%80%9A%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h2 id="内存图"><a href="#内存图" class="headerlink" title="内存图"></a>内存图</h2><p>JS引擎将内存分为代码区与数据区<br>数据区分为Stack(栈内存)和Heap(堆内存)</p>
<p>简单类型的数据直接存在Stack里面<br>复杂类型的数据是把Heap的地址存在Stack里面</p>
<h2 id="内存四个面试题"><a href="#内存四个面试题" class="headerlink" title="内存四个面试题"></a>内存四个面试题</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">第一题</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span> </span><br><span class="line"><span class="keyword">var</span> b = a</span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">请问a显示多少</span><br><span class="line"></span><br><span class="line">第二题</span><br><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">name</span>:<span class="string">'a'</span>&#125;</span><br><span class="line"><span class="keyword">var</span> b = a</span><br><span class="line">b = &#123;<span class="attr">name</span>:<span class="string">'b'</span>&#125;</span><br><span class="line">请问现在a.name是多少</span><br><span class="line"></span><br><span class="line">第三题</span><br><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">name</span>:<span class="string">'a'</span>&#125;</span><br><span class="line"><span class="keyword">var</span> b = a</span><br><span class="line">b.name = <span class="string">'b'</span></span><br><span class="line">请问现在a.name是多少</span><br><span class="line"></span><br><span class="line">第四题</span><br><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">name</span>:<span class="string">'a'</span>&#125;</span><br><span class="line"><span class="keyword">var</span> b = a</span><br><span class="line">b = <span class="literal">null</span></span><br><span class="line">请问现在a是什么？</span><br></pre></td></tr></table></figure>

<a id="more"></a>


<h2 id="答案解析"><a href="#答案解析" class="headerlink" title="答案解析"></a>答案解析</h2><h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><p>var a = 1 ===&gt; 在stack里面存储了a = 1<br>var b = a ===&gt; 然后stack里复制一行a = 1 这个就是b=a<br>b = 2 ==&gt; 最后将b=1 那行改为b=2<br>所以可得a = 1</p>
<h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3><p>var a = {name:’a’} ===&gt; 在stack里面存储a对象的地址，引用在Heap存储{name:’a’}<br>var b = a  ===&gt; 然后在stack里面复制a对象的地址一行，然后引用Heap存储{name:’a’}<br>b = {name:’b’} ===&gt; 然后在Heap存储，新建一个{name:’b’}<br>所以可得a.name是a</p>
<h3 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h3><p>var a = {name:’a’} ===&gt; 在stack里面存储a对象的地址，引用在Heap存储{name:’a’}<br>var b = a  ===&gt; 然后在stack里面复制a对象的地址一行，然后引用Heap存储{name:’a’}<br>b.name = ‘b’ ===&gt; 然后在Heap存储,将Heap存储{name:’a’}改为{name:’b’}<br>所以可得a.name是b</p>
<h3 id="第四题"><a href="#第四题" class="headerlink" title="第四题"></a>第四题</h3><p>var a = {name:’a’} ===&gt; 在stack里面存储a对象的地址，引用在Heap存储{name:’a’}<br>var b = a ===&gt; 然后在stack里面复制a对象的地址一行，然后引用Heap存储{name:’a’}<br>b = null ===&gt; 然后在stack里面b那行，改为null<br>所以可得a = {name:a}</p>
<h2 id="引用类型面试及答案分析"><a href="#引用类型面试及答案分析" class="headerlink" title="引用类型面试及答案分析"></a>引用类型面试及答案分析</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">n</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">var</span> b = a:</span><br><span class="line">a.x  = a = &#123;<span class="attr">n</span>:<span class="number">2</span>&#125;</span><br><span class="line">alert(a.x)<span class="comment">// undefined</span></span><br><span class="line">alert(b.x)<span class="comment">//[object object]</span></span><br></pre></td></tr></table></figure>

<ol>
<li>在stack里面存储a对象的地址ADDR34，引用在Heap存储{n:1}</li>
<li>然后在stack里面复制a对象的地址ADDR34一行，然后引用Heap存储{n:1}</li>
<li>因为浏览器先算左边再算右边，所以a.x是ADDR34 【难点】在a变值之前已经定好了</li>
<li>a = {n:2} 在stack里面a对象地址改为ADDR54,引用Heap新存储{n:2}；</li>
<li>在Heap34的{n:1}里面新增一个x：ADDR54</li>
<li>a.x也是在ADDR54对象里面，所以它没有值==undefined</li>
<li>b.x也是在ADDR34对象里面，它是x:ADDR54，因为会调用tostring方法，所以会返回[object object]</li>
</ol>
<h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><p>如果一个对象没有被引用，它就是垃圾将被回收</p>
<p>IE6有bug，会导致内存泄漏</p>
<h2 id="浅拷贝与深拷贝"><a href="#浅拷贝与深拷贝" class="headerlink" title="浅拷贝与深拷贝"></a>浅拷贝与深拷贝</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> b = a</span><br><span class="line">b = <span class="number">2</span> <span class="comment">//这个时候改变了b</span></span><br><span class="line"><span class="comment">//但a完全不受b的影响，那么我们就说这个是一个深拷贝</span></span><br></pre></td></tr></table></figure>

<h3 id="浅拷贝与深拷贝的区别"><a href="#浅拷贝与深拷贝的区别" class="headerlink" title="浅拷贝与深拷贝的区别"></a>浅拷贝与深拷贝的区别</h3><p>对于简单类型的数据来说，赋值就是深拷贝<br>对于复杂类型的数据（对象）来说，才要区分浅拷贝与深拷贝</p>
<h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">name</span>:<span class="string">'a'</span>&#125;</span><br><span class="line"><span class="keyword">var</span> b = a</span><br><span class="line">b.name = <span class="string">'b'</span></span><br><span class="line">a.name === <span class="string">'b'</span> <span class="comment">//true</span></span><br><span class="line"><span class="comment">//b改变导致a改变，这个就是浅拷贝</span></span><br></pre></td></tr></table></figure>

<h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">name</span>:<span class="string">'a'</span>&#125;</span><br><span class="line"><span class="keyword">var</span> b = deepClone(a)</span><br><span class="line">b.name = <span class="string">'b'</span></span><br><span class="line">a.name === <span class="string">'a'</span> <span class="comment">//true </span></span><br><span class="line"><span class="comment">//b改变不导致a改变，这个就是深拷贝</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>理解HTML之a标签、input标签、form标签、table标签</title>
    <url>/2020/04/03/%E7%90%86%E8%A7%A3HTML%E4%B9%8Ba%E6%A0%87%E7%AD%BE%E3%80%81input%E6%A0%87%E7%AD%BE%E3%80%81form%E6%A0%87%E7%AD%BE%E3%80%81table%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<h2 id="一、a标签"><a href="#一、a标签" class="headerlink" title="一、a标签"></a>一、a标签</h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><p>a标签定义超链接，用于从一张页面链接到另一张页面。</p>
<h3 id="1-2-属性"><a href="#1-2-属性" class="headerlink" title="1.2 属性"></a>1.2 属性</h3><h4 id="1-2-1-download"><a href="#1-2-1-download" class="headerlink" title="1.2.1 download"></a>1.2.1 download</h4><p>该属性提示用户将其保存为本地文件</p>
<p>例子：<br><code>&lt;a href=&quot;/images/baiduimage.jpg&quot; download=&quot;baidulogo&quot;&gt;</code></p>
<h4 id="1-2-2-href"><a href="#1-2-2-href" class="headerlink" title="1.2.2 href"></a>1.2.2 href</h4><p>该属性指示链接的目标。</p>
<p>例子：<br><code>&lt;a href=&quot;http://www.baidu.com&quot;&gt;baidu&lt;/a&gt;</code></p>
<h5 id="javascript-伪协议"><a href="#javascript-伪协议" class="headerlink" title="javascript 伪协议"></a>javascript 伪协议</h5><p>例子：<code>&lt;a href=&quot;javascript:;&quot;&gt;&lt;/a&gt;</code></p>
<p>为什么要有 javascript 伪协议：</p>
<ul>
<li>可以在用户点击 a 时执行一段 javascript 代码</li>
<li>在地址栏输入<code>javascript:alert(1)</code> 可以在当前页面执行一段代码</li>
<li>伪协议可以实现「点击之后没有任何动作的 a 标签」，满足一些奇葩需求</li>
</ul>
<a id="more"></a>

<h5 id="href注意事项"><a href="#href注意事项" class="headerlink" title="href注意事项"></a>href注意事项</h5><ol>
<li><code>http://xxx.com</code>链接写法</li>
<li>不写http或者https，写<code>/</code>,则打开为当前协议（无协议地址写法）</li>
<li>写相关路径，xxx.html，指引目标为参考</li>
<li>锚点 /xxx  锚点为页面中点跳转，不发起请求</li>
<li><code>name=xxx</code>，这样写很自然，发起get请求</li>
<li>伪协议”javascript：alert(1);” 历史遗留问题，一般用法：javascript:; 点击后，不要跳转，满足奇葩要求。</li>
<li>“” 空的话，就会刷新页面</li>
</ol>
<h4 id="1-2-3-rel"><a href="#1-2-3-rel" class="headerlink" title="1.2.3 rel"></a>1.2.3 rel</h4><p>该属性规定当前文档与被链接文档之间的关系。</p>
<p>作用介绍：</p>
<ul>
<li>rel属性是指定连接的关系类型，表明所连接的文档和此连接的关系;</li>
<li>把这个属性根据实际情况写的话， 对于搜索引擎来说，会起到一定的链接作用。特别是在html5中，部分属性还专门为浏览器或搜索引擎而提供的;</li>
</ul>
<p>例子<br><code>&lt;a rel=&quot;friend&quot; href=&quot;http://www.baidu.com&quot;&gt;baidu&lt;/a&gt;</code></p>
<h4 id="1-2-4-target"><a href="#1-2-4-target" class="headerlink" title="1.2.4 target"></a>1.2.4 target</h4><p>该属性指定在何处显示链接的资源。</p>
<h5 id="显示选项"><a href="#显示选项" class="headerlink" title="显示选项"></a>显示选项</h5><ul>
<li>_self:默认值，自己页面打开</li>
<li>_blank:空页面打开</li>
<li>_parent:与iframe结合，在父页面打开，在iframe外，整个界面打开</li>
<li>_top:效果与_parent一样，要在祖宗三代页面才有其他效果，是最大的页面打开。</li>
</ul>
<h3 id="1-3-考点"><a href="#1-3-考点" class="headerlink" title="1.3 考点"></a>1.3 考点</h3><ol>
<li><code>&lt;a target=&quot;_top&quot; href=&quot;xxx&quot;&gt;&lt;/a&gt;</code>是在顶层窗口或 iframe窗口打开新页面</li>
<li><code>&lt;a target=&quot;xxx&quot; href=&quot;xxx&quot;&gt;&lt;/a&gt;</code>是在name 为 xxx 的窗口或 iframe窗口打开新页面</li>
<li><code>&lt;a href=&quot;&quot;&gt;link&lt;/a&gt;</code> 标签被点击后 当前页面刷新</li>
<li><code>&lt;a href=&quot;/..&quot;&gt;link&lt;/a&gt;</code> 标签被点击后 浏览器发起 GET / HTTP/1.1 的请求</li>
<li><code>&lt;a href=&quot;#&quot;&gt;link&lt;/a&gt;</code> 标签被点击后 页面锚点变成 <code>#</code>,页面滚动到顶部</li>
</ol>
<h2 id="二、input标签"><a href="#二、input标签" class="headerlink" title="二、input标签"></a>二、input标签</h2><h3 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h3><p><code>&lt;input&gt;</code> 标签规定用户可输入数据的输入字段。<br>根据不同的 type 属性，输入字段有多种形态。输入字段可以是文本字段、复选框、密码字段、单选按钮、按钮等等。</p>
<h3 id="2-2-type"><a href="#2-2-type" class="headerlink" title="2.2 type"></a>2.2 type</h3><h4 id="2-2-1-type-”button”-定义可点击的按钮"><a href="#2-2-1-type-”button”-定义可点击的按钮" class="headerlink" title="2.2.1 type=”button”:定义可点击的按钮"></a>2.2.1 type=”button”:定义可点击的按钮</h4><p><code>&lt;input type=&quot;button&quot; value=&quot;点我&quot; onclick=&quot;msg()&quot;&gt;</code></p>
<h4 id="2-2-2-type-”checkbox”-定义复选框"><a href="#2-2-2-type-”checkbox”-定义复选框" class="headerlink" title="2.2.2 type=”checkbox”:定义复选框"></a>2.2.2 type=”checkbox”:定义复选框</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;vehicle[]&quot; value&#x3D;&quot;Bike&quot;&gt; 一辆自行车&lt;br&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;vehicle[]&quot; value&#x3D;&quot;Car&quot;&gt; 一辆小轿车&lt;br&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;vehicle[]&quot; value&#x3D;&quot;Boat&quot;&gt;一艘船&lt;br&gt;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-3-type-”email”用于编辑-e-mail-的字段。-合适的时候可以使用-valid-和-invalid-CSS-伪类。"><a href="#2-2-3-type-”email”用于编辑-e-mail-的字段。-合适的时候可以使用-valid-和-invalid-CSS-伪类。" class="headerlink" title="2.2.3 type=”email”用于编辑 e-mail 的字段。 合适的时候可以使用 :valid 和 :invalid CSS 伪类。"></a>2.2.3 type=”email”用于编辑 e-mail 的字段。 合适的时候可以使用 :valid 和 :invalid CSS 伪类。</h4><p><code>E-mail: &lt;input type=&quot;email&quot; name=&quot;usremail&quot;&gt;</code></p>
<h4 id="2-2-4-type-”password-“-定义密码字段（密码字段中的字符会被遮蔽）"><a href="#2-2-4-type-”password-“-定义密码字段（密码字段中的字符会被遮蔽）" class="headerlink" title="2.2.4 type=”password “:定义密码字段（密码字段中的字符会被遮蔽）"></a>2.2.4 type=”password “:定义密码字段（密码字段中的字符会被遮蔽）</h4><p><code>&lt;input type=&quot;password&quot; name=&quot;pwd&quot;&gt;</code></p>
<h4 id="2-2-5-type-”radio”-定义单选按钮。"><a href="#2-2-5-type-”radio”-定义单选按钮。" class="headerlink" title="2.2.5 type=”radio”:定义单选按钮。"></a>2.2.5 type=”radio”:定义单选按钮。</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;gender&quot; value&#x3D;&quot;male&quot;&gt; Male&lt;br&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;gender&quot; value&#x3D;&quot;女&quot;&gt; 女</span><br></pre></td></tr></table></figure>

<h4 id="2-2-6-type-”submit”-用于提交表单的按钮"><a href="#2-2-6-type-”submit”-用于提交表单的按钮" class="headerlink" title="2.2.6 type=”submit”:用于提交表单的按钮"></a>2.2.6 type=”submit”:用于提交表单的按钮</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;submit&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>如果form表单，只有一个按钮<code>&lt;button&gt;</code>,它就会自动升级为sumbit提交按钮</p>
<h4 id="2-2-7-type-”text”-单行字段；换行会将自动从输入的值中移除。"><a href="#2-2-7-type-”text”-单行字段；换行会将自动从输入的值中移除。" class="headerlink" title="2.2.7 type=”text”:单行字段；换行会将自动从输入的值中移除。"></a>2.2.7 type=”text”:单行字段；换行会将自动从输入的值中移除。</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">First name: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;fname&quot;&gt;&lt;br&gt;</span><br><span class="line">Last name: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;lname&quot;&gt;&lt;br&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-select-下拉选择"><a href="#2-3-select-下拉选择" class="headerlink" title="2.3 select 下拉选择"></a>2.3 select 下拉选择</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select name&#x3D;&quot;select&quot;&gt;</span><br><span class="line">  &lt;option value&#x3D;&quot;value1&quot;&gt;Value 1&lt;&#x2F;option&gt; </span><br><span class="line">  &lt;option value&#x3D;&quot;value2&quot; selected&gt;Value 2&lt;&#x2F;option&gt;</span><br><span class="line">  &lt;option value&#x3D;&quot;value3&quot; disabled&gt;Value 3&lt;&#x2F;option&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>
<p>selected 默认选中<br>disabled 不能选中</p>
<h3 id="2-4-textarea-文本输入框"><a href="#2-4-textarea-文本输入框" class="headerlink" title="2.4 textarea 文本输入框"></a>2.4 textarea 文本输入框</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;textarea name&#x3D;&quot;textarea&quot; rows&#x3D;&quot;10&quot; cols&#x3D;&quot;50&quot;&gt;Write something here&lt;&#x2F;textarea&gt;</span><br></pre></td></tr></table></figure>

<p>style=”resize:none” 固定大小，具体大小用CSS控制</p>
<h2 id="三、form标签"><a href="#三、form标签" class="headerlink" title="三、form标签"></a>三、form标签</h2><h3 id="3-1-定义"><a href="#3-1-定义" class="headerlink" title="3.1 定义"></a>3.1 定义</h3><p><code>&lt;form&gt;</code> 标签用于为用户输入创建 HTML 表单。表单用于向服务器传输数据。</p>
<h3 id="3-2-属性"><a href="#3-2-属性" class="headerlink" title="3.2 属性"></a>3.2 属性</h3><h4 id="3-2-1-method"><a href="#3-2-1-method" class="headerlink" title="3.2.1 method"></a>3.2.1 method</h4><p>规定用于发送 form-data 的 HTTP 方法。有get请求与post请求。</p>
<p>post 默认将参数放在第四部分里面<br>get 默认将参数放在查询参数里面</p>
<p>如果form表单没有提交按钮，则无法提交。<br>form表单一般来发post请求</p>
<p>例子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下面的表单拥有两个输入字段以及一个提交按钮，当提交表单时，表单数据会提交到名为 &quot;form_action.asp&quot; 的页面</span><br><span class="line">&lt;form action&#x3D;&quot;form_action.asp&quot; method&#x3D;&quot;get&quot;&gt;</span><br><span class="line">  &lt;p&gt;First name: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;fname&quot; &#x2F;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p&gt;Last name: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;lname&quot; &#x2F;&gt;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Submit&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>
<h4 id="3-2-2-action"><a href="#3-2-2-action" class="headerlink" title="3.2.2 action"></a>3.2.2 action</h4><p>规定当提交表单时向何处发送表单数据</p>
<h3 id="3-3-考点"><a href="#3-3-考点" class="headerlink" title="3.3 考点"></a>3.3 考点</h3><ul>
<li>form 标签在以下哪些情况下可以被用户提交<ul>
<li>form 标签里面有一个 input type=submit 的元素</li>
<li>form 标签里面有一个 button 元素，button 的 type 属性为空</li>
</ul>
</li>
<li>form 标签里面的 input 加不加 name 属性由什么区别？<ul>
<li>如果 input 不加 name，那么在表单提交时，input 的值就不会出现在请求里</li>
</ul>
</li>
</ul>
<h2 id="四-table标签"><a href="#四-table标签" class="headerlink" title="四. table标签"></a>四. table标签</h2><h3 id="4-1-定义"><a href="#4-1-定义" class="headerlink" title="4.1 定义"></a>4.1 定义</h3><p>标签定义 HTML 表格,简单的 HTML 表格由 table 元素以及一个或多个 tr、th 或 td 元素组成。</p>
<h3 id="4-2-元素"><a href="#4-2-元素" class="headerlink" title="4.2 元素"></a>4.2 元素</h3><h4 id="4-2-1-tr（table-row）"><a href="#4-2-1-tr（table-row）" class="headerlink" title="4.2.1 tr（table row）"></a>4.2.1 tr（table row）</h4><p>定义表格行</p>
<h4 id="4-2-2-th"><a href="#4-2-2-th" class="headerlink" title="4.2.2 th"></a>4.2.2 th</h4><p>定义表头</p>
<h4 id="4-2-3-td（table-data）"><a href="#4-2-3-td（table-data）" class="headerlink" title="4.2.3 td（table data）"></a>4.2.3 td（table data）</h4><p>定义表格单元</p>
<h4 id="4-2-4-caption"><a href="#4-2-4-caption" class="headerlink" title="4.2.4 caption"></a>4.2.4 caption</h4><p>展示一个表格的标题.可选</p>
<h4 id="4-2-5-thead"><a href="#4-2-5-thead" class="headerlink" title="4.2.5 thead"></a>4.2.5 thead</h4><p>定义了一组定义表格的列头的行.可选</p>
<h4 id="4-2-6-tfoot"><a href="#4-2-6-tfoot" class="headerlink" title="4.2.6 tfoot"></a>4.2.6 tfoot</h4><p>定义了一组表格中各列的汇总行<br>tfoot放在thead前面没有效果，浏览器会自动纠正</p>
<h4 id="4-2-7-colgroup"><a href="#4-2-7-colgroup" class="headerlink" title="4.2.7 colgroup"></a>4.2.7 colgroup</h4><p>标签用于对表格中的列进行组合，以便对其进行格式化。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">两个 colgroup 元素为表格中的三列规定了不同的对齐方式和样式（注意第一个 colgroup 元素横跨两列）：</span><br><span class="line">&lt;table width&#x3D;&quot;100%&quot; border&#x3D;&quot;1&quot;&gt;</span><br><span class="line">  &lt;colgroup span&#x3D;&quot;2&quot; align&#x3D;&quot;left&quot;&gt;&lt;&#x2F;colgroup&gt;</span><br><span class="line">  &lt;colgroup align&#x3D;&quot;right&quot; style&#x3D;&quot;color:#0000FF;&quot;&gt;&lt;&#x2F;colgroup&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;th&gt;ISBN&lt;&#x2F;th&gt;</span><br><span class="line">    &lt;th&gt;Title&lt;&#x2F;th&gt;</span><br><span class="line">    &lt;th&gt;Price&lt;&#x2F;th&gt;</span><br><span class="line">  &lt;&#x2F;tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;3476896&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;td&gt;My first HTML&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;td&gt;$53&lt;&#x2F;td&gt;</span><br><span class="line">  &lt;&#x2F;tr&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-8-tbody"><a href="#4-2-8-tbody" class="headerlink" title="4.2.8 tbody"></a>4.2.8 tbody</h4><p>定义一段表格主体（正文）</p>
<h3 id="4-3-例子"><a href="#4-3-例子" class="headerlink" title="4.3 例子"></a>4.3 例子</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;table border&#x3D;&quot;1&quot;&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;th&gt;Month&lt;&#x2F;th&gt;</span><br><span class="line">&lt;th&gt;Savings&lt;&#x2F;th&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;January&lt;&#x2F;td&gt;</span><br><span class="line">&lt;td&gt;$100&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br></pre></td></tr></table></figure>
</table>

<h3 id="4-4-table注意事项"><a href="#4-4-table注意事项" class="headerlink" title="4.4 table注意事项"></a>4.4 table注意事项</h3><p>CSS:border-collapse：collapse 没有双线</p>
<h2 id="五、-参考资料"><a href="#五、-参考资料" class="headerlink" title="五、 参考资料"></a>五、 参考资料</h2><p><a href="https://my.oschina.net/liangrockman/blog/74468" target="_blank" rel="noopener">HTML中<a>标签的rel属性的含义_HTML5新增属性值 </a><br><a href="https://www.runoob.com/tags/att-input-type.html" target="_blank" rel="noopener">HTML <code>&lt;input&gt;</code> type 属性</a><br><a href="http://www.w3school.com.cn/tags/tag_colgroup.asp" target="_blank" rel="noopener">HTML <code>&lt;colgroup&gt;</code> 标签</a></p>
]]></content>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>理解HTML之空标签、可替换标签</title>
    <url>/2020/04/03/%E7%90%86%E8%A7%A3HTML%E4%B9%8B%E7%A9%BA%E6%A0%87%E7%AD%BE%E3%80%81%E5%8F%AF%E6%9B%BF%E6%8D%A2%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<h2 id="一、W3C-简介"><a href="#一、W3C-简介" class="headerlink" title="一、W3C 简介"></a>一、W3C 简介</h2><p>万维网联盟（英语：World Wide Web Consortium，缩写W3C），又称W3C理事会，是万维网的主要国际标准组织。</p>
<p>万维网联盟（W3C）由蒂姆·伯纳斯-李于1994年10月离开欧洲核子研究中心（CERN）后成立，在欧盟委员会和国防高等研究计划署（DARPA）的支持下成立于麻省理工学院MIT计算机科学与人工智能实验室（MIT／LCS）[2]，DARPA推出了ARPANET，是互联网前身之一。</p>
<h2 id="二、什么是空标签"><a href="#二、什么是空标签" class="headerlink" title="二、什么是空标签"></a>二、什么是空标签</h2><h3 id="2-1-含义"><a href="#2-1-含义" class="headerlink" title="2.1 含义"></a>2.1 含义</h3><p>没有闭合的标签称为空标签，如：<br/>和<img/>等。他们不存在成对的情况,通常在一个空元素上使用一个闭标签是无效的。例如， <code>&lt;input type=&quot;text&quot;&gt;&lt;/input&gt;</code>的闭标签是无效的 HTML。</p>
<h3 id="2-2-HTML-中有以下这些空元素："><a href="#2-2-HTML-中有以下这些空元素：" class="headerlink" title="2.2 HTML 中有以下这些空元素："></a>2.2 HTML 中有以下这些空元素：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">area</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">col</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">colgroup</span>&gt;</span> when the span is present</span><br><span class="line"><span class="tag">&lt;<span class="name">command</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">embed</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keygen</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">track</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">wbr</span>&gt;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="三、什么是可替换标签"><a href="#三、什么是可替换标签" class="headerlink" title="三、什么是可替换标签"></a>三、什么是可替换标签</h2><h3 id="3-1-含义"><a href="#3-1-含义" class="headerlink" title="3.1 含义"></a>3.1 含义</h3><p>在 CSS 中，可替换元素（replaced element）的展现效果不是由 CSS 来控制的。这些元素是一种外部对象，它们外观的渲染，是独立于 CSS 的。</p>
<h3 id="3-2-典型的可替换元素有："><a href="#3-2-典型的可替换元素有：" class="headerlink" title="3.2 典型的可替换元素有："></a>3.2 典型的可替换元素有：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">embed</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-3-有些元素仅在特定情况下被作为可替换元素处理，例如："><a href="#3-3-有些元素仅在特定情况下被作为可替换元素处理，例如：" class="headerlink" title="3.3 有些元素仅在特定情况下被作为可替换元素处理，例如："></a>3.3 有些元素仅在特定情况下被作为可替换元素处理，例如：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">applet</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="四、MDN-简介"><a href="#四、MDN-简介" class="headerlink" title="四、MDN 简介"></a>四、MDN 简介</h2><p>MDN Web Docs（旧称Mozilla Developer Network、Mozilla Developer Center，简称MDN）是一个汇集众多Mozilla基金会产品和网络技术开发文档的免费网站。</p>
<p><a href="https://developer.mozilla.org/en-US/" target="_blank" rel="noopener">官方网址</a></p>
<h2 id="五、MDN上HTML-所有标签列表"><a href="#五、MDN上HTML-所有标签列表" class="headerlink" title="五、MDN上HTML 所有标签列表"></a>五、MDN上HTML 所有标签列表</h2><h3 id="5-1-根元素-lt-html-gt-代表-HTML-或-XHTML-文档的根。其他所有元素必须是这个元素的子节点。"><a href="#5-1-根元素-lt-html-gt-代表-HTML-或-XHTML-文档的根。其他所有元素必须是这个元素的子节点。" class="headerlink" title="5.1 根元素&lt;html&gt;    代表 HTML 或 XHTML 文档的根。其他所有元素必须是这个元素的子节点。"></a>5.1 根元素<code>&lt;html&gt;</code>    代表 HTML 或 XHTML 文档的根。其他所有元素必须是这个元素的子节点。</h3><h3 id="5-2-文档元数据"><a href="#5-2-文档元数据" class="headerlink" title="5.2 文档元数据"></a>5.2 文档元数据</h3><p><code>&lt;head&gt;</code>    代表关于文档元数据的一个集合，包括脚本或样式表的链接或内容。<br><code>&lt;title&gt;</code>    定义文档的标题，将显示在浏览器的标题栏或标签页上。该元素只能包含文本，包含的标签不会被解释。<br><code>&lt;base&gt;</code>    定义页面上相对 URL 的基准 URL。<br><code>&lt;link&gt;</code>    用于链接外部的 CSS 到该文档。<br><code>&lt;meta&gt;</code>    定义其他 HTML 元素无法描述的元数据。<br><code>&lt;style&gt;</code>    用于内联 CSS。</p>
<h3 id="5-3-脚本"><a href="#5-3-脚本" class="headerlink" title="5.3 脚本"></a>5.3 脚本</h3><p><code>&lt;script&gt;</code>    定义一个内联脚本或链接到外部脚本。脚本语言是 JavaScript。<br><code>&lt;noscript&gt;</code>    定义当浏览器不支持脚本时显示的替代文字。<br><code>&lt;template&gt;</code> 这个元素在 HTML5 中加入    通过 JavaScript 在运行时实例化内容的容器。</p>
<h3 id="5-4-章节"><a href="#5-4-章节" class="headerlink" title="5.4 章节"></a>5.4 章节</h3><p><code>&lt;body&gt;</code>    代表 HTML 文档的内容。在文档中只能有一个 <code>&lt;body&gt;</code> 元素。<br><code>&lt;section&gt;</code> 这个元素在 HTML5 中加入    定义文档中的一个章节。<br><code>&lt;nav&gt;</code> 这个元素在 HTML5 中加入    定义只包含导航链接的章节。<br><code>&lt;article&gt;</code> 这个元素在 HTML5 中加入    定义可以独立于内容其余部分的完整独立内容块。<br><code>&lt;aside&gt;</code> 这个元素在 HTML5 中加入    定义和页面内容关联度较低的内容——如果被删除，剩下的内容仍然很合理。<br><code>&lt;h1&gt;</code>,<code>&lt;h2&gt;</code>,<code>&lt;h3&gt;</code>,<code>&lt;h4&gt;</code>,<code>&lt;h5&gt;</code>,<code>&lt;h6&gt;</code>    标题元素实现了六层文档标题，<code>&lt;h1&gt;</code> 是最大的标题，<code>&lt;h6&gt;</code> 是最小的标题。标题元素简要地描述章节的主题。<br><code>&lt;header&gt;</code> 这个元素在 HTML5 中加入    定义页面或章节的头部。它经常包含 logo、页面标题和导航性的目录。<br><code>&lt;footer&gt;</code> 这个元素在 HTML5 中加入    定义页面或章节的尾部。它经常包含版权信息、法律信息链接和反馈建议用的地址。<br><code>&lt;address&gt;</code>    定义包含联系信息的一个章节。<br><code>&lt;main&gt;</code>这个元素在 HTML5 中加入    定义文档中主要或重要的内容。</p>
<h3 id="5-5-组织内容"><a href="#5-5-组织内容" class="headerlink" title="5.5 组织内容"></a>5.5 组织内容</h3><p><code>&lt;p&gt;</code>    定义一个段落。<br><code>&lt;hr&gt;</code>    代表章节、文章或其他长内容中段落之间的分隔符。<br><code>&lt;pre&gt;</code>    代表其内容已经预先排版过，格式应当保留 。<br><code>&lt;blockquote&gt;</code>    代表引用自其他来源的内容。<br><code>&lt;ol&gt;</code>    定义一个有序列表。<br><code>&lt;ul&gt;</code>    定义一个无序列表。<br><code>&lt;li&gt;</code>    定义列表中的一个列表项。<br><code>&lt;dl&gt;</code>    定义一个定义列表（一系列术语和其定义）。<br><code>&lt;dt&gt;</code>    代表一个由下一个 <code>&lt;dd&gt;</code> 定义的术语。<br><code>&lt;dd&gt;</code>    代表出现在它之前术语的定义。<br><code>&lt;figure&gt;</code> 这个元素在 HTML5 中加入    代表一个和文档有关的图例。<br><code>&lt;figcaption&gt;</code> 这个元素在 HTML5 中加入    代表一个图例的说明。<br><code>&lt;div&gt;</code>    代表一个通用的容器，没有特殊含义。</p>
<h3 id="5-6-文字形式"><a href="#5-6-文字形式" class="headerlink" title="5.6 文字形式"></a>5.6 文字形式</h3><p><code>&lt;a&gt;</code>    代表一个链接到其他资源的超链接 。<br><code>&lt;em&gt;</code>    代表强调 文字。<br><code>&lt;strong&gt;</code>    代表特别重要 文字。<br><code>&lt;small&gt;</code>    代表注释 ，如免责声明、版权声明等，对理解文档不重要。<br><code>&lt;s&gt;</code>    代表不准确或不相关 的内容。<br><code>&lt;cite&gt;</code>    代表作品标题 。<br><code>&lt;q&gt;</code>    代表内联的引用 。<br><code>&lt;dfn&gt;</code>    代表一个术语包含在其最近祖先内容中的定义 。<br><code>&lt;abbr&gt;</code>    代表省略 或缩写 ，其完整内容在 title 属性中。<br><code>&lt;data&gt;</code> 这个元素在 HTML5 中加入    关联一个内容的机器可读的等价形式 （该元素只在 WHATWG 版本的 HTML 标准中，不在 W3C 版本的 HTML5 标准中）。<br><code>&lt;time&gt;</code> 这个元素在 HTML5 中加入    代表日期 和时间 值；机器可读的等价形式通过 datetime 属性指定。<br><code>&lt;code&gt;</code>    代表计算机代码 。<br><code>&lt;var&gt;</code>    代表代码中的变量 。<br><code>&lt;samp&gt;</code>    代表程序或电脑的输出 。<br><code>&lt;kbd&gt;</code>    代表用户输入 ，一般从键盘输出，但也可以代表其他输入，如语音输入。<br><code>&lt;sub&gt;</code>,<code>&lt;sup&gt;</code>    分别代表下标 和上标 。<br><code>&lt;i&gt;</code>    代表一段不同性质 的文字，如技术术语、外文短语等。<br><code>&lt;b&gt;</code>    代表一段需要被关注 的文字。<br><code>&lt;u&gt;</code>    代表一段需要下划线呈现的文本注释，如标记出拼写错误的文字等。<br><code>&lt;mark&gt;</code> 这个元素在 HTML5 中加入    代表一段需要被高亮的引用 文字。<br><code>&lt;ruby&gt;</code> 这个元素在 HTML5 中加入    代表被ruby 注释 标记的文本，如中文汉字和它的拼音。<br><code>&lt;rt&gt;</code> 这个元素在 HTML5 中加入    代表ruby 注释 ，如中文拼音。<br><code>&lt;rp&gt;</code> 这个元素在 HTML5 中加入    代表 ruby 注释两边的额外插入文本 ，用于在不支持 ruby 注释显示的浏览器中提供友好的注释显示。<br><code>&lt;bdi&gt;</code> 这个元素在 HTML5 中加入    代表需要脱离 父元素文本方向的一段文本。它允许嵌入一段不同或未知文本方向格式的文本。<br><code>&lt;bdo&gt;</code>    指定子元素的文本方向 ，显式地覆盖默认的文本方向。<br><code>&lt;span&gt;</code>    代表一段没有特殊含义的文本，当其他语义元素都不适合文本时候可以使用该元素。<br><code>&lt;br&gt;</code>    代表换行 。<br><code>&lt;wbr&gt;</code> 这个元素在 HTML5 中加入    代表建议换行 (Word Break Opportunity) ，当文本太长需要换行时将会在此处添加换行符。</p>
<h3 id="5-7-编辑"><a href="#5-7-编辑" class="headerlink" title="5.7 编辑"></a>5.7 编辑</h3><p><code>&lt;ins&gt;</code>    定义增加 到文档的内容。<br><code>&lt;del&gt;</code>    定义从文档移除 的内容。</p>
<h3 id="5-8-嵌入内容"><a href="#5-8-嵌入内容" class="headerlink" title="5.8 嵌入内容"></a>5.8 嵌入内容</h3><p><code>&lt;img&gt;</code>    代表一张图片 。<br><code>&lt;iframe&gt;</code>    代表一个内联的框架 。<br><code>&lt;embed&gt;</code> 这个元素在 HTML5 中加入    代表一个嵌入 的外部资源，如应用程序或交互内容。<br><code>&lt;object&gt;</code>    代表一个外部资源 ，如图片、HTML 子文档、插件等。<br><code>&lt;param&gt;</code>    代表 <code>&lt;object&gt;</code> 元素所指定的插件的参数 。<br><code>&lt;video&gt;</code> 这个元素在 HTML5 中加入    代表一段视频 及其视频文件和字幕，并提供了播放视频的用户界面。<br><code>&lt;audio&gt;</code> 这个元素在 HTML5 中加入    代表一段声音 ，或音频流 。<br><code>&lt;source&gt;</code> 这个元素在 HTML5 中加入    为 <code>&lt;video&gt;</code> 或 <code>&lt;audio&gt;</code> 这类媒体元素指定媒体源 。<br><code>&lt;track&gt;</code> 这个元素在 HTML5 中加入    为 <code>&lt;video&gt;</code> 或 <code>&lt;audio&gt;</code> 这类媒体元素指定文本轨道（字幕） 。<br><code>&lt;canvas&gt;</code> 这个元素在 HTML5 中加入    代表位图区域 ，可以通过脚本在它上面实时呈现图形，如图表、游戏绘图等。<br><code>&lt;map&gt;</code>    与 <code>&lt;area&gt;</code> 元素共同定义图像映射 区域。<br><code>&lt;area&gt;</code>    与 <code>&lt;map&gt;</code> 元素共同定义图像映射 区域。<br><code>&lt;svg&gt;</code> 这个元素在 HTML5 中加入    定义一个嵌入式矢量图 。<br><code>&lt;math&gt;</code> 这个元素在 HTML5 中加入    定义一段数学公式 。</p>
<h3 id="5-9-表格"><a href="#5-9-表格" class="headerlink" title="5.9 表格"></a>5.9 表格</h3><p><code>&lt;table&gt;</code>    定义多维数据 。<br><code>&lt;caption&gt;</code>    代表表格的标题 。<br><code>&lt;colgroup&gt;</code>    代表表格中一组单列或多列 。<br><code>&lt;col&gt;</code>    代表表格中的列 。<br><code>&lt;tbody&gt;</code>    代表表格中一块具体数据 （表格主体）。<br><code>&lt;thead&gt;</code>    代表表格中一块列标签 （表头）。<br><code>&lt;tfoot&gt;</code>    代表表格中一块列摘要 （表尾）。<br><code>&lt;tr&gt;</code>    代表表格中的行 。<br><code>&lt;td&gt;</code>    代表表格中的单元格 。<br><code>&lt;th&gt;</code>    代表表格中的头部单元格 。</p>
<h3 id="5-10-表单"><a href="#5-10-表单" class="headerlink" title="5.10 表单"></a>5.10 表单</h3><p><code>&lt;form&gt;</code>    代表一个表单 ，由控件组成。<br><code>&lt;fieldset&gt;</code>    代表控件组 。<br><code>&lt;legend&gt;</code>    代表 <code>&lt;fieldset&gt;</code> 控件组的标题 。<br><code>&lt;label&gt;</code>    代表表单控件的标题 。<br><code>&lt;input&gt;</code>    代表允许用户编辑数据的数据区 （文本框、单选框、复选框等）。<br><code>&lt;button&gt;</code>    代表按钮 。<br><code>&lt;select&gt;</code>    代表下拉框 。<br><code>&lt;datalist&gt;</code> 这个元素在 HTML5 中加入    代表提供给其他控件的一组预定义选项 。<br><code>&lt;optgroup&gt;</code>    代表一个选项分组 。<br><code>&lt;option&gt;</code>    代表一个<code>&lt;select&gt;</code> 元素或 <code>&lt;datalist&gt;</code> 元素中的一个选项<br><code>&lt;textarea&gt;</code>    代表多行文本框 。<br><code>&lt;keygen&gt;</code> 这个元素在 HTML5 中加入    代表一个密钥对生成器 控件。<br><code>&lt;output&gt;</code> 这个元素在 HTML5 中加入    代表计算值 。<br><code>&lt;progress&gt;</code> 这个元素在 HTML5 中加入    代表进度条 。<br><code>&lt;meter&gt;</code> 这个元素在 HTML5 中加入    代表滑动条 。</p>
<h3 id="5-11-交互元素"><a href="#5-11-交互元素" class="headerlink" title="5.11 交互元素"></a>5.11 交互元素</h3><p><code>&lt;details&gt;</code> 这个元素在 HTML5 中加入    代表一个用户可以(点击)获取额外信息或控件的小部件 。<br><code>&lt;summary&gt;</code> 这个元素在 HTML5 中加入    代表 <code>&lt;details&gt;</code> 元素的综述 或标题 。<br><code>&lt;menuitem&gt;</code> 这个元素在 HTML5 中加入    代表一个用户可以点击的菜单项。<br><code>&lt;menu&gt;</code> 这个元素在 HTML5 中加入    代表菜单。</p>
<h2 id="六、参考资料"><a href="#六、参考资料" class="headerlink" title="六、参考资料"></a>六、参考资料</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/HTML5/HTML5_element_list" target="_blank" rel="noopener">HTML5 标签列表
</a></p>
]]></content>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>简单理解HTTP之请求与响应</title>
    <url>/2020/04/03/%E7%AE%80%E5%8D%95%E7%90%86%E8%A7%A3HTTP%E4%B9%8B%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94/</url>
    <content><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>超文本传输协议（英语：HyperText Transfer Protocol，缩写：HTTP）是一种用于分布式、协作式和超媒体信息系统的应用层协议。HTTP是万维网的数据通信的基础。</p>
<p>HTTP 的作用就是指导浏览器和服务器如何进行沟通。</p>
<h2 id="curl命令"><a href="#curl命令" class="headerlink" title="curl命令"></a>curl命令</h2><p>在Linux中curl是一个利用URL规则在命令行下工作的文件传输工具，可以说是一款很强大的http命令行工具。它支持文件的上传和下载，是综合传输工具，但按传统，习惯称url为下载工具。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p><code>curl [option] [url]</code></p>
<a id="more"></a>

<h4 id="option"><a href="#option" class="headerlink" title="option"></a>option</h4><ul>
<li>-H/–header <code>&lt;line&gt;</code>    自定义头信息传递给服务器</li>
<li>-s/–silent 静音模式。不输出任何东西</li>
<li>-V/–version    显示版本信息</li>
<li>-X/–request <code>&lt;command&gt;</code>    指定什么命令</li>
<li>d/–data <code>&lt;data&gt;</code>    HTTP POST方式传送数据</li>
</ul>
<h2 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h2><h3 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 动词路径协议&#x2F;版本</span><br><span class="line">2 Key1: value1</span><br><span class="line">2 Key2: value2</span><br><span class="line">2 Key3: value3</span><br><span class="line">2 Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">2 Host: www.baidu.com</span><br><span class="line">2 User-Agent: curl&#x2F;7.54.0</span><br><span class="line">3 </span><br><span class="line">4 要上传的数据</span><br></pre></td></tr></table></figure>

<p>请求最多包含四部分，最少包含三部分。（也就是说第四部分可以为空）<br>第三部分永远都是一个回车<br>动词有 GET POST PUT PATCH DELETE HEAD OPTIONS 等<br>这里的路径包括「查询参数」，但不包括「锚点」<br>如果没有写路径，那么路径默认为 /<br>第2部分中的 Content-Type 标注了第 4 部分的格式</p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><blockquote>
<p>命令curl -s -v -H “qqq111: xxx” – “<a href="https://www.baidu.com&quot;" target="_blank" rel="noopener">https://www.baidu.com&quot;</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; GET &#x2F; HTTP&#x2F;1.1</span><br><span class="line">&gt; Host: www.baidu.com</span><br><span class="line">&gt; User-Agent: curl&#x2F;7.54.0</span><br><span class="line">&gt; Accept: *&#x2F;*</span><br><span class="line">&gt; qqq111: xxx</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>

<h3 id="如何用Chrome开发者工具查看-HTTP-请求内容"><a href="#如何用Chrome开发者工具查看-HTTP-请求内容" class="headerlink" title="如何用Chrome开发者工具查看 HTTP 请求内容"></a>如何用Chrome开发者工具查看 HTTP 请求内容</h3><p>1.点右键<br>2.点“检查”<br>3.点“Network”那栏<br>4.在输入框输入baidu.com<br>5.在Network那里会获取相关http信息，找到Name下的<code>www.baidu.com</code>选项点击进去<br>6.找到Request Headers选项<br>7.点击隔壁的view source<br>8.就可以查看到HTTP请求内容</p>
<h2 id="HTTP响应"><a href="#HTTP响应" class="headerlink" title="HTTP响应"></a>HTTP响应</h2><h3 id="组成部分-1"><a href="#组成部分-1" class="headerlink" title="组成部分"></a>组成部分</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 协议&#x2F;版本号状态码状态解释</span><br><span class="line">2 Key1: value1</span><br><span class="line">2 Key2: value2</span><br><span class="line">2 Content-Length: 17931</span><br><span class="line">2 Content-Type: text&#x2F;html</span><br><span class="line">3</span><br><span class="line">4 要下载的内容</span><br></pre></td></tr></table></figure>

<h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><p>1xx 不常用<br>2xx 表示成功 200<br>3xx 表示滚吧，301 302<br>4xx 表示客户端错误  404<br>5xx 表示好吧，服务器错误  502</p>
<h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><p><code>命令 curl -X POST -d &quot;1234567890&quot; -s -v -H &quot;qqq111: xxx&quot; -- &quot;https://www.baidu.com&quot;</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt; HTTP&#x2F;1.1 302 Found</span><br><span class="line">&lt; Connection: Keep-Alive</span><br><span class="line">&lt; Content-Length: 17931</span><br><span class="line">&lt; Content-Type: text&#x2F;html</span><br><span class="line">&lt; Date: Mon, 10 Jun 2019 03:15:09 GMT</span><br><span class="line">&lt; Etag: &quot;54d9748e-460b&quot;</span><br><span class="line">&lt; Server: bfe&#x2F;1.0.8.18</span><br><span class="line">&lt;</span><br><span class="line">&lt; 下载的内容，省略。。。</span><br></pre></td></tr></table></figure>

<h3 id="HTTP-响应包括哪些部分，如何用Chrome开发者工具查看-HTTP-响应内容"><a href="#HTTP-响应包括哪些部分，如何用Chrome开发者工具查看-HTTP-响应内容" class="headerlink" title="HTTP 响应包括哪些部分，如何用Chrome开发者工具查看 HTTP 响应内容"></a>HTTP 响应包括哪些部分，如何用Chrome开发者工具查看 HTTP 响应内容</h3><p>1.点右键<br>2.点“检查”<br>3.点“Network”那栏<br>4.在输入框输入baidu.com<br>5.在Network那里会获取相关http信息，找到Name下的<code>www.baidu.com</code>选项点击进去<br>6.找到Response Headers选项<br>7.点击隔壁的view source<br>8.就可以查看到HTTP响应内容</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>1.<a href="https://www.cnblogs.com/duhuo/p/5695256.html" target="_blank" rel="noopener">Linux curl命令详解</a><br>2.<a href="http://man.linuxde.net/curl" target="_blank" rel="noopener">curl命令</a></p>
]]></content>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>说说CSS布局那些事</title>
    <url>/2020/04/03/%E8%AF%B4%E8%AF%B4CSS%E5%B8%83%E5%B1%80%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
    <content><![CDATA[<h2 id="一、左右布局"><a href="#一、左右布局" class="headerlink" title="一、左右布局"></a>一、左右布局</h2><h3 id="1-1方法一：margin宽度等于固定宽那栏的宽度"><a href="#1-1方法一：margin宽度等于固定宽那栏的宽度" class="headerlink" title="1.1方法一：margin宽度等于固定宽那栏的宽度"></a>1.1方法一：margin宽度等于固定宽那栏的宽度</h3><h4 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h4><p>HTML部分</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container clearfix"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sideBar"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是侧边栏，我是固定宽<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是主体部分，我是自适应的<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CSS部分</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">  *&#123;</span><br><span class="line">   <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.sideBar</span>&#123;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="number">#FF6200</span>;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">	<span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span>&#123;</span><br><span class="line">	<span class="attribute">background-color</span>:<span class="number">#00A480</span>;</span><br><span class="line">	<span class="attribute">margin-left</span>: <span class="number">200px</span>;<span class="comment">/*减去固定宽的侧边栏的宽度*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.claerfix</span>&#123;</span><br><span class="line">	<span class="attribute">display</span>: inline-block;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">	<span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>,<span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">	<span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;<span class="comment">/*这是让高度铺满页面*/</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="1-2-方法二：两栏分别左右浮动"><a href="#1-2-方法二：两栏分别左右浮动" class="headerlink" title="1.2 方法二：两栏分别左右浮动"></a>1.2 方法二：两栏分别左右浮动</h3><h4 id="代码如下-1"><a href="#代码如下-1" class="headerlink" title="代码如下"></a>代码如下</h4><p>HTML部分</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container clearfix"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sideBar"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是左div，我向左浮动<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是右div，我向右浮动<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CSS部分</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"> *&#123;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.sideBar</span>&#123;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="number">#FF9400</span>;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">	<span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span>&#123;</span><br><span class="line">	<span class="attribute">background-color</span>:<span class="number">#3F8FD2</span>;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">	<span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.claerfix</span>&#123;</span><br><span class="line">	<span class="attribute">display</span>: inline-block;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">	<span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>,<span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">	<span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;<span class="comment">/*这是让高度铺满页面*/</span></span><br></pre></td></tr></table></figure>

<h2 id="二、-左中右布局"><a href="#二、-左中右布局" class="headerlink" title="二、 左中右布局"></a>二、 左中右布局</h2><h3 id="2-1-圣杯布局（左右固定宽，中间自适应）"><a href="#2-1-圣杯布局（左右固定宽，中间自适应）" class="headerlink" title="2.1 圣杯布局（左右固定宽，中间自适应）"></a>2.1 圣杯布局（左右固定宽，中间自适应）</h3><h4 id="代码如下-2"><a href="#代码如下-2" class="headerlink" title="代码如下"></a>代码如下</h4><p>HTML代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container clearfix"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是中间div，我是自适应的<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"leftSide"</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是左div<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rgihtSide"</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是右div<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CSS代码</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">	<span class="attribute">padding</span>:<span class="number">0</span> <span class="number">300px</span> <span class="number">0</span> <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span>&#123;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="number">#61B4CF</span>;</span><br><span class="line">	<span class="attribute">float</span>: left;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.leftSide</span>&#123;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="number">#FF5D40</span>;</span><br><span class="line">	<span class="attribute">float</span>: left;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">	<span class="attribute">left</span>: -<span class="number">100%</span>;</span><br><span class="line">	<span class="attribute">margin-left</span>: -<span class="number">200px</span>;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.rgihtSide</span>&#123;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="number">#87EA00</span>;</span><br><span class="line">	<span class="attribute">float</span>: left;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">	<span class="attribute">right</span>: -<span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">margin-left</span>: -<span class="number">300px</span>;	</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>,<span class="selector-tag">div</span>&#123;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">	<span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;<span class="comment">/*这是让高度铺满页面*/</span></span><br></pre></td></tr></table></figure>
<h4 id="注意要点"><a href="#注意要点" class="headerlink" title="注意要点"></a>注意要点</h4><ul>
<li>在容器最中间的<code>div</code>要先写，然后再写两侧，因为浏览器是从上到下渲染的，要给中间为最下面，否则会出现两侧<code>div</code>会覆盖有bug。</li>
<li><code>.leftSide</code>与<code>.rgihtSide</code>的代码是不同的，要特别注意一下。<ul>
<li>在相对定位的值上，<code>.leftSide</code>的<code>left</code>是用<code>-100%</code>表示，因为在HTML的中，<code>.leftSide</code>是在排中间的，因为CSS要将他排在最左边就，必须用100%。</li>
<li>而<code>.rgihtSide</code>的<code>right</code>是用<code>-300px</code>,是在父元素的右边的外面的300px的意思 </li>
</ul>
</li>
</ul>
<h3 id="2-2-双飞翼布局"><a href="#2-2-双飞翼布局" class="headerlink" title="2.2 双飞翼布局"></a>2.2 双飞翼布局</h3><h4 id="代码如下-3"><a href="#代码如下-3" class="headerlink" title="代码如下"></a>代码如下</h4><p>HTML部分</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center-inner"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是center里间的div，我是自适应的<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"leftSide"</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是左div<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rgihtSide"</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是右div<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>CSS部分</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">  *&#123;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span>,</span><br><span class="line"><span class="selector-class">.leftSide</span>,</span><br><span class="line"><span class="selector-class">.rgihtSide</span>&#123;</span><br><span class="line">	<span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="number">#028E9B</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center-inner</span>&#123;</span><br><span class="line">	<span class="attribute">margin-left</span>: <span class="number">150px</span>;</span><br><span class="line">	<span class="attribute">margin-right</span>: <span class="number">250px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.leftSide</span>&#123;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="number">#BFBB30</span>;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">	<span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.rgihtSide</span>&#123;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="number">#C062D3</span>;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">250px</span>;</span><br><span class="line">	<span class="attribute">margin-left</span>: -<span class="number">250px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>,<span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;<span class="comment">/*这是让高度铺满页面*/</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-圣杯布局与双飞翼布局的关系"><a href="#2-3-圣杯布局与双飞翼布局的关系" class="headerlink" title="2.3 圣杯布局与双飞翼布局的关系"></a>2.3 圣杯布局与双飞翼布局的关系</h3><ul>
<li>圣杯布局是在2006年提出的，而双飞翼布局是在后提出，是在圣杯布局上改进。</li>
<li>相同点<ul>
<li>他们都要让三个布局<code>DIV float：left</code></li>
<li>都要先让HTML最中间的<code>DIV</code>先写先渲染</li>
<li>都设置中间的<code>DIV</code>宽度为100%</li>
<li>都设置负边距，左边<code>DIV</code>左边距为负100%，而右边<code>DIV</code>的左边距为负的自身宽度。</li>
</ul>
</li>
<li>不同点<ul>
<li>圣杯布局结构比双飞翼布局少一层</li>
<li>双飞翼布局没有用相对定位</li>
</ul>
</li>
</ul>
<h3 id="2-4-flex布局"><a href="#2-4-flex布局" class="headerlink" title="2.4 flex布局"></a>2.4 flex布局</h3><p>flex 这个功能可以说是太强大，无论是在三栏多栏布局，还是水平垂直居中它都可以实现。</p>
<h4 id="flex简单说明"><a href="#flex简单说明" class="headerlink" title="flex简单说明"></a>flex简单说明</h4><ul>
<li><code>display:flex</code>声明flex布局</li>
<li><code>flex-direction</code>决定主轴的方向</li>
<li><code>justify-content</code>项目在主轴上的对齐方式。</li>
<li><code>align-items</code>项目在交叉轴上如何对齐。</li>
</ul>
<p>继续推荐大家看阮一峰大大的对flex讲解文章<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">Flex 布局教程：语法篇</a></p>
<h2 id="三、水平居中方法"><a href="#三、水平居中方法" class="headerlink" title="三、水平居中方法"></a>三、水平居中方法</h2><ul>
<li><p>行内元素<code>text-align：center；</code> </p>
</li>
<li><p>块级元素<code>在width:有宽度 可以使用margin：0 auto；</code></p>
</li>
<li><p>绝对定位实现</p>
</li>
<li><p>display: flex实现水平居中,例子如下</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"> <span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>:<span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">display</span>:flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;   </span><br><span class="line">  &#125;</span><br><span class="line"> <span class="selector-class">.container</span> &gt; <span class="selector-tag">div</span>&#123;</span><br><span class="line">   <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">background-color</span>:blue;</span><br><span class="line"> &#125;</span><br><span class="line"> &lt;/style&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="四、-垂直居中方法"><a href="#四、-垂直居中方法" class="headerlink" title="四、 垂直居中方法"></a>四、 垂直居中方法</h2><ul>
<li>单行文字可以<code>line-height</code></li>
<li>flex布局实现垂直居中 </li>
<li>上下padding相等法</li>
<li>绝对定位和margin实现垂直水平居中<br>例子如下</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line"><span class="selector-tag">left</span>: 50%;</span><br><span class="line"><span class="selector-tag">top</span>: 50%;</span><br><span class="line"><span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span><br><span class="line"><span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span><br><span class="line"><span class="selector-tag">margin-left</span><span class="selector-pseudo">:-100px</span>;</span><br><span class="line"><span class="selector-tag">margin-top</span><span class="selector-pseudo">:-50px</span>;</span><br></pre></td></tr></table></figure>

<h2 id="五、-参考资料"><a href="#五、-参考资料" class="headerlink" title="五、 参考资料"></a>五、 参考资料</h2><p><a href="http://www.cnblogs.com/imwtr/p/4441741.html" target="_blank" rel="noopener">CSS布局 – 圣杯布局 &amp; 双飞翼布局</a><br><a href="https://www.zhihu.com/question/20543196" target="_blank" rel="noopener">用 CSS 实现元素垂直居中，有哪些好的方案？</a></p>
]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
</search>
